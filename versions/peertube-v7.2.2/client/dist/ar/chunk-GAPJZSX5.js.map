{"version":3,"mappings":"sUAKMA,EAAA,QAAIC,EAAA,GAAUC,EAAA,GAAAC,CAAA,QAAAC,CAAA,CAAAC,CAAA,CAAAC,SAAA,CAAVC,EAAA,EAAAC,EAAAC,CAAA,aAAAC,EAAAP,CAAA,CAAAE,CAAA,KAAAF,CAAA,KAJRF,EAAA,mCAEAD,EAAA,QACEW,EAAA,EAAAC,EAAA,cAAAC,CAAA,EAIAb,EAAA,QAAI,SAC2GC,EAAA,gCAA0BC,EAAA,EAAI,EACxI,EAGPF,EAAA,SAA2GC,EAAA,+BAAyBC,EAAA,GAAAC,CAAA,QAAAC,CAAA,CAAAU,CAAA,GATlIP,EAAA,GAAAQ,EAAAC,EAAAC,aAAA,ICOJ,GAAaC,IAAqB,KAA5B,GAAOA,GAAP,KAAOA,EAAqB,CACvBC,SAAWC,EAAMC,SAAQ,EACzBC,aAAeF,EAAM,GAAO,CAAEG,UAAWC,CAAgB,CAAE,EAEpEP,cAA0B,GAE1BQ,UAAQ,CACN,KAAKC,KAAI,CACX,EAEAC,aAAW,CACT,KAAKD,KAAI,CACX,EAEQA,MAAI,CACV,GAAMP,GAAW,KAAKA,SAAQ,EAC9B,GAAIA,IAAa,eAAgB,CAC/B,KAAKF,cAAgB,KAAKW,mBAAmBC,CAAU,EACvD,OACF,CAEA,GAAIV,IAAa,mBAAoB,CACnC,KAAKF,cAAgB,KAAKW,mBAAmBE,CAAc,EAC3D,OACF,CACF,CAEAF,mBAAoBG,EAAe,CACjC,GAAMC,GAAwC,CAC5CC,2BAAUC,CACVC,0CAAMD,CACNE,iEAASF,CACTG,iDAAMH,CACNI,6DAAOJ,EAGT,MAAOH,GAAMQ,IAAIC,GAAKR,EAAYQ,CAAC,CAAC,EAAEC,OAAOC,GAAQ,CAAC,CAACA,CAAI,CAC7D,IAAAC,CAAA,CArCWzB,4CAAqB,IAAAyB,CAAA,CAArBzB,wBAAqB0B,UAAA,uBAAAC,OAAA,CAAA1B,SAAA,eAAAG,aAAA,oBAAAwB,SAAA,CAAAC,CAAA,EAAAC,mBAAAC,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,6RAAAC,SAAA,QAAAA,CAAAC,EAAAC,EAAA,IAAAD,EAAA,IAAAE,CAAA,GDXlCC,EAAA,EAAAC,EAAA,yBAAAC,CAAA,EAgBA3D,EAAA,YACE4D,EAAA,GACF1D,EAAA,GAAA2D,CAAA,QAAAC,CAAA,CAAAC,CAAA,IAF6BxD,EAAA,GAAAyD,EAAA,aAAAC,CAAA,KAAAC,YAAA,ECPhBC,EAAcC,CAAU,EAAAC,OAAA;iEAAA,KAE/B,GAAOnD,GAAPoD,QAAOpD,EAAqB,aAAAqD,CAAA,IAAAC,CAAA","names":["ɵɵelementStart","ɵɵtext","ɵɵelementEnd","e","s","t","$implicit","ɵɵadvance","ɵɵtextInterpolate","rule_r1","N","ɵɵrepeaterCreate","MarkdownHintComponent_ng_template_0_For_3_Template","ɵɵrepeaterTrackByIdentity","x","ɵɵrepeater","ctx_r1","markdownRules","MarkdownHintComponent","helpType","input","required","supportRelMe","transform","booleanAttribute","ngOnInit","init","ngOnChanges","createMarkdownList","TEXT_RULES","ENHANCED_RULES","rules","rulesToText","emphasis","$localize","link","newline","list","image","map","r","filter","text","m","selectors","inputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","_","ɵɵtemplate","MarkdownHintComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","ɵɵprojection","i","b","T","ɵɵproperty","tooltipTemplate_r3","dependencies","CommonModule","NgbPopover","styles","_MarkdownHintComponent","F","a"],"ignoreList":[],"sources":["src/app/shared/shared-main/text/markdown-hint.component.html","src/app/shared/shared-main/text/markdown-hint.component.ts"],"sourcesContent":["<ng-template #tooltipTemplate>\n  Supported markdown formats:\n\n  <ul>\n    @for (rule of markdownRules; track rule) {\n      <li>{{ rule }}</li>\n    }\n\n    <li>\n      <a href=\"https://docs.joinmastodon.org/user/profile/#verification\" target=\"_blank\" rel=\"noopener noreferrer\">Mastodon verification link</a>\n    </li>\n  </ul>\n\n  <a class=\"pt\" href=\"https://wikipedia.org/wiki/Markdown#Example\" target=\"_blank\" rel=\"noopener noreferrer\">Learn more about Markdown</a>\n</ng-template>\n\n<span class=\"root fake-link\" [ngbPopover]=\"tooltipTemplate\">\n  <ng-content></ng-content>\n</span>\n","import { CommonModule } from '@angular/common'\nimport { booleanAttribute, Component, input, OnChanges, OnInit } from '@angular/core'\nimport { NgbPopover } from '@ng-bootstrap/ng-bootstrap'\nimport { ENHANCED_RULES, TEXT_RULES } from '@peertube/peertube-core-utils'\n\n@Component({\n  selector: 'my-markdown-hint',\n  styleUrls: [ './markdown-hint.component.scss' ],\n  templateUrl: './markdown-hint.component.html',\n  imports: [ CommonModule, NgbPopover ]\n})\nexport class MarkdownHintComponent implements OnInit, OnChanges {\n  readonly helpType = input.required<'markdownText' | 'markdownEnhanced'>()\n  readonly supportRelMe = input(false, { transform: booleanAttribute })\n\n  markdownRules: string[] = []\n\n  ngOnInit () {\n    this.init()\n  }\n\n  ngOnChanges () {\n    this.init()\n  }\n\n  private init () {\n    const helpType = this.helpType()\n    if (helpType === 'markdownText') {\n      this.markdownRules = this.createMarkdownList(TEXT_RULES)\n      return\n    }\n\n    if (helpType === 'markdownEnhanced') {\n      this.markdownRules = this.createMarkdownList(ENHANCED_RULES)\n      return\n    }\n  }\n\n  createMarkdownList (rules: string[]) {\n    const rulesToText: { [id: string]: string } = {\n      emphasis: $localize`Emphasis: *text*`,\n      link: $localize`Links: [title](https://example.com)`,\n      newline: $localize`New lines`,\n      list: $localize`Lists`,\n      image: $localize`Images: ![description](https://example.com/image.png)`\n    }\n\n    return rules.map(r => rulesToText[r]).filter(text => !!text)\n  }\n}\n"]}