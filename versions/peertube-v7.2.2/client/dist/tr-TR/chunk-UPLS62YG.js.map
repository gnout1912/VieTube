{
  "version": 3,
  "sources": ["src/app/shared/shared-main/video/video-import.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, RestPagination, RestService, ServerService, UserService } from '@app/core'\nimport { objectToFormData } from '@app/helpers'\nimport { peertubeTranslate } from '@peertube/peertube-core-utils'\nimport { ResultList, VideoImport, VideoImportCreate } from '@peertube/peertube-models'\nimport { SortMeta } from 'primeng/api'\nimport { Observable } from 'rxjs'\nimport { catchError, map, switchMap } from 'rxjs/operators'\nimport { environment } from '../../../../environments/environment'\n\n@Injectable()\nexport class VideoImportService {\n  private authHttp = inject(HttpClient)\n  private restService = inject(RestService)\n  private restExtractor = inject(RestExtractor)\n  private serverService = inject(ServerService)\n\n  private static BASE_VIDEO_IMPORT_URL = environment.apiUrl + '/api/v1/videos/imports/'\n\n  importVideo (options: VideoImportCreate): Observable<VideoImport> {\n    const url = VideoImportService.BASE_VIDEO_IMPORT_URL\n\n    const data = objectToFormData(options)\n    return this.authHttp.post<VideoImport>(url, data)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  getMyVideoImports (pagination: RestPagination, sort: SortMeta, search?: string): Observable<ResultList<VideoImport>> {\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      const filters = this.restService.parseQueryStringFilter(search, {\n        videoChannelSyncId: {\n          prefix: 'videoChannelSyncId:'\n        },\n        targetUrl: {\n          prefix: 'targetUrl:'\n        }\n      })\n\n      params = this.restService.addObjectParams(params, filters)\n    }\n\n    return this.authHttp\n      .get<ResultList<VideoImport>>(UserService.BASE_USERS_URL + 'me/videos/imports', { params })\n      .pipe(\n        switchMap(res => this.extractVideoImports(res)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  deleteVideoImport (videoImport: VideoImport) {\n    return this.authHttp.delete(VideoImportService.BASE_VIDEO_IMPORT_URL + videoImport.id)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  cancelVideoImport (videoImport: VideoImport) {\n    return this.authHttp.post(VideoImportService.BASE_VIDEO_IMPORT_URL + videoImport.id + '/cancel', {})\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  private extractVideoImports (result: ResultList<VideoImport>): Observable<ResultList<VideoImport>> {\n    return this.serverService.getServerLocale()\n      .pipe(\n        map(translations => {\n          result.data.forEach(d => d.state.label = peertubeTranslate(d.state.label, translations))\n\n          return result\n        })\n      )\n  }\n}\n"],
  "mappings": "gLAYM,IAAOA,EAAP,MAAOA,CAAkB,CACrBC,SAAWC,EAAOC,CAAU,EAC5BC,YAAcF,EAAOG,CAAW,EAChCC,cAAgBJ,EAAOK,CAAa,EACpCC,cAAgBN,EAAOO,CAAa,EAI5CC,YAAaC,EAA0B,CACrC,IAAMC,EAAMZ,EAAmBa,sBAEzBC,EAAOC,EAAiBJ,CAAO,EACrC,OAAO,KAAKV,SAASe,KAAkBJ,EAAKE,CAAI,EAC7CG,KAAKC,EAAWC,GAAO,KAAKb,cAAcc,YAAYD,CAAG,CAAC,CAAC,CAChE,CAEAE,kBAAmBC,EAA4BC,EAAgBC,EAAe,CAC5E,IAAIC,EAAS,IAAIC,EAGjB,GAFAD,EAAS,KAAKrB,YAAYuB,iBAAiBF,EAAQH,EAAYC,CAAI,EAE/DC,EAAQ,CACV,IAAMI,EAAU,KAAKxB,YAAYyB,uBAAuBL,EAAQ,CAC9DM,mBAAoB,CAClBC,OAAQ,uBAEVC,UAAW,CACTD,OAAQ,cAEX,EAEDN,EAAS,KAAKrB,YAAY6B,gBAAgBR,EAAQG,CAAO,CAC3D,CAEA,OAAO,KAAK3B,SACTiC,IAA6BC,EAAYC,eAAiB,oBAAqB,CAAEX,OAAAA,CAAM,CAAE,EACzFR,KACCoB,EAAUlB,GAAO,KAAKmB,oBAAoBnB,CAAG,CAAC,EAC9CD,EAAWqB,GAAO,KAAKjC,cAAcc,YAAYmB,CAAG,CAAC,CAAC,CAE5D,CAEAC,kBAAmBC,EAAwB,CACzC,OAAO,KAAKxC,SAASyC,OAAO1C,EAAmBa,sBAAwB4B,EAAYE,EAAE,EAClF1B,KAAKC,EAAWqB,GAAO,KAAKjC,cAAcc,YAAYmB,CAAG,CAAC,CAAC,CAChE,CAEAK,kBAAmBH,EAAwB,CACzC,OAAO,KAAKxC,SAASe,KAAKhB,EAAmBa,sBAAwB4B,EAAYE,GAAK,UAAW,CAAA,CAAE,EAChG1B,KAAKC,EAAWqB,GAAO,KAAKjC,cAAcc,YAAYmB,CAAG,CAAC,CAAC,CAChE,CAEQD,oBAAqBO,EAA+B,CAC1D,OAAO,KAAKrC,cAAcsC,gBAAe,EACtC7B,KACC8B,EAAIC,IACFH,EAAO/B,KAAKmC,QAAQC,GAAKA,EAAEC,MAAMC,MAAQC,EAAkBH,EAAEC,MAAMC,MAAOJ,CAAY,CAAC,EAEhFH,EACR,CAAC,CAER,GAtDQS,EANGtD,EAMIa,wBAAwB0C,EAAYC,OAAS,6BANjDxD,wCAAAA,EAAkB,KAAlBA,wBAAAA,EAAkByD,QAAlBzD,EAAkB0D,SAAA,CAAA,GAAzB,IAAO1D,EAAP2D",
  "names": ["VideoImportService", "authHttp", "inject", "HttpClient", "restService", "RestService", "restExtractor", "RestExtractor", "serverService", "ServerService", "importVideo", "options", "url", "BASE_VIDEO_IMPORT_URL", "data", "objectToFormData", "post", "pipe", "catchError", "res", "handleError", "getMyVideoImports", "pagination", "sort", "search", "params", "HttpParams", "addRestGetParams", "filters", "parseQueryStringFilter", "videoChannelSyncId", "prefix", "targetUrl", "addObjectParams", "get", "UserService", "BASE_USERS_URL", "switchMap", "extractVideoImports", "err", "deleteVideoImport", "videoImport", "delete", "id", "cancelVideoImport", "result", "getServerLocale", "map", "translations", "forEach", "d", "state", "label", "peertubeTranslate", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "_VideoImportService"]
}
