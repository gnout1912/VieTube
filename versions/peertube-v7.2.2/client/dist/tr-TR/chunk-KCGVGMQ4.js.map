{"version":3,"mappings":"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","names":["ɵɵelement","e","o","_","ɵɵproperty","ctx_r0","preview","bannerUrl","ɵɵsanitizeUrl","X","i","ɵɵelementContainer","j","ɵɵelementStart","ɵɵtemplate","ActorBannerEditComponent_div_4_ng_container_1_Template","ɵɵelementEnd","n","w","bannerFormat","ɵɵadvance","uploadNewBanner_r2","Q","Y","v","ɵɵi18n","ActorBannerEditComponent_div_5_ng_container_7_Template","ɵɵlistener","ɵɵrestoreView","_r3","ɵɵnextContext","ɵɵresetView","deleteBanner","q","_r4","onBannerChange","bannerExtensions","ActorBannerEditComponent","serverService","inject","ServerService","notifier","Notifier","bannerfileInput","viewChild","bannerPopover","input","undefined","previewImage","bannerChange","output","bannerDelete","maxBannerSize","ngOnInit","config","getHTMLConfig","banner","file","size","max","extensions","join","getBytes","bannerfile","nativeElement","files","error","formData","FormData","append","close","emit","imageToDataURL","then","result","hasBanner","s","selectors","viewQuery","rf","ctx","A","r","k","F","t","R","inputs","outputs","decls","vars","consts","$localize","ActorBannerEditComponent_img_3_Template","ActorBannerEditComponent_div_4_Template","ActorBannerEditComponent_div_5_Template","ActorBannerEditComponent_ng_template_6_Template","ɵɵtemplateRefExtractor","dependencies","NgIf","NgbTooltip","NgTemplateOutlet","NgbDropdown","NgbDropdownToggle","GlobalIconComponent","NgbDropdownMenu","styles","_ActorBannerEditComponent","re","a"],"ignoreList":[],"sources":["src/app/shared/shared-actor-image-edit/actor-banner-edit.component.html","src/app/shared/shared-actor-image-edit/actor-banner-edit.component.ts"],"sourcesContent":["<div class=\"actor\">\n  <div class=\"actor-img-edit-container\">\n    <div class=\"banner-placeholder\">\n      <img *ngIf=\"hasBanner()\" [src]=\"preview || bannerUrl()\" alt=\"Banner\" />\n    </div>\n\n    <div *ngIf=\"!hasBanner()\" class=\"actor-img-edit-button button-file primary-button button-focus-within\" [ngbTooltip]=\"bannerFormat\" placement=\"right\" container=\"body\">\n      <ng-container *ngTemplateOutlet=\"uploadNewBanner\"></ng-container>\n    </div>\n\n    <div *ngIf=\"hasBanner()\" ngbDropdown placement=\"right\">\n      <button type=\"button\" class=\"actor-img-edit-button button-file primary-button\" ngbDropdownToggle>\n        <my-global-icon iconName=\"edit\"></my-global-icon>\n        <span i18n>Change your banner</span>\n      </button>\n\n      <div ngbDropdownMenu>\n        <div class=\"dropdown-item dropdown-file button-focus-within\" [ngbTooltip]=\"bannerFormat\">\n          <ng-container *ngTemplateOutlet=\"uploadNewBanner\"></ng-container>\n        </div>\n\n        <button type=\"button\" class=\"dropdown-item\" (click)=\"deleteBanner()\">\n          <my-global-icon iconName=\"delete\"></my-global-icon>\n          <span i18n>Remove banner</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #uploadNewBanner>\n  <my-global-icon iconName=\"upload\"></my-global-icon>\n  <label for=\"bannerfile\" i18n>Upload a new banner</label>\n  <input #bannerfileInput type=\"file\" name=\"bannerfile\" id=\"bannerfile\" [accept]=\"bannerExtensions\" (change)=\"onBannerChange()\"/>\n</ng-template>\n","import { NgIf, NgTemplateOutlet } from '@angular/common'\nimport { Component, ElementRef, OnInit, inject, input, output, viewChild } from '@angular/core'\nimport { SafeResourceUrl } from '@angular/platform-browser'\nimport { Notifier, ServerService } from '@app/core'\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle, NgbPopover, NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { getBytes } from '@root-helpers/bytes'\nimport { imageToDataURL } from '@root-helpers/images'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\n\n@Component({\n  selector: 'my-actor-banner-edit',\n  templateUrl: './actor-banner-edit.component.html',\n  styleUrls: [\n    './actor-image-edit.scss',\n    './actor-banner-edit.component.scss'\n  ],\n  imports: [ NgIf, NgbTooltip, NgTemplateOutlet, NgbDropdown, NgbDropdownToggle, GlobalIconComponent, NgbDropdownMenu ]\n})\nexport class ActorBannerEditComponent implements OnInit {\n  private serverService = inject(ServerService)\n  private notifier = inject(Notifier)\n\n  readonly bannerfileInput = viewChild<ElementRef<HTMLInputElement>>('bannerfileInput')\n  readonly bannerPopover = viewChild<NgbPopover>('bannerPopover')\n\n  readonly bannerUrl = input<string>(undefined)\n  readonly previewImage = input(false)\n\n  readonly bannerChange = output<FormData>()\n  readonly bannerDelete = output()\n\n  bannerFormat = ''\n  maxBannerSize = 0\n  bannerExtensions = ''\n\n  preview: SafeResourceUrl\n\n  ngOnInit (): void {\n    const config = this.serverService.getHTMLConfig()\n    this.maxBannerSize = config.banner.file.size.max\n    this.bannerExtensions = config.banner.file.extensions.join(', ')\n\n    this.bannerFormat = $localize`ratio 6/1, recommended size: 1920x317, max size: ${\n      getBytes(this.maxBannerSize)\n    }, extensions: ${this.bannerExtensions}`\n  }\n\n  onBannerChange () {\n    const bannerfile = this.bannerfileInput().nativeElement.files[0]\n    if (bannerfile.size > this.maxBannerSize) {\n      this.notifier.error('Error', $localize`This image is too large.`)\n      return\n    }\n\n    const formData = new FormData()\n    formData.append('bannerfile', bannerfile)\n    this.bannerPopover()?.close()\n    this.bannerChange.emit(formData)\n\n    if (this.previewImage()) {\n      imageToDataURL(bannerfile).then(result => this.preview = result)\n    }\n  }\n\n  deleteBanner () {\n    this.preview = undefined\n    this.bannerDelete.emit()\n  }\n\n  hasBanner () {\n    return !!this.preview || !!this.bannerUrl()\n  }\n}\n"]}