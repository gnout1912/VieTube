{"version":3,"mappings":"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","names":["ɵɵelement","s","g","v","ɵɵproperty","ctx_r0","form","valid","UserInterfaceSettingsComponent","FormReactive","formReactiveService","inject","FormReactiveService","authService","AuthService","notifier","Notifier","userService","UserService","themeService","ThemeService","serverService","ServerService","user","input","undefined","reactiveUpdate","notifyOnUpdate","userInformationLoaded","availableThemes","formValuesWatcher","serverConfig","instanceName","instance","name","ngOnInit","getHTMLConfig","id","label","description","getDefaultInstanceThemeLabel","getDefaultThemeItem","buildAvailableThemes","buildForm","theme","subscribe","patchValue","valueChanges","updateInterfaceSettings","ngOnDestroy","unsubscribe","details","value","isLoggedIn","updateMyProfile","next","refreshUserInformation","success","error","err","message","updateMyAnonymousProfile","default","m","__ngFactoryType__","selectors","inputs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","i18n_0","$localize","ɵɵelementStart","ɵɵlistener","ctx","ɵɵi18n","ɵɵelementEnd","ɵɵtemplate","UserInterfaceSettingsComponent_input_5_Template","t","ɵɵadvance","dependencies","FormsModule","ɵNgNoValidate","NgControlStatus","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","NgIf","SelectOptionsComponent","styles","_UserInterfaceSettingsComponent","Se","pe","ge","a","nsfwFlagItems","me","UserVideoSettingsComponent","formErrors","validationMessages","nsfwItems","updateNSFWDefaultLabel","nsfwPolicy","controls","pipe","first","defaultNSFWPolicy","nsfwFlagViolent","buildNSFWFormFlag","NSFWFlag","VIOLENT","nsfwFlagSex","EXPLICIT_SEX","p2pEnabled","autoPlayVideo","autoPlayNextVideo","videoLanguages","handleReactiveUpdate","obj","updateDetails","onlyKeys","Array","isArray","length","nsfwFlagsDisplayed","buildNSFWUpdateFlag","nsfwFlagsHidden","nsfwFlagsWarned","nsfwFlagsBlurred","onlyKeysWithNSFW","includes","pick","updateLoggedProfile","updateAnonymousProfile","isNsfwFlagsEnabled","nsfwFlagsSettings","enabled","oldForm","__spreadValues","formValue","updatedKey","Object","keys","find","k","flag","type","result","NONE","defaultItem","item","nsfwPolicyLabel","i","ngContentSelectors","_c1","z","UserVideoSettingsComponent_Conditional_5_Template","ɵɵelementContainerStart","b","ɵɵprojection","ɵɵi18nStart","ɵɵi18nEnd","UserVideoSettingsComponent_input_33_Template","ɵɵconditional","HelpComponent","SelectLanguagesComponent","PeertubeCheckboxComponent","SelectRadioComponent","_UserVideoSettingsComponent","Pe","Ve"],"ignoreList":[],"sources":["src/app/shared/shared-user-settings/user-interface-settings.component.html","src/app/shared/shared-user-settings/user-interface-settings.component.ts","src/app/shared/shared-user-settings/user-video-settings.component.html","src/app/shared/shared-user-settings/user-video-settings.component.ts"],"sourcesContent":["<form (ngSubmit)=\"updateInterfaceSettings()\" [formGroup]=\"form\">\n\n  <div class=\"form-group\">\n    <label i18n for=\"theme\">Theme</label>\n\n    <my-select-options inputId=\"theme\" formControlName=\"theme\" [items]=\"availableThemes\"></my-select-options>\n  </div>\n\n  <input *ngIf=\"!reactiveUpdate()\" type=\"submit\" class=\"peertube-button primary-button\" i18n-value value=\"Save interface settings\" [disabled]=\"!form.valid\">\n</form>\n","import { Subject, Subscription } from 'rxjs'\nimport { Component, OnDestroy, OnInit, inject, input } from '@angular/core'\nimport { AuthService, Notifier, ServerService, ThemeService, UserService } from '@app/core'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { HTMLServerConfig, User, UserUpdateMe } from '@peertube/peertube-models'\nimport { SelectOptionsItem } from 'src/types'\nimport { NgIf } from '@angular/common'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { SelectOptionsComponent } from '../shared-forms/select/select-options.component'\n\n@Component({\n  selector: 'my-user-interface-settings',\n  templateUrl: './user-interface-settings.component.html',\n  styleUrls: [ './user-interface-settings.component.scss' ],\n  imports: [ FormsModule, ReactiveFormsModule, NgIf, SelectOptionsComponent ]\n})\nexport class UserInterfaceSettingsComponent extends FormReactive implements OnInit, OnDestroy {\n  protected formReactiveService = inject(FormReactiveService)\n  private authService = inject(AuthService)\n  private notifier = inject(Notifier)\n  private userService = inject(UserService)\n  private themeService = inject(ThemeService)\n  private serverService = inject(ServerService)\n\n  readonly user = input<User>(undefined)\n  readonly reactiveUpdate = input(false)\n  readonly notifyOnUpdate = input(true)\n  readonly userInformationLoaded = input<Subject<any>>(undefined)\n\n  availableThemes: SelectOptionsItem[]\n  formValuesWatcher: Subscription\n\n  private serverConfig: HTMLServerConfig\n\n  get instanceName () {\n    return this.serverConfig.instance.name\n  }\n\n  ngOnInit () {\n    this.serverConfig = this.serverService.getHTMLConfig()\n\n    this.availableThemes = [\n      { id: 'instance-default', label: $localize`${this.instanceName} theme`, description: this.getDefaultInstanceThemeLabel() },\n\n      this.themeService.getDefaultThemeItem(),\n\n      ...this.themeService.buildAvailableThemes()\n    ]\n\n    this.buildForm({\n      theme: null\n    })\n\n    this.userInformationLoaded()\n      .subscribe(() => {\n        this.form.patchValue({\n          theme: this.user().theme\n        })\n\n        if (this.reactiveUpdate()) {\n          this.formValuesWatcher = this.form.valueChanges.subscribe(() => this.updateInterfaceSettings())\n        }\n      })\n  }\n\n  ngOnDestroy () {\n    this.formValuesWatcher?.unsubscribe()\n  }\n\n  updateInterfaceSettings () {\n    const theme = this.form.value['theme']\n\n    const details: UserUpdateMe = {\n      theme\n    }\n\n    if (this.authService.isLoggedIn()) {\n      this.userService.updateMyProfile(details)\n        .subscribe({\n          next: () => {\n            this.authService.refreshUserInformation()\n\n            if (this.notifyOnUpdate()) this.notifier.success($localize`Interface settings updated.`)\n          },\n\n          error: err => this.notifier.error(err.message)\n        })\n\n      return\n    }\n\n    this.userService.updateMyAnonymousProfile(details)\n    if (this.notifyOnUpdate()) this.notifier.success($localize`Interface settings updated.`)\n  }\n\n  private getDefaultInstanceThemeLabel () {\n    const theme = this.serverConfig.theme.default\n\n    if (theme === 'default') {\n      return this.themeService.getDefaultThemeItem().label\n    }\n\n    return theme\n  }\n}\n","<form (ngSubmit)=\"updateDetails()\" [formGroup]=\"form\">\n  <div class=\"form-group\">\n    <div class=\"anchor\" id=\"video-sensitive-content-policy\"></div>\n    <!-- video-sensitive-content-policy anchor -->\n\n    <div class=\"form-group\">\n      <my-select-radio\n        [items]=\"nsfwItems\"\n        inputId=\"nsfwPolicy\"\n        isGroup=\"true\"\n        i18n-label\n        label=\"Policy on videos containing sensitive content\"\n        formControlName=\"nsfwPolicy\"\n      ></my-select-radio>\n    </div>\n\n    @if (isNsfwFlagsEnabled()) {\n      <div class=\"label\" i18n>Override sensitive content policy for certain videos</div>\n\n      <div class=\"form-group-description\" i18n>\n        These subjective criteria may be optionally applied to certain videos. The classification of some videos may differ from your personal judgment.\n      </div>\n\n      <div class=\"form-group mb-3\">\n        <my-select-radio\n          [items]=\"nsfwFlagItems\"\n          inputId=\"nsfwFlagViolent\"\n          isGroup=\"true\"\n          labelSecondary=\"true\"\n          i18n-label\n          label=\"Violent content\"\n          formControlName=\"nsfwFlagViolent\"\n        ></my-select-radio>\n      </div>\n\n      <div class=\"form-group mb-3\">\n        <my-select-radio\n          [items]=\"nsfwFlagItems\"\n          inputId=\"nsfwFlagSex\"\n          isGroup=\"true\"\n          labelSecondary=\"true\"\n          i18n-label\n          label=\"Sexually explicit material\"\n          formControlName=\"nsfwFlagSex\"\n        ></my-select-radio>\n      </div>\n    }\n  </div>\n\n  <div class=\"form-group\">\n    <div class=\"anchor\" id=\"video-languages-subtitles\"></div>\n    <!-- video-languages-subtitles anchor -->\n\n    <div class=\"pt-label-container\">\n      <label i18n for=\"videoLanguages\">Only display videos in the following languages/subtitles</label>\n      <my-help>\n        <ng-container i18n>In Recently added, Trending, Local, Most liked and Search pages</ng-container>\n      </my-help>\n    </div>\n\n    <div>\n      <my-select-languages inputId=\"videoLanguages\" [maxLanguages]=\"20\" formControlName=\"videoLanguages\"></my-select-languages>\n    </div>\n  </div>\n\n  <ng-content select=\"inner-title\"></ng-content>\n\n  <div class=\"form-group\">\n    <my-peertube-checkbox inputName=\"p2pEnabled\" formControlName=\"p2pEnabled\" [recommended]=\"true\" i18n-labelText labelText=\"Help share videos being played\">\n      <ng-container ngProjectAs=\"description\">\n        <span i18n\n        >The <a class=\"link-primary\" href=\"https://docs.joinpeertube.org/admin/privacy-guide#peertube-p2p-privacy\" target=\"_blank\">sharing system</a> implies\n          that some technical information about your system (such as a public IP address) can be sent to other peers, but greatly helps to reduce server\n          load.</span>\n      </ng-container>\n    </my-peertube-checkbox>\n  </div>\n\n  <div class=\"form-group\">\n    <my-peertube-checkbox inputName=\"autoPlayVideo\" formControlName=\"autoPlayVideo\" i18n-labelText labelText=\"Automatically play videos\">\n      <ng-container ngProjectAs=\"description\">\n        <span i18n>When on a video page, directly start playing the video.</span>\n      </ng-container>\n    </my-peertube-checkbox>\n  </div>\n\n  <div class=\"form-group\">\n    <my-peertube-checkbox\n      inputName=\"autoPlayNextVideo\"\n      formControlName=\"autoPlayNextVideo\"\n      i18n-labelText\n      labelText=\"Automatically start playing the next video\"\n    >\n      <ng-container ngProjectAs=\"description\">\n        <span i18n>When a video ends, follow up with the next suggested video.</span>\n      </ng-container>\n    </my-peertube-checkbox>\n  </div>\n\n  <input *ngIf=\"!reactiveUpdate()\" type=\"submit\" i18n-value value=\"Save video settings\" [disabled]=\"!form.valid\" class=\"peertube-button primary-button mt-3\">\n</form>\n","import { NgIf } from '@angular/common'\nimport { Component, OnDestroy, OnInit, inject, input } from '@angular/core'\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { AuthService, Notifier, ServerService, User, UserService } from '@app/core'\nimport { FormReactiveErrors, FormReactiveService, FormReactiveValidationMessages } from '@app/shared/shared-forms/form-reactive.service'\nimport { NSFWFlag, NSFWFlagType, NSFWPolicyType, UserUpdateMe } from '@peertube/peertube-models'\nimport { pick } from 'lodash-es'\nimport { Subject, Subscription } from 'rxjs'\nimport { first } from 'rxjs/operators'\nimport { SelectOptionsItem } from 'src/types'\nimport { BuildFormArgument } from '../form-validators/form-validator.model'\nimport { PeertubeCheckboxComponent } from '../shared-forms/peertube-checkbox.component'\nimport { SelectLanguagesComponent } from '../shared-forms/select/select-languages.component'\nimport { SelectRadioComponent } from '../shared-forms/select/select-radio.component'\nimport { HelpComponent } from '../shared-main/buttons/help.component'\n\ntype NSFWFlagPolicyType = NSFWPolicyType | 'default'\n\ntype Form = {\n  nsfwPolicy: FormControl<NSFWPolicyType>\n  nsfwFlagViolent: FormControl<NSFWFlagPolicyType>\n  nsfwFlagSex: FormControl<NSFWFlagPolicyType>\n\n  p2pEnabled: FormControl<boolean>\n  autoPlayVideo: FormControl<boolean>\n  autoPlayNextVideo: FormControl<boolean>\n  videoLanguages: FormControl<string[]>\n}\n\n@Component({\n  selector: 'my-user-video-settings',\n  templateUrl: './user-video-settings.component.html',\n  styleUrls: [ './user-video-settings.component.scss' ],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    HelpComponent,\n    SelectLanguagesComponent,\n    PeertubeCheckboxComponent,\n    NgIf,\n    SelectRadioComponent\n  ]\n})\nexport class UserVideoSettingsComponent implements OnInit, OnDestroy {\n  private formReactiveService = inject(FormReactiveService)\n  private authService = inject(AuthService)\n  private notifier = inject(Notifier)\n  private userService = inject(UserService)\n  private serverService = inject(ServerService)\n\n  readonly user = input<User>(null)\n  readonly reactiveUpdate = input(false)\n  readonly notifyOnUpdate = input(true)\n  readonly userInformationLoaded = input<Subject<any>>(undefined)\n\n  form: FormGroup<Form>\n  formErrors: FormReactiveErrors = {}\n  validationMessages: FormReactiveValidationMessages = {}\n\n  nsfwItems: SelectOptionsItem[] = [\n    {\n      id: 'do_not_list',\n      label: $localize`Hide`\n    },\n    {\n      id: 'blur',\n      label: $localize`Blur`\n    },\n    {\n      id: 'warn',\n      label: $localize`Warn`\n    },\n    {\n      id: 'display',\n      label: $localize`Display`\n    }\n  ]\n\n  nsfwFlagItems: SelectOptionsItem[] = [\n    {\n      id: 'default',\n      label: $localize`Default`\n    },\n    {\n      id: 'do_not_list',\n      label: $localize`Hide`\n    },\n    {\n      id: 'blur',\n      label: $localize`Blur`\n    },\n    {\n      id: 'warn',\n      label: $localize`Warn`\n    },\n    {\n      id: 'display',\n      label: $localize`Display`\n    }\n  ]\n\n  formValuesWatcher: Subscription\n\n  ngOnInit () {\n    this.buildForm()\n\n    this.updateNSFWDefaultLabel(this.user().nsfwPolicy)\n    this.form.controls.nsfwPolicy.valueChanges.subscribe(nsfwPolicy => this.updateNSFWDefaultLabel(nsfwPolicy))\n\n    this.userInformationLoaded().pipe(first())\n      .subscribe(\n        () => {\n          const serverConfig = this.serverService.getHTMLConfig()\n          const defaultNSFWPolicy = serverConfig.instance.defaultNSFWPolicy\n\n          this.form.patchValue({\n            nsfwPolicy: this.user().nsfwPolicy || defaultNSFWPolicy,\n            nsfwFlagViolent: this.buildNSFWFormFlag(NSFWFlag.VIOLENT),\n            nsfwFlagSex: this.buildNSFWFormFlag(NSFWFlag.EXPLICIT_SEX),\n\n            p2pEnabled: this.user().p2pEnabled,\n            autoPlayVideo: this.user().autoPlayVideo === true,\n            autoPlayNextVideo: this.user().autoPlayNextVideo,\n            videoLanguages: this.user().videoLanguages\n          })\n\n          if (this.reactiveUpdate()) this.handleReactiveUpdate()\n        }\n      )\n  }\n\n  ngOnDestroy () {\n    this.formValuesWatcher?.unsubscribe()\n  }\n\n  private buildForm () {\n    const obj: BuildFormArgument = {\n      nsfwPolicy: null,\n      nsfwFlagViolent: null,\n      nsfwFlagSex: null,\n\n      p2pEnabled: null,\n      autoPlayVideo: null,\n      autoPlayNextVideo: null,\n      videoLanguages: null\n    }\n\n    const {\n      form,\n      formErrors,\n      validationMessages\n    } = this.formReactiveService.buildForm<Form>(obj)\n\n    this.form = form\n    this.formErrors = formErrors\n    this.validationMessages = validationMessages\n  }\n\n  updateDetails (onlyKeys?: string[]) {\n    const videoLanguages = this.form.value.videoLanguages\n\n    if (Array.isArray(videoLanguages)) {\n      if (videoLanguages.length > 20) {\n        this.notifier.error($localize`Too many languages are enabled. Please enable them all or stay below 20 enabled languages.`)\n        return\n      }\n    }\n\n    const value = this.form.value\n\n    let details: UserUpdateMe = {\n      nsfwPolicy: value.nsfwPolicy,\n      p2pEnabled: value.p2pEnabled,\n      autoPlayVideo: value.autoPlayVideo,\n      autoPlayNextVideo: value.autoPlayNextVideo,\n\n      nsfwFlagsDisplayed: this.buildNSFWUpdateFlag('display'),\n      nsfwFlagsHidden: this.buildNSFWUpdateFlag('do_not_list'),\n      nsfwFlagsWarned: this.buildNSFWUpdateFlag('warn'),\n      nsfwFlagsBlurred: this.buildNSFWUpdateFlag('blur'),\n\n      videoLanguages\n    }\n\n    if (onlyKeys) {\n      const hasNSFWFlags = onlyKeys.includes('nsfwFlagViolent') ||\n        onlyKeys.includes('nsfwFlagSex')\n\n      const onlyKeysWithNSFW = hasNSFWFlags\n        ? [ ...onlyKeys, 'nsfwFlagsDisplayed', 'nsfwFlagsHidden', 'nsfwFlagsWarned', 'nsfwFlagsBlurred' ]\n        : onlyKeys\n\n      details = pick(details, onlyKeysWithNSFW)\n    }\n\n    if (this.authService.isLoggedIn()) {\n      return this.updateLoggedProfile(details)\n    }\n\n    return this.updateAnonymousProfile(details)\n  }\n\n  isNsfwFlagsEnabled () {\n    return this.serverService.getHTMLConfig().nsfwFlagsSettings.enabled\n  }\n\n  private handleReactiveUpdate () {\n    let oldForm = { ...this.form.value }\n\n    this.formValuesWatcher = this.form.valueChanges.subscribe((formValue: any) => {\n      const updatedKey = Object.keys(formValue)\n        .find(k => formValue[k] !== ((oldForm as any)[k]))\n\n      oldForm = { ...this.form.value }\n\n      this.updateDetails([ updatedKey ])\n    })\n  }\n\n  private updateLoggedProfile (details: UserUpdateMe) {\n    this.userService.updateMyProfile(details)\n      .subscribe({\n        next: () => {\n          this.authService.refreshUserInformation()\n\n          if (this.notifyOnUpdate()) this.notifier.success($localize`Video settings updated.`)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  private updateAnonymousProfile (details: UserUpdateMe) {\n    this.userService.updateMyAnonymousProfile(details)\n\n    if (this.notifyOnUpdate()) {\n      this.notifier.success($localize`Display/Video settings updated.`)\n    }\n  }\n\n  private buildNSFWFormFlag (flag: NSFWFlagType): NSFWPolicyType | 'default' {\n    const user = this.user()\n\n    if ((user.nsfwFlagsDisplayed & flag) === flag) return 'display'\n    if ((user.nsfwFlagsWarned & flag) === flag) return 'warn'\n    if ((user.nsfwFlagsBlurred & flag) === flag) return 'blur'\n    if ((user.nsfwFlagsHidden & flag) === flag) return 'do_not_list'\n\n    return 'default'\n  }\n\n  private buildNSFWUpdateFlag (type: NSFWPolicyType): number {\n    let result = NSFWFlag.NONE\n\n    if (this.form.value.nsfwFlagViolent === type) result |= NSFWFlag.VIOLENT\n    if (this.form.value.nsfwFlagSex === type) result |= NSFWFlag.EXPLICIT_SEX\n\n    return result\n  }\n\n  private updateNSFWDefaultLabel (nsfwPolicy: NSFWPolicyType) {\n    const defaultItem = this.nsfwFlagItems.find(item => item.id === 'default')\n    const nsfwPolicyLabel = this.nsfwItems.find(i => i.id === nsfwPolicy).label\n\n    defaultItem.label = $localize`Default (${nsfwPolicyLabel})`\n  }\n}\n"]}