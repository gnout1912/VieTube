{
  "version": 3,
  "sources": ["src/app/shared/shared-main/channel/video-channel.model.ts"],
  "sourcesContent": ["import { getAPIUrl } from '@app/helpers'\nimport { maxBy } from '@peertube/peertube-core-utils'\nimport { ActorImage, Account as ServerAccount, VideoChannel as ServerVideoChannel, ViewsPerDate } from '@peertube/peertube-models'\nimport { Actor } from '../account/actor.model'\n\nexport class VideoChannel extends Actor implements ServerVideoChannel {\n  displayName: string\n  description: string\n  support: string\n\n  nameWithHost: string\n  nameWithHostForced: string\n\n  banners: ActorImage[]\n\n  bannerUrl: string\n\n  updatedAt: Date | string\n\n  ownerAccount?: ServerAccount\n  ownerBy?: string\n\n  videosCount?: number\n\n  viewsPerDay?: ViewsPerDate[]\n  totalViews?: number\n\n  static GET_ACTOR_AVATAR_URL (\n    actor: {\n      avatars: { width: number, fileUrl?: string, url?: string, path: string }[]\n    },\n    size: number\n  ) {\n    return Actor.GET_ACTOR_AVATAR_URL(actor, size)\n  }\n\n  static GET_ACTOR_BANNER_URL (channel: ServerVideoChannel) {\n    if (!channel || channel.banners.length === 0) {\n      return ''\n    }\n\n    const banner = maxBy(channel.banners, 'width')\n    if (!banner) return ''\n\n    if (banner.url) return banner.url\n\n    return getAPIUrl() + banner.path\n  }\n\n  static GET_DEFAULT_AVATAR_URL (size: number) {\n    if (size <= 48) {\n      return `${window.location.origin}/client/assets/images/default-avatar-video-channel-48x48.png`\n    }\n\n    return `${window.location.origin}/client/assets/images/default-avatar-video-channel.png`\n  }\n\n  static buildPublicUrl (channel: Pick<ServerVideoChannel, 'name' | 'host'>) {\n    return `/c/${Actor.CREATE_BY_STRING(channel.name, channel.host)}`\n  }\n\n  constructor (hash: Partial<ServerVideoChannel>) {\n    super(hash)\n\n    this.displayName = hash.displayName\n    this.description = hash.description\n    this.support = hash.support\n\n    this.banners = hash.banners || []\n\n    this.isLocal = hash.isLocal\n\n    this.nameWithHost = Actor.CREATE_BY_STRING(this.name, this.host)\n    this.nameWithHostForced = Actor.CREATE_BY_STRING(this.name, this.host, true)\n\n    this.videosCount = hash.videosCount\n\n    if (hash.updatedAt) this.updatedAt = new Date(hash.updatedAt.toString())\n\n    if (hash.viewsPerDay) {\n      this.viewsPerDay = hash.viewsPerDay.map(v => ({ ...v, date: new Date(v.date) }))\n    }\n\n    if (hash.totalViews !== null && hash.totalViews !== undefined) {\n      this.totalViews = hash.totalViews\n    }\n\n    if (hash.ownerAccount) {\n      this.ownerAccount = hash.ownerAccount\n      this.ownerBy = Actor.CREATE_BY_STRING(hash.ownerAccount.name, hash.ownerAccount.host)\n    }\n\n    this.updateComputedAttributes()\n  }\n\n  updateAvatar (newAvatars: ActorImage[]) {\n    this.avatars = newAvatars\n\n    this.updateComputedAttributes()\n  }\n\n  resetAvatar () {\n    this.updateAvatar([])\n  }\n\n  updateBanner (newBanners: ActorImage[]) {\n    this.banners = newBanners\n\n    this.updateComputedAttributes()\n  }\n\n  resetBanner () {\n    this.updateBanner([])\n  }\n\n  updateComputedAttributes () {\n    this.bannerUrl = VideoChannel.GET_ACTOR_BANNER_URL(this)\n  }\n}\n"],
  "mappings": "wGAKM,IAAOA,EAAP,MAAOA,UAAqBC,CAAK,CACrCC,YACAC,YACAC,QAEAC,aACAC,mBAEAC,QAEAC,UAEAC,UAEAC,aACAC,QAEAC,YAEAC,YACAC,WAEA,OAAOC,qBACLC,EAGAC,EAAY,CAEZ,OAAOhB,EAAMc,qBAAqBC,EAAOC,CAAI,CAC/C,CAEA,OAAOC,qBAAsBC,EAA2B,CACtD,GAAI,CAACA,GAAWA,EAAQZ,QAAQa,SAAW,EACzC,MAAO,GAGT,IAAMC,EAASC,EAAMH,EAAQZ,QAAS,OAAO,EAC7C,OAAKc,EAEDA,EAAOE,IAAYF,EAAOE,IAEvBC,EAAS,EAAKH,EAAOI,KAJR,EAKtB,CAEA,OAAOC,uBAAwBT,EAAY,CACzC,OAAIA,GAAQ,GACH,GAAGU,OAAOC,SAASC,MAAM,+DAG3B,GAAGF,OAAOC,SAASC,MAAM,wDAClC,CAEA,OAAOC,eAAgBX,EAAkD,CACvE,MAAO,MAAMlB,EAAM8B,iBAAiBZ,EAAQa,KAAMb,EAAQc,IAAI,CAAC,EACjE,CAEAC,YAAaC,EAAiC,CAC5C,MAAMA,CAAI,EAEV,KAAKjC,YAAciC,EAAKjC,YACxB,KAAKC,YAAcgC,EAAKhC,YACxB,KAAKC,QAAU+B,EAAK/B,QAEpB,KAAKG,QAAU4B,EAAK5B,SAAW,CAAA,EAE/B,KAAK6B,QAAUD,EAAKC,QAEpB,KAAK/B,aAAeJ,EAAM8B,iBAAiB,KAAKC,KAAM,KAAKC,IAAI,EAC/D,KAAK3B,mBAAqBL,EAAM8B,iBAAiB,KAAKC,KAAM,KAAKC,KAAM,EAAI,EAE3E,KAAKrB,YAAcuB,EAAKvB,YAEpBuB,EAAK1B,YAAW,KAAKA,UAAY,IAAI4B,KAAKF,EAAK1B,UAAU6B,SAAQ,CAAE,GAEnEH,EAAKtB,cACP,KAAKA,YAAcsB,EAAKtB,YAAY0B,IAAIC,GAAMC,EAAAC,EAAA,GAAKF,GAAL,CAAQG,KAAM,IAAIN,KAAKG,EAAEG,IAAI,CAAC,EAAG,GAG7ER,EAAKrB,aAAe,MAAQqB,EAAKrB,aAAe8B,SAClD,KAAK9B,WAAaqB,EAAKrB,YAGrBqB,EAAKzB,eACP,KAAKA,aAAeyB,EAAKzB,aACzB,KAAKC,QAAUV,EAAM8B,iBAAiBI,EAAKzB,aAAasB,KAAMG,EAAKzB,aAAauB,IAAI,GAGtF,KAAKY,yBAAwB,CAC/B,CAEAC,aAAcC,EAAwB,CACpC,KAAKC,QAAUD,EAEf,KAAKF,yBAAwB,CAC/B,CAEAI,aAAW,CACT,KAAKH,aAAa,CAAA,CAAE,CACtB,CAEAI,aAAcC,EAAwB,CACpC,KAAK5C,QAAU4C,EAEf,KAAKN,yBAAwB,CAC/B,CAEAO,aAAW,CACT,KAAKF,aAAa,CAAA,CAAE,CACtB,CAEAL,0BAAwB,CACtB,KAAKrC,UAAYR,EAAakB,qBAAqB,IAAI,CACzD",
  "names": ["VideoChannel", "Actor", "displayName", "description", "support", "nameWithHost", "nameWithHostForced", "banners", "bannerUrl", "updatedAt", "ownerAccount", "ownerBy", "videosCount", "viewsPerDay", "totalViews", "GET_ACTOR_AVATAR_URL", "actor", "size", "GET_ACTOR_BANNER_URL", "channel", "length", "banner", "maxBy", "url", "getAPIUrl", "path", "GET_DEFAULT_AVATAR_URL", "window", "location", "origin", "buildPublicUrl", "CREATE_BY_STRING", "name", "host", "constructor", "hash", "isLocal", "Date", "toString", "map", "v", "__spreadProps", "__spreadValues", "date", "undefined", "updateComputedAttributes", "updateAvatar", "newAvatars", "avatars", "resetAvatar", "updateBanner", "newBanners", "resetBanner"]
}
