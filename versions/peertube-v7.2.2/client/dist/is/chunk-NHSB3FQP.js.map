{"version":3,"mappings":"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","names":["ɵɵelement","i","o","c","ɵɵproperty","ɵɵpureFunction2","_c0","ctx_r0","previewWidth","previewHeight","imageSrc","ɵɵsanitizeUrl","z","t","PreviewUploadComponent","serverService","inject","ServerService","inputLabel","input","undefined","inputName","allowedExtensionsMessage","maxSizeText","serverConfig","bytesPipe","file","constructor","BytesPipe","videoImageExtensions","video","image","extensions","maxVideoImageSize","size","max","maxVideoImageSizeInBytes","transform","getReactiveFileButtonTooltip","ngOnInit","getHTMLConfig","join","onFileChanged","propagateChange","updatePreview","_","writeValue","registerOnChange","fn","registerOnTouched","imageToDataURL","then","result","g","selectors","inputs","features","ɵɵProvidersFeature","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","i18n_0","$localize","ɵɵelementStart","ɵɵlistener","$event","ctx","ɵɵelementEnd","ɵɵtemplate","PreviewUploadComponent_img_3_Template","PreviewUploadComponent_div_4_Template","a","ɵɵadvance","dependencies","ReactiveFileComponent","NgIf","NgStyle","styles","_PreviewUploadComponent","B"],"ignoreList":[],"sources":["src/app/shared/shared-forms/preview-upload.component.html","src/app/shared/shared-forms/preview-upload.component.ts"],"sourcesContent":["<div class=\"root\">\n  <div class=\"preview-container\">\n    <my-reactive-file\n      [inputName]=\"inputName()\" [inputLabel]=\"inputLabel()\" [extensions]=\"videoImageExtensions\" [maxFileSize]=\"maxVideoImageSize\" placement=\"right\"\n      icon=\"upload\" (fileChanged)=\"onFileChanged($event)\" [buttonTooltip]=\"getReactiveFileButtonTooltip()\" theme=\"primary\"\n    ></my-reactive-file>\n\n    <img *ngIf=\"imageSrc\" [ngStyle]=\"{ width: previewWidth(), height: previewHeight() }\" [src]=\"imageSrc\" class=\"preview\" alt=\"Preview\" i18n-alt />\n    <div *ngIf=\"!imageSrc\" [ngStyle]=\"{ width: previewWidth(), height: previewHeight() }\" class=\"preview no-image\"></div>\n  </div>\n</div>\n","import { Component, forwardRef, OnInit, inject, input } from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\nimport { ServerService } from '@app/core'\nimport { imageToDataURL } from '@root-helpers/images'\nimport { HTMLServerConfig } from '@peertube/peertube-models'\nimport { NgIf, NgStyle } from '@angular/common'\nimport { ReactiveFileComponent } from './reactive-file.component'\nimport { BytesPipe } from '../shared-main/common/bytes.pipe'\n\n@Component({\n  selector: 'my-preview-upload',\n  styleUrls: [ './preview-upload.component.scss' ],\n  templateUrl: './preview-upload.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PreviewUploadComponent),\n      multi: true\n    }\n  ],\n  imports: [ ReactiveFileComponent, NgIf, NgStyle ]\n})\nexport class PreviewUploadComponent implements OnInit, ControlValueAccessor {\n  private serverService = inject(ServerService)\n\n  readonly inputLabel = input<string>(undefined)\n  readonly inputName = input<string>(undefined)\n  readonly previewWidth = input<string>(undefined)\n  readonly previewHeight = input<string>(undefined)\n\n  imageSrc: string\n  allowedExtensionsMessage = ''\n  maxSizeText: string\n\n  private serverConfig: HTMLServerConfig\n  private bytesPipe: BytesPipe\n  private file: Blob\n\n  constructor () {\n    this.bytesPipe = new BytesPipe()\n    this.maxSizeText = $localize`max size`\n  }\n\n  get videoImageExtensions () {\n    return this.serverConfig.video.image.extensions\n  }\n\n  get maxVideoImageSize () {\n    return this.serverConfig.video.image.size.max\n  }\n\n  get maxVideoImageSizeInBytes () {\n    return this.bytesPipe.transform(this.maxVideoImageSize)\n  }\n\n  getReactiveFileButtonTooltip () {\n    return $localize`(extensions: ${this.videoImageExtensions}, ${this.maxSizeText}\\: ${this.maxVideoImageSizeInBytes})`\n  }\n\n  ngOnInit () {\n    this.serverConfig = this.serverService.getHTMLConfig()\n\n    this.allowedExtensionsMessage = this.videoImageExtensions.join(', ')\n  }\n\n  onFileChanged (file: Blob) {\n    this.file = file\n\n    this.propagateChange(this.file)\n    this.updatePreview()\n  }\n\n  propagateChange = (_: any) => {\n    // empty\n  }\n\n  writeValue (file: any) {\n    this.file = file\n    this.updatePreview()\n  }\n\n  registerOnChange (fn: (_: any) => void) {\n    this.propagateChange = fn\n  }\n\n  registerOnTouched () {\n    // Unused\n  }\n\n  private updatePreview () {\n    if (this.file) {\n      imageToDataURL(this.file).then(result => this.imageSrc = result)\n    }\n  }\n}\n"]}