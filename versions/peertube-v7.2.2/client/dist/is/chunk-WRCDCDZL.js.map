{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵi18nStart","ɵɵlistener","$event","ɵɵrestoreView","_r2","ɵɵnextContext","instanceInformation_r3","ɵɵreference","ctx_r3","ɵɵresetView","onTermsClick","ɵɵelementEnd","ɵɵelement","ɵɵi18nEnd","rn","n","s","t","E","_r5","an","sn","ɵɵi18n","ln","ɵɵtext","ɵɵtemplate","LoginComponent_ng_container_3_my_alert_7_a_2_Template","u","ɵɵadvance","ɵɵtextInterpolate1","error","ɵɵproperty","_n","ɵɵtextInterpolate","formErrors","username","cn","ɵɵelementContainerStart","LoginComponent_ng_container_3_ng_container_11_div_6_Template","T","ɵɵpureFunction1","_c3","password","un","dn","mn","_r6","openForgotPasswordModal","LoginComponent_ng_container_3_div_14_ng_container_3_Template","signupAllowed","gn","$implicit","e","getAuthHref","auth_r7","ɵɵsanitizeUrl","authDisplayName","pn","LoginComponent_ng_container_3_div_15_a_4_Template","getExternalLogins","fn","LoginComponent_ng_container_3_Conditional_4_Template","LoginComponent_ng_container_3_Conditional_5_Template","LoginComponent_ng_container_3_my_alert_6_Template","LoginComponent_ng_container_3_my_alert_7_Template","_r1","login","LoginComponent_ng_container_3_ng_container_11_Template","LoginComponent_ng_container_3_div_12_Template","LoginComponent_ng_container_3_div_14_Template","LoginComponent_ng_container_3_div_15_Template","onInstanceAboutAccordionInit","ɵɵconditional","externalAuthError","form","otpStep","valid","hasExternalLogins","instanceInformationPanels","Cn","Nn","On","_r8","hideForgotPasswordModal","LoginComponent_ng_template_4_my_alert_6_Template","LoginComponent_ng_template_4_div_7_Template","ɵɵtwoWayListener","i0","ɵɵtwoWayBindingSet","forgotPasswordEmail","askResetPassword","x","isEmailDisabled","ɵɵtwoWayProperty","forgotPasswordEmailInput_r9","validity","LoginComponent","FormReactive","formReactiveService","inject","FormReactiveService","route","ActivatedRoute","modalService","NgbModal","authService","AuthService","userService","UserService","redirectService","RedirectService","notifier","Notifier","hooks","HooksService","storage","SessionStorageService","router","Router","forgotPasswordModal","viewChild","otpTokenInput","instanceAboutAccordion","accordion","isAuthenticatedWithExternalAuth","externalLogins","instanceBannerUrl","terms","administrators","features","moderation","codeOfConduct","openedForgotPasswordModal","serverConfig","signup","allowed","instanceName","instance","name","event","instanceInformation","preventDefault","expandTerms","scrollIntoView","behavior","email","enabled","ngOnInit","snapshot","buildForm","LOGIN_USERNAME_VALIDATOR","LOGIN_PASSWORD_VALIDATOR","VALIDATORS","MESSAGES","USER_OTP_TOKEN_VALIDATOR","data","queryParams","externalAuthToken","loadExternalAuthToken","previousUrl","getPreviousUrl","setItem","SESSION_STORAGE_REDIRECT_URL_KEY","ngAfterViewInit","runAction","plugin","registeredExternalAuths","length","auth","getExternalAuthHref","environment","apiUrl","options","value","otpToken","pipe","subscribe","next","redirectToPreviousRoute","err","handleError","message","success","open","close","token","redirectUrl","getItem","removeItem","navigateByUrl","redirectToLatestSessionRoute","isOTPMissingError","setTimeout","get","setValidators","focus","includes","$localize","body","code","ServerErrorCode","ACCOUNT_WAITING_FOR_APPROVAL","ACCOUNT_APPROVAL_REJECTED","__publicField","L","__ngFactoryType__","selectors","viewQuery","rf","ctx","y","a","Ze","en","nn","o","_e","re","decls","vars","consts","O","A","S","b","k","LoginComponent_ng_container_3_Template","LoginComponent_ng_template_4_Template","ɵɵtemplateRefExtractor","ɵɵi18nExp","le","dependencies","NgIf","RouterLink","FormsModule","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","NgModel","PluginSelectorDirective","ReactiveFormsModule","FormGroupDirective","FormControlName","AutofocusDirective","NgClass","InputTextComponent","NgFor","InstanceBannerComponent","InstanceAboutAccordionComponent","GlobalIconComponent","AlertComponent","styles","_LoginComponent","routes_default","path","component","meta","title","providers","ServerConfigResolver","resolve","Hn","default"],"ignoreList":[],"sources":["src/app/+login/login.component.html","src/app/+login/login.component.ts","src/app/+login/routes.ts"],"sourcesContent":["<div class=\"margin-content\">\n  <h1 class=\"title-page\" i18n>Login on {{ instanceName }}</h1>\n\n  <ng-container *ngIf=\"!externalAuthError && !isAuthenticatedWithExternalAuth\">\n\n    <my-alert type=\"primary\">\n      <h5 class=\"alert-heading\" i18n>\n        Logging into an account lets you publish content\n      </h5>\n\n      @if (signupAllowed) {\n        <p i18n>\n          This instance allows registration. However, be careful to check the <a class=\"link-primary terms-anchor d-inline\" (click)=\"onTermsClick($event, instanceInformation)\" href=\"/about/instance#terms\">Terms</a><a class=\"terms-link\" target=\"_blank\" routerLink=\"/about/instance\">Terms</a> before creating an account.\n          You may also search for another instance to match your exact needs at: <a class=\"link-primary\" href=\"https://joinpeertube.org/instances\" target=\"_blank\" rel=\"noopener noreferrer\">https://joinpeertube.org/instances</a>.\n        </p>\n      } @else {\n        <p i18n>\n          Currently this instance doesn't allow for user registration, you may check the <a class=\"link-primary terms-anchor d-inline\" (click)=\"onTermsClick($event, instanceInformation)\" href=\"/about/instance#terms\">Terms</a><a class=\"terms-link\" target=\"_blank\" routerLink=\"/about/instance\">Terms</a> for more details or find an instance that gives you the possibility to sign up for an account and upload your videos there.\n          Find yours among multiple instances at: <a class=\"link-primary\" href=\"https://joinpeertube.org/instances\" target=\"_blank\" rel=\"noopener noreferrer\">https://joinpeertube.org/instances</a>.\n        </p>\n      }\n    </my-alert>\n\n    <my-alert type=\"danger\" i18n *ngIf=\"externalAuthError\">\n      Sorry but there was an issue with the external login process. Please <a class=\"link-primary\" routerLink=\"/about\">contact an administrator</a>.\n    </my-alert>\n\n    <my-alert *ngIf=\"error\" type=\"danger\">\n      {{ error }}\n\n      <a *ngIf=\"error === 'User email is not verified.'\" class=\"ms-1 link-primary\" i18n routerLink=\"/verify-account/ask-send-email\">\n        Request new verification email\n      </a>\n    </my-alert>\n\n    <div class=\"wrapper\">\n      <div class=\"login-form-and-externals\">\n\n        <form class=\"w-100 m-0\" myPluginSelector pluginSelectorId=\"login-form\" (ngSubmit)=\"login()\" [formGroup]=\"form\">\n          <ng-container *ngIf=\"!otpStep\">\n            <div class=\"form-group\">\n              <div>\n                <label i18n for=\"username\">Username or email address</label>\n                <input\n                  type=\"text\" id=\"username\" i18n-placeholder placeholder=\"Example: john@example.com\" required\n                  formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'input-error': formErrors['username'] }\" myAutofocus\n                  autocomplete=\"username\"\n                >\n              </div>\n\n              <div *ngIf=\"formErrors.username\" class=\"form-error\" role=\"alert\">{{ formErrors.username }}</div>\n            </div>\n\n            <div class=\"form-group\">\n              <label i18n for=\"password\">Password</label>\n\n              <my-input-text\n                formControlName=\"password\" inputId=\"password\" i18n-placeholder placeholder=\"Password\"\n                [formError]=\"formErrors['password']\" autocomplete=\"current-password\"\n              ></my-input-text>\n            </div>\n          </ng-container>\n\n          <div *ngIf=\"otpStep\" class=\"form-group\">\n            <p i18n>Enter the two-factor code generated by your phone app:</p>\n\n            <label i18n for=\"otp-token\">Two factor authentication token</label>\n\n            <my-input-text\n              #otpTokenInput\n              [show]=\"true\" formControlName=\"otp-token\" inputId=\"otp-token\"\n              [formError]=\"formErrors['otp-token']\" autocomplete=\"otp-token\"\n            ></my-input-text>\n          </div>\n\n          <input type=\"submit\" class=\"peertube-button primary-button w-100\" i18n-value value=\"Login\" [disabled]=\"!form.valid\">\n\n          <div *ngIf=\"!otpStep\" class=\"additional-links d-flex justify-content-center mt-4 mb-5 text-center\">\n            <button type=\"button\" i18n class=\"button-unstyle link-primary mx-3\" (click)=\"openForgotPasswordModal()\" i18n-title title=\"Click here to reset your password\">\n              I forgot my password\n            </button>\n\n            <ng-container *ngIf=\"signupAllowed\">\n              <span class=\"lh-1\">·</span>\n              <a i18n routerLink=\"/signup\" class=\"link-primary mx-3\">Create an account</a>\n            </ng-container>\n          </div>\n        </form>\n\n        <div class=\"external-login-blocks\" *ngIf=\"hasExternalLogins()\">\n          <div class=\"fw-semibold\" i18n>Or sign in with</div>\n\n          <div>\n            <a class=\"external-login-block\" *ngFor=\"let auth of getExternalLogins()\" [href]=\"getAuthHref(auth)\" role=\"button\">\n              {{ auth.authDisplayName }}\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div #instanceInformation class=\"instance-information\">\n        <my-instance-banner rounded=\"true\"></my-instance-banner>\n\n        <my-instance-about-accordion\n          #instanceAboutAccordion\n          [displayInstanceName]=\"false\"\n          (init)=\"onInstanceAboutAccordionInit($event)\" [panels]=\"instanceInformationPanels\"\n          pluginScope=\"login\" pluginHook=\"filter:login.instance-about-plugin-panels.create.result\"\n        ></my-instance-about-accordion>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #forgotPasswordModal>\n  <div class=\"modal-header\">\n    <h4 i18n class=\"modal-title\">Forgot your password</h4>\n\n    <button type=\"button\" class=\"border-0 p-0\" title=\"Close this modal\" i18n-title (click)=\"hideForgotPasswordModal()\">\n      <my-global-icon iconName=\"cross\"></my-global-icon>\n    </button>\n  </div>\n\n  <div class=\"modal-body text-start\">\n\n    <my-alert *ngIf=\"isEmailDisabled()\" type=\"danger\" i18n>\n      We are sorry, you cannot recover your password because your instance administrator did not configure the PeerTube email system.\n    </my-alert>\n\n    <div *ngIf=\"!isEmailDisabled()\" class=\"mb-4\" i18n>\n      Enter your email address and we will send you a link to reset your password.\n    </div>\n\n    <div class=\"form-group\" [hidden]=\"isEmailDisabled()\">\n      <label i18n for=\"forgot-password-email\">Email</label>\n      <input\n        type=\"email\" id=\"forgot-password-email\" i18n-placeholder placeholder=\"Email address\" required\n        [(ngModel)]=\"forgotPasswordEmail\" #forgotPasswordEmailInput\n      >\n    </div>\n  </div>\n\n  <div class=\"modal-footer inputs\">\n    <input\n      type=\"button\" role=\"button\" i18n-value value=\"Cancel\" class=\"peertube-button secondary-button d-none d-sm-block\"\n      (click)=\"hideForgotPasswordModal()\" (key.enter)=\"hideForgotPasswordModal()\"\n    >\n\n    <input\n      type=\"submit\" i18n-value=\"Password reset button\" value=\"Reset\" class=\"peertube-button primary-button\"\n      (click)=\"askResetPassword()\" [disabled]=\"!forgotPasswordEmailInput.validity.valid\"\n    >\n  </div>\n</ng-template>\n","import { NgClass, NgFor, NgIf } from '@angular/common'\nimport { AfterViewInit, Component, ElementRef, OnInit, inject, viewChild } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router'\nimport { AuthService, Notifier, RedirectService, SessionStorageService, UserService } from '@app/core'\nimport { HooksService } from '@app/core/plugins/hooks.service'\nimport { LOGIN_PASSWORD_VALIDATOR, LOGIN_USERNAME_VALIDATOR } from '@app/shared/form-validators/login-validators'\nimport { USER_OTP_TOKEN_VALIDATOR } from '@app/shared/form-validators/user-validators'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { InputTextComponent } from '@app/shared/shared-forms/input-text.component'\nimport { InstanceAboutAccordionComponent } from '@app/shared/shared-instance/instance-about-accordion.component'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { NgbAccordionDirective, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { getExternalAuthHref } from '@peertube/peertube-core-utils'\nimport { RegisteredExternalAuthConfig, ServerConfig, ServerErrorCode } from '@peertube/peertube-models'\nimport { environment } from 'src/environments/environment'\nimport { GlobalIconComponent } from '../shared/shared-icons/global-icon.component'\nimport { InstanceBannerComponent } from '../shared/shared-instance/instance-banner.component'\nimport { AutofocusDirective } from '../shared/shared-main/common/autofocus.directive'\nimport { PluginSelectorDirective } from '../shared/shared-main/plugins/plugin-selector.directive'\n\n@Component({\n  selector: 'my-login',\n  templateUrl: './login.component.html',\n  styleUrls: [ './login.component.scss' ],\n  imports: [\n    NgIf,\n    RouterLink,\n    FormsModule,\n    PluginSelectorDirective,\n    ReactiveFormsModule,\n    AutofocusDirective,\n    NgClass,\n    InputTextComponent,\n    NgFor,\n    InstanceBannerComponent,\n    InstanceAboutAccordionComponent,\n    GlobalIconComponent,\n    AlertComponent\n  ]\n})\nexport class LoginComponent extends FormReactive implements OnInit, AfterViewInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private route = inject(ActivatedRoute)\n  private modalService = inject(NgbModal)\n  private authService = inject(AuthService)\n  private userService = inject(UserService)\n  private redirectService = inject(RedirectService)\n  private notifier = inject(Notifier)\n  private hooks = inject(HooksService)\n  private storage = inject(SessionStorageService)\n  private router = inject(Router)\n\n  private static SESSION_STORAGE_REDIRECT_URL_KEY = 'login-previous-url'\n\n  readonly forgotPasswordModal = viewChild<ElementRef>('forgotPasswordModal')\n  readonly otpTokenInput = viewChild<InputTextComponent>('otpTokenInput')\n  readonly instanceAboutAccordion = viewChild<InstanceAboutAccordionComponent>('instanceAboutAccordion')\n\n  accordion: NgbAccordionDirective\n  error: string = null\n  forgotPasswordEmail = ''\n\n  isAuthenticatedWithExternalAuth = false\n  externalAuthError = false\n  externalLogins: string[] = []\n\n  instanceBannerUrl: string\n\n  instanceInformationPanels = {\n    terms: true,\n    administrators: false,\n    features: false,\n    moderation: false,\n    codeOfConduct: false\n  }\n\n  otpStep = false\n\n  private openedForgotPasswordModal: NgbModalRef\n  private serverConfig: ServerConfig\n\n  get signupAllowed () {\n    return this.serverConfig.signup.allowed === true\n  }\n\n  get instanceName () {\n    return this.serverConfig.instance.name\n  }\n\n  onTermsClick (event: Event, instanceInformation: HTMLElement) {\n    event.preventDefault()\n\n    const instanceAboutAccordion = this.instanceAboutAccordion()\n    if (instanceAboutAccordion) {\n      instanceAboutAccordion.expandTerms()\n      instanceInformation.scrollIntoView({ behavior: 'smooth' })\n    }\n  }\n\n  isEmailDisabled () {\n    return this.serverConfig.email.enabled === false\n  }\n\n  ngOnInit () {\n    const snapshot = this.route.snapshot\n\n    // Avoid undefined errors when accessing form error properties\n    this.buildForm({\n      'username': LOGIN_USERNAME_VALIDATOR,\n      'password': LOGIN_PASSWORD_VALIDATOR,\n      'otp-token': {\n        VALIDATORS: [], // Will be set dynamically\n        MESSAGES: USER_OTP_TOKEN_VALIDATOR.MESSAGES\n      }\n    })\n\n    this.serverConfig = snapshot.data.serverConfig\n\n    if (snapshot.queryParams.externalAuthToken) {\n      this.loadExternalAuthToken(snapshot.queryParams.username, snapshot.queryParams.externalAuthToken)\n      return\n    }\n\n    if (snapshot.queryParams.externalAuthError) {\n      this.externalAuthError = true\n      return\n    }\n\n    const previousUrl = this.redirectService.getPreviousUrl()\n    if (previousUrl && previousUrl !== '/') {\n      this.storage.setItem(LoginComponent.SESSION_STORAGE_REDIRECT_URL_KEY, previousUrl)\n    }\n  }\n\n  ngAfterViewInit () {\n    this.hooks.runAction('action:login.init', 'login')\n  }\n\n  getExternalLogins () {\n    return this.serverConfig.plugin.registeredExternalAuths\n  }\n\n  hasExternalLogins () {\n    return this.getExternalLogins().length !== 0\n  }\n\n  getAuthHref (auth: RegisteredExternalAuthConfig) {\n    return getExternalAuthHref(environment.apiUrl, auth)\n  }\n\n  login () {\n    this.error = null\n\n    const options = {\n      username: this.form.value['username'],\n      password: this.form.value['password'],\n      otpToken: this.form.value['otp-token']\n    }\n\n    this.authService.login(options)\n      .pipe()\n      .subscribe({\n        next: () => this.redirectService.redirectToPreviousRoute(),\n\n        error: err => {\n          this.handleError(err)\n        }\n      })\n  }\n\n  askResetPassword () {\n    this.userService.askResetPassword(this.forgotPasswordEmail)\n      .subscribe({\n        next: () => {\n          const message = $localize`An email with the reset password instructions will be sent to ${this.forgotPasswordEmail}.\nThe link will expire within 1 hour.`\n\n          this.notifier.success(message)\n          this.hideForgotPasswordModal()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  openForgotPasswordModal () {\n    this.openedForgotPasswordModal = this.modalService.open(this.forgotPasswordModal())\n  }\n\n  hideForgotPasswordModal () {\n    this.openedForgotPasswordModal.close()\n  }\n\n  onInstanceAboutAccordionInit (instanceAboutAccordion: InstanceAboutAccordionComponent) {\n    this.accordion = instanceAboutAccordion.accordion()\n  }\n\n  private loadExternalAuthToken (username: string, token: string) {\n    this.isAuthenticatedWithExternalAuth = true\n\n    this.authService.login({ username, password: null, token })\n      .subscribe({\n        next: () => {\n          const redirectUrl = this.storage.getItem(LoginComponent.SESSION_STORAGE_REDIRECT_URL_KEY)\n          if (redirectUrl) {\n            this.storage.removeItem(LoginComponent.SESSION_STORAGE_REDIRECT_URL_KEY)\n            return this.router.navigateByUrl(redirectUrl)\n          }\n\n          this.redirectService.redirectToLatestSessionRoute()\n        },\n\n        error: err => {\n          this.handleError(err)\n          this.isAuthenticatedWithExternalAuth = false\n        }\n      })\n  }\n\n  private handleError (err: any) {\n    if (this.authService.isOTPMissingError(err)) {\n      this.otpStep = true\n\n      setTimeout(() => {\n        this.form.get('otp-token').setValidators(USER_OTP_TOKEN_VALIDATOR.VALIDATORS)\n        this.otpTokenInput().focus()\n      })\n\n      return\n    }\n\n    if (err.message.includes('credentials are invalid')) {\n      this.error = $localize`Incorrect username or password.`\n      return\n    }\n\n    if (err.message.includes('blocked')) {\n      this.error = $localize`Your account is blocked.`\n      return\n    }\n\n    if (err.body?.code === ServerErrorCode.ACCOUNT_WAITING_FOR_APPROVAL) {\n      this.error = $localize`This account is awaiting approval by moderators.`\n      return\n    }\n\n    if (err.body?.code === ServerErrorCode.ACCOUNT_APPROVAL_REJECTED) {\n      this.error = $localize`Registration approval has been rejected for this account.`\n      return\n    }\n\n    this.error = err.message\n  }\n}\n","import { Routes } from '@angular/router'\nimport { ServerConfigResolver } from '@app/core/routing/server-config-resolver.service'\nimport { LoginComponent } from './login.component'\n\nexport default [\n  {\n    path: '',\n    component: LoginComponent,\n    data: {\n      meta: {\n        title: $localize`Login`\n      }\n    },\n    providers: [ ServerConfigResolver ],\n    resolve: {\n      serverConfig: ServerConfigResolver\n    }\n  }\n] satisfies Routes\n"]}