{"version":3,"mappings":"gsEAIEA,EAAA,YAAAC,EAAA,KAA4GC,EAAA,aAAAC,GAAAC,CAAA,CAAAC,CAAA,KAAAD,CAAA,KAuBpGJ,EAAA,aAAAC,EAAA,KAEAC,EAAA,GAAAE,CAAA,QAAAE,CAAA,CAAAC,CAAA,GAAAC,SAAA,CAAAC,CAAA,CAAAF,CAAA,GADGG,EAAA,EAAAC,EAAAC,EAAAC,iBAAAC,CAAA,GAA8BF,EAAAC,iBAAAC,CAAA,GAAAC,CAAA,eAAAC,GAAAZ,CAAA,CAAAC,CAAA,EAAAD,CAAA,KAajCJ,EAAA,YAAAC,EAAA,KAAsHC,EAAA,aAAAe,GAAAb,CAAA,CAAAC,CAAA,KAAAD,CAAA,IAEtHc,EAAA,2BAAAd,CAAA,QAAAE,CAAA,CAAAD,CAAA,CAAAG,SAAA,CAAAC,CAAA,CAAAF,CAAA,IAEEY,EAAA,QAAAC,CAAA,EAAe,OAAAR,EAAAS,aAAA,EAAuB,0BAA6B,iBAAAT,EAAAU,uBAAA,aAAAC,GAAAnB,CAAA,CAAAC,CAAA,KAAAD,CAAA,KAGrEJ,EAAA,YAA2E,UACzEC,EAAA,KAAiGC,EAAA,EAAI,GAAAE,CAAA,QAAAE,CAAA,CAAAC,CAAA,GAAAC,SAAA,CAAAC,CAAA,CAAAF,CAAA,GAAxEG,EAAA,EAAAS,EAAA,aAAAP,EAAAY,oBAAAV,CAAA,cAAAW,GAAArB,CAAA,CAAAC,CAAA,KAAAD,CAAA,KA1CrCJ,EAAA,YAAgE,YAG5DkB,EAAA,wBAQAlB,EAAA,WAAkC,UAE9B0B,EAAA,GACFxB,EAAA,EAAI,EAGNF,EAAA,YAA4B,YAC1BC,EAAA,KAA8JC,EAAA,EAE9JyB,EAAA,EAAAC,GAAA,eAGF1B,EAAA,EAEAgB,EAAA,aACFhB,EAAA,EAEAgB,EAAA,6BAEAlB,EAAA,WAAAC,EAAA,MAA0IC,EAAA,EAE1IF,EAAA,aAAwC,aAEpC2B,EAAA,GAAAE,GAAA,cAAiF,GAAAC,GAAA,6BAKhF,GAAAC,GAAA,cAKH7B,EAAA,EAAM,EACF,GAAAE,CAAA,QAAAE,CAAA,CAAAD,CAAA,CAAAG,SAAA,CAAAC,CAAA,CAAAF,CAAA,GAzCFG,EAAA,GAAAS,EAAA,QAAAL,CAAA,EAAsB,eAAAF,EAAAY,oBAAAV,CAAA,GAQUJ,EAAA,GAAAS,EAAA,aAAAP,EAAAY,oBAAAV,CAAA,GAC9BJ,EAAA,EAAAsB,EAAA,IAAAlB,EAAAmB,YAAA,KAK2BvB,EAAA,GAAAC,EAAAG,EAAAoB,cAAA,EAA2BpB,EAAAoB,cAAA,EAAAnB,CAAA,IAE5BL,EAAA,EAAAS,EAAA,OAAAP,EAAAC,iBAAAC,CAAA,IAAAqB,MAAA,EAKAzB,EAAA,EAAAS,EAAA,YAAAP,EAAAwB,sBAAAtB,CAAA,EAAAuB,CAAA,EAGX3B,EAAA,EAAAS,EAAA,gBAAAmB,EAAA,GAAAC,GAAAzB,CAAA,GAEmDJ,EAAA,EAAAS,EAAA,aAAAP,EAAAY,oBAAAV,CAAA,GAI/BJ,EAAA,GAAAS,EAAA,OAAAP,EAAAC,iBAAAC,CAAA,OAGjBJ,EAAA,EAAAS,EAAA,UAAAP,EAAA4B,YAAA1B,CAAA,GAIdJ,EAAA,EAAAS,EAAA,OAAAP,EAAAC,iBAAAC,CAAA,KCvBV,GAAO2B,GAAP,KAAOA,EAA6B,CAChCC,eAAiBC,EAAOC,CAAc,EACtCC,oBAAsBF,EAAOG,CAAmB,EAChDC,aAAeJ,EAAOK,CAAY,EAClCC,SAAWN,EAAOO,CAAe,EACjCC,YAAcR,EAAOS,CAAW,EAExCC,QACAC,cAAgC,GAEhCC,OAA+D,GAE/DC,wBAAoD,GAEpDC,kBAAyC,CACvCC,YAAa,EACbC,aAAc,EACdC,WAAY,MAGdC,iBAAwC,CACtCH,YAAa,EACbC,aAAc,EACdC,WAAY,MAEdE,WAA6B,eAE7BC,qBAAuB,GAAIC,MAE3B3C,cACA4C,WACA3C,wBAAmD,CACjD4C,KAAM,GACNC,MAAO,GACPC,GAAI,GACJC,OAAQ,GACRC,aAAc,IAGRC,WAERC,UAAQ,CAEN,KAAKD,WAAa,KAAK7B,eAAe+B,cACnCC,UAAUrB,GAAU,CACnB,KAAKA,QAAUA,EACf,KAAKC,cAAgB,GAErB,KAAKqB,iBAAgB,CACvB,EAAC,EAEH,KAAKxB,YAAYyB,yBAAwB,EACtCF,UAAUG,GAAO,CAChB,KAAKxD,cAAgBwD,EAErB,KAAKZ,WAAaY,EAAKZ,UACzB,EAAC,CACL,EAEAa,aAAW,CACL,KAAKP,YAAY,KAAKA,WAAWQ,YAAW,CAClD,EAEAJ,kBAAgB,CACd,GAAMK,GAAU,CACd3B,QAAS,KAAKA,QACd4B,oBAAqB,KAAKxB,kBAC1ByB,KAAM,cAGR,KAAKrC,oBAAoBsC,yBAAyBH,CAAO,EACtDI,KACCC,EAAIC,GAAM,CACR,KAAK7B,kBAAkBG,WAAa0B,EAAIC,KAC1C,EAAC,EACDC,EAAUF,GAAOG,GAAKH,EAAII,IAAI,CAAC,EAC/BC,GAAUC,GAAe,CACvB,GAAMZ,GAAU,CACdY,eACAC,gBAAiB,KAAKhC,iBACtBqB,KAAM,KAAKpB,WACXgC,KAAM,KAAK/C,aAAagD,kBAAkB,KAAK9B,UAAU,GAG3D,MAAO,MAAKlB,aAAaiD,kBAAkBhB,CAAO,EAC/CI,KAAKa,EAAIP,IAAS,CAAEE,eAAcrC,OAAQmC,EAAKA,KAAMH,MAAOG,EAAKH,KAAK,EAAG,CAAC,CAC/E,EAAC,CAAC,EAEHb,UAAiBwB,GAAmCC,EAAA,MAAnCD,GAAmC,UAAnC,CAAEN,eAAcrC,SAAQgC,OAAK,EAAM,CACnD,KAAK/B,wBAAwBoC,EAAaQ,EAAE,EAAI,KAAM,MAAKnD,SAASoD,mBAAmB,CACrFpD,SAAU2C,EAAaU,YACvBC,UAAW,GACXC,SAAU,GACX,EAED,KAAKlD,cAAcmD,KAAKb,CAAY,EAEpC,KAAKrC,OAAOqC,EAAaQ,EAAE,EAAI,CAAE7C,SAAQgC,OAAK,EAE9C,KAAKxB,qBAAqB2C,KAAK,CAAEd,CAAY,CAAE,CACjD,GAAC,CACL,EAEApD,YAAaoD,EAA0B,CACrC,GAAMe,GAAM,KAAKpD,OAAOqC,EAAaQ,EAAE,EACvC,MAAKO,GAEEA,EAAIpD,OAFM,EAGnB,EAEA1C,iBAAkB+E,EAA0B,CAC1C,GAAMe,GAAM,KAAKpD,OAAOqC,EAAaQ,EAAE,EACvC,GAAKO,EAEL,MAAOA,GAAIpB,KACb,EAEAnD,sBAAuBwD,EAA0B,CAC/C,MAAO,MAAKpC,wBAAwBoC,EAAaQ,EAAE,CACrD,EAEAQ,gBAAc,CACPC,GAAa,KAAKpD,iBAAiB,IAExC,KAAKA,kBAAkBC,aAAe,EAEtC,KAAKiB,iBAAgB,EACvB,EAGAnD,oBAAqBoE,EAA0B,CAC7C,MAAO,CAAE,KAAMA,EAAakB,YAAY,CAC1C,IAAAC,CAAA,CApIWtE,4CAA6B,IAAAsE,CAAA,CAA7BtE,wBAA6BuE,UAAA,gCAAAC,MAAA,EAAAC,KAAA,EAAAC,WAAA,IAAAC,4BDzBTC,2DAIyCA,gDAUzDA,gDAK4FA,sHAMvEA,+GAYyFA,iHATnHA,0FAAAC,CAAyH,kBAAAC,CAAA,CAAAA,CAAA,oDAa1CF,yCAQDA,ugCAjD1FrH,EAAA,UAAAC,EAAA,KAA+CC,EAAA,EAE/CF,EAAA,WAEE2B,EAAA,EAAA6F,GAAA,aAEAxH,EAAA,YAAyCyH,EAAA,gCAAgBC,GAAAd,eAAA,CAAgB,IACvEjF,EAAA,EAAAgG,GAAA,gBA+CFzH,EAAA,EAAM,GAAAI,CAAA,KAlDwBI,EAAA,GAAAS,EAAA,OAAAuG,EAAAjE,kBAAAG,aAAA,GAE6ClD,EAAA,EAAAS,EAAA,iBAAAuG,EAAA3D,qBAAA6D,aAAA,GAC3BlH,EAAA,EAAAS,EAAA,UAAAuG,EAAApE,aAAA,KAAAuE,YAAA,ECgBrCC,EAAMC,GAA2BC,GAAOC,EAAsBC,EAAYC,GAA0BC,EAAuB,EAAAC,OAAA;0EAAA,KAElI,GAAO5F,GAAP6F,EAkIJC,GAAA,CADCC,GAAa,CAAE,EAAA/F,EAAAgG,SAAA,iCAAAC,EAAA,yBAAAC,GAAAvI,CAAA,CAAAC,CAAA,KAAAD,CAAA,ICxJlBc,EAAA,wBAAAd,CAAA,QAAAE,CAAA,CAAAC,CAAA,GAKEY,EAAA,8BAAAyH,EAAAC,2BAAA,EAA2D,8BAAAD,EAAAE,2BAAA,EACA,cAAAF,EAAAG,WAAA,EAEhC,eAAAH,EAAAI,aAAA,GAGI,WAAAJ,EAAAK,QAAA,ICGjC,GAAaC,KAAsB,KAA7B,GAAOA,GAAP,KAAOA,EAAsB,CACzBC,cAAgBxG,EAAOyG,CAAa,EACpC1G,eAAiBC,EAAOC,CAAc,EACtCG,aAAeJ,EAAOK,CAAY,EAEjCqG,WAAaC,EAA+B,YAAY,EAEjET,4BAA8B,KAAKU,oBAAoBC,KAAK,IAAI,EAChEV,4BAA8B,KAAKW,oBAAoBD,KAAK,IAAI,EAEhET,YAAc,eAEd1F,QACA4F,SAAW,GAEHS,cAAgB,GAEhBnF,WAERC,UAAQ,CAEN,KAAKD,WAAa,KAAK7B,eAAe+B,cACnCC,UAAUrB,GAAU,CACfA,EAAQ+C,KAAO,KAAK/C,SAAS+C,KAEjC,KAAK/C,QAAUA,EACX,KAAKqG,eAAe,KAAKL,WAAU,EAAGM,aAAY,EAEtD,KAAKD,cAAgB,GACvB,EAAC,CACL,EAEA5E,aAAW,CACL,KAAKP,YAAY,KAAKA,WAAWQ,YAAW,CAClD,EAEAwE,oBAAqBK,EAAsCC,EAAqB,CAC9E,GAAM7E,GAAU8E,GAAAC,GAAA,GACXF,EAAQG,kBAAiB,GADd,CAGdnE,gBAAiB+D,EACjBvG,QAAS,KAAKA,QACd4G,UAAW,KAGb,MAAO,MAAKlH,aAAamH,kBAAkBlF,CAAO,CACpD,EAEAyE,qBAAmB,CACjB,MAAO,MAAK1G,aAAaoH,mBAAmB,KAAK9G,QAAQ+C,EAAE,CAC7D,EAEA4C,cAAY,CACV,MAAO,MAAKG,cAAciB,eAAc,CAC1C,EAEAC,iBAAe,CACb,KAAKpB,SAAW,EAClB,EAEAqB,iBAAe,CACb,KAAKrB,SAAW,EAClB,IAAAlC,CAAA,CA9DWmC,4CAAsB,IAAAnC,CAAA,CAAtBmC,wBAAsBlC,UAAA,wBAAAuD,UAAA,QAAAA,CAAAC,EAAA9C,EAAA,CAAA8C,EAAA,GAAAC,CAAA,CAAAC,CAAA,CAAArB,UAAA,CAAAX,EAAA,IAAAiC,CAAA,IAAAC,CAAA,KAAA3D,KAAA,GAAAC,IAAA,GAAAC,MAAA,CAAAA,CAAA,QAAA1G,CAAA,QAAAA,CAAA,eDhBF4G,2fAAjCrH,EAAA,UAAAC,EAAA,KAAuCC,EAAA,EAEvCyB,EAAA,EAAAkJ,GAAA,yBAAAF,CAAA,KAGGjK,EAAA,GAAAS,EAAA,OAAAuG,EAAArE,OAAA,KAAAwE,YAAA,ECSUC,EAAMgD,EAAmB,EAAAC,cAAA,KAEhC,GAAO7B,GAAP8B,QAAO9B,EAAsB,UAAA+B,EAAA,kBAAAC,GAAA9K,CAAA,CAAAC,CAAA,KAAAD,CAAA,QAAAE,CAAA,CAAA6K,CAAA,GCAjCnL,EAAA,cAAqHyH,EAAA,mBAAA2D,EAAAC,CAAA,KAAAC,GAAAC,EAAA,QAAAC,GAASF,EAAAG,UAAA,CAAW,KACvIvK,EAAA,sBACFhB,EAAA,ICPF,GAAawL,KAA0B,KAAjC,GAAOA,GAAP,KAAOA,EAA0B,CAC5BC,MAAQrC,EAAsB,KAAK,EAEnCsC,aAAeD,EAAM,EAAE,EACvBE,KAAOF,EAAM,QAAQ,EACrBG,YAAcH,SAAuB,EACrCI,UAAYJ,SAAuB,EACnCK,WAAaL,EAAM,EAAI,EAEvBM,cAAgBC,GAAM,EACtBC,oBAAsBD,GAAM,EAErCE,WAAa,GACbC,MAAQ,GACRC,WAEA9H,UAAQ,CACN,KAAK6H,MAAQ,KAAKT,aAAY,EAE1B,KAAKW,aAAY,GAAI,KAAKC,UAAU,EAAK,CAC/C,EAEAD,cAAY,CACV,MAAI,MAAKP,WAAU,EAAW,GAEvB,KAAKM,UACd,EAEAG,aAAW,CACT,GAAI,CAAC,KAAKF,aAAY,EAAI,CACxB,KAAKC,UAAS,EACd,OACF,CAEA,KAAKE,WAAU,CACjB,EAEAF,UAAWG,EAAQ,GAAI,CACrB,KAAKL,WAAa,GAClB,KAAKH,oBAAoBS,KAAK,KAAKN,UAAU,EAEzCK,GACFE,WAAW,IAAM,KAAKlB,MAAK,EAAGmB,cAAcH,MAAK,CAAE,CAEvD,EAEAlB,WAAS,CACP,KAAKa,WAAa,GAEd,KAAKC,aAAY,IAAO,IAC1B,KAAKJ,oBAAoBS,KAAK,KAAKN,UAAU,CAEjD,EAEAS,WAAS,CACH,KAAKV,OAET,KAAKZ,UAAS,CAChB,EAEAiB,YAAU,CACJ,KAAKN,aAAe,KAAKC,QAE7B,KAAKD,WAAa,KAAKC,MACvB,KAAKJ,cAAcW,KAAK,KAAKP,KAAK,EACpC,EAEAW,eAAa,CACX,KAAKX,MAAQ,GACb,KAAKV,MAAK,EAAGmB,cAAcH,MAAK,EAEhC,KAAKD,WAAU,CACjB,IAAA3F,CAAA,CAxEW2E,4CAA0B,IAAA3E,CAAA,CAA1B2E,wBAA0B1E,UAAA,6BAAAuD,UAAA,QAAAA,CAAAC,EAAA9C,EAAA,CAAA8C,EAAA,GAAAC,CAAA,CAAAC,CAAA,CAAAiB,KAAA,CAAAV,EAAA,IAAAN,CAAA,IAAAC,CAAA,KAAAqC,MAAA,EAAArB,YAAA,oBAAAC,IAAA,YAAAC,WAAA,mBAAAC,SAAA,iBAAAC,UAAA,mBAAAkB,OAAA,EAAAjB,aAAA,iBAAAE,mBAAA,wBAAAlF,KAAA,GAAAC,IAAA,GAAAC,MAAA,CAAAA,CAAA,QAAA1G,CAAA,CAAAA,CAAA,iBDJoB4G,2BAS8CA,ufAhBzGrH,EAAA,WAAkB,WAC0C,eAGtDmN,GAAA,yBAAAC,EAAA,CAAAC,MAAAjC,GAAAkC,CAAA,EAAAC,GAAA7F,EAAA2E,MAAAe,CAAA,IAAA1F,EAAA2E,MAAAe,GAAA5B,EAAA4B,CAAA,KAAoB3F,EAAA,yBAAA4F,MAAAjC,GAAAkC,CAAA,EAAA9B,EAAe9D,EAAAgF,WAAA,CAAY,KAFjDxM,EAAA,EAKAF,EAAA,cAAgFyH,EAAA,mBAAA4F,MAAAjC,GAAAkC,CAAA,EAAA9B,EAAS9D,EAAAsF,cAAA,CAAe,KACtG9L,EAAA,sBACFhB,EAAA,EAAS,EAGXF,EAAA,cAAiEyH,EAAA,mBAAA4F,MAAAjC,GAAAkC,CAAA,EAAA9B,EAAS9D,EAAA+E,YAAA,CAAa,KACrFvL,EAAA,sBACFhB,EAAA,EAEAyB,EAAA,EAAA6L,GAAA,gBAGFtN,EAAA,GAAAyK,CAAA,KAlBqCjK,EAAA,EAAAS,EAAA,UAAAuG,EAAA4E,UAAA,EAG/B5L,EAAA,EAAA+M,GAAA,UAAA/F,EAAA2E,KAAA,EAAiDlL,EAAA,OAAAuG,EAAAmE,KAAA,GAAe,cAAAnE,EAAAoE,YAAA,GAQzBpL,EAAA,GAAAS,EAAA,QAAAuG,EAAAqE,UAAA,GAIlCrL,EAAA,GAAAS,EAAA,QAAAuG,EAAAsE,WAAA,GAAAtE,EAAA4E,UAAA,KAAAzE,YAAA,ECPE6F,GAAWC,GAAAC,GAAAC,GAAEC,GAAqBhG,CAAI,EAAAO,OAAA;uEAAA,KAE7C,GAAOqD,GAAPqC,QAAOrC,EAA0B,UAAAsC,EAAA,wBAAAC,EAAA,CAAA7N,CAAA,IAAA8N,QAAA,CAAA9N,CAAA,YAAA+N,GAAA/N,CAAA,CAAAC,CAAA,KAAAD,CAAA,KCSzBJ,EAAA,aAAAC,EAAA,KAAkIC,EAAA,GAAAE,CAAA,QAAAE,CAAA,CAAAC,CAAA,IAAlFY,EAAA,aAAAP,EAAAwN,YAAAC,aAAA,aAAAC,GAAAlO,CAAA,CAAAC,CAAA,KAAAD,CAAA,KAiBhDJ,EAAA,aAAAC,EAAA,KAEAC,EAAA,GAAAE,CAAA,QAAAE,CAAA,CAAAC,CAAA,IADGG,EAAA,EAAAC,EAAAC,EAAA2N,kBAAA,EAAkB3N,EAAA2N,kBAAA,EAAAxN,CAAA,eAAAyN,GAAApO,CAAA,CAAAC,CAAA,KAAAD,CAAA,QAAAE,CAAA,CAAA6K,CAAA,GAY/BnL,EAAA,eACEyH,EAAA,mBAAA2D,EAAAqD,CAAA,KAAA7N,GAAA2K,EAAA,SAAAC,GAAA5K,EAAA8N,2BAAA,CAAA9N,EAAA8N,0BAAA,KADFzO,EAAA,KAKAC,EAAA,aAAAyO,GAAAvO,CAAA,CAAAC,CAAA,EAAAD,CAAA,KAGEJ,EAAA,UAAAC,EAAA,KAEAC,EAAA,aAAA0O,GAAAxO,CAAA,CAAAC,CAAA,KAAAD,CAAA,IAEAc,EAAA,4BAAAd,CAAA,QAAAE,CAAA,CAAAC,CAAA,IAAmEY,EAAA,UAAAP,EAAAyC,OAAA,EAAmB,gBAAAzC,EAAA0C,aAAA,aAAAuL,GAAAzO,CAAA,CAAAC,CAAA,KAAAD,CAAA,KAMtFJ,EAAA,UAAmF0B,EAAA,GAAgBxB,EAAA,GAAAE,CAAA,QAAAE,CAAA,CAAAD,CAAA,CAAAyO,IAAA,CAAhG3N,EAAA,aAAA4N,EAAAC,UAAA,EAAgFtO,EAAA,EAAAuO,GAAAF,EAAAG,KAAA,aAAAC,GAAA/O,CAAA,CAAAC,CAAA,KAAAD,CAAA,QAAAE,CAAA,CAAA6K,CAAA,GApEzFnL,EAAA,YAAkC,YAC2B,YAGvDkB,EAAA,wBAEAlB,EAAA,SAAK,YACHC,EAAA,KAAuCC,EAAA,EAEvCF,EAAA,YAAwB,SACjB,YACgD,SAC7C0B,EAAA,IAAyBxB,EAAA,EAE7BF,EAAA,qCAGEyH,EAAA,yBAAA2D,EAAAkC,CAAA,KAAA1M,GAAA2K,EAAA,QAAAC,GAAe5K,EAAAwO,cAAA,CAAe,KAAC,yBAAAhE,EAAAkC,CAAA,KAAA1M,GAAA2K,EAAA,QAAAC,GAAgB5K,EAAAyO,cAAA,CAAe,KAC/DnP,EAAA,EAEDyB,EAAA,GAAA2N,GAAA,eAEApO,EAAA,iCACFhB,EAAA,EAEAF,EAAA,aAA0B,WAClB0B,EAAA,IAA+BxB,EAAA,EAErCgB,EAAA,wBAIFhB,EAAA,EAEAF,EAAA,aAA4B,WAC1BC,EAAA,MAA+IC,EAAA,EAE/IyB,EAAA,GAAA4N,GAAA,eAGFrP,EAAA,EAAM,EACF,EACF,EACF,EAGRF,EAAA,aACEkB,EAAA,aACFhB,EAAA,EAEAyB,EAAA,GAAA6N,GAAA,iBAOAxP,EAAA,aACE2B,EAAA,GAAA8N,GAAA,YAAoG,GAAAC,GAAA,8BAKtGxP,EAAA,EAAM,EAGRF,EAAA,aACE2B,EAAA,GAAAgO,GAAA,yBAAAC,EAAA,EAIA1O,EAAA,4BAEAlB,EAAA,gCAGkCyH,EAAA,yBAAA2F,EAAA,CAAAhC,EAAAkC,CAAA,KAAA1M,GAAA2K,EAAA,QAAAC,GAAiB5K,EAAAqL,cAAAmB,CAAA,CAAqB,KAAC,+BAAAA,EAAA,CAAAhC,EAAAkC,CAAA,KAAA1M,GAAA2K,EAAA,QAAAC,GAChD5K,EAAAiP,4BAAAzC,CAAA,CAAmC,KAG3DlN,EAAA,EAAyB,EAG5BgB,EAAA,oBACFhB,EAAA,MAAAE,CAAA,QAAAE,CAAA,CAAAC,CAAA,GAhFuBG,EAAA,GAAAS,EAAA,OAAAP,EAAAkP,qBAAA,GAA+B,QAAAlP,EAAAyC,OAAA,EAQpC3C,EAAA,GAAAuO,GAAArO,EAAAyC,QAAApB,WAAA,EAGWvB,EAAA,EAAAS,EAAA,iBAAAP,EAAAmP,wBAAA,EAA2C,UAAAnP,EAAAyC,OAAA,EAClB,OAAAzC,EAAAwN,WAAA,EAIjC1N,EAAA,EAAAS,EAAA,OAAAP,EAAAwN,aAAA,UAAAxN,EAAAwN,YAAA4B,OAAA,EAEkBtP,EAAA,EAAAS,EAAA,UAAAP,EAAAyC,OAAA,EAInB3C,EAAA,GAAAsB,EAAA,IAAApB,EAAAyC,QAAAyD,aAAA,IAGJpG,EAAA,EAAAS,EAAA,QAAAP,EAAAyC,QAAA4M,kBAAA,EAMUvP,EAAA,GAAAC,EAAAC,EAAAsP,2BAAA,GAA4BtP,EAAAsP,2BAAA,GAAAnP,CAAA,KAEZL,EAAA,EAAAS,EAAA,OAAAP,EAAA2N,qBAAApM,MAAA,EASbzB,EAAA,EAAAS,EAAA,UAAAmB,EAAA,GAAA6N,GAAAvP,EAAA8N,0BAAA,GACOhO,EAAA,EAAAS,EAAA,YAAAP,EAAAwP,uBAAA/N,CAAA,EAGvB3B,EAAA,EAAAS,EAAA,OAAAP,EAAAyP,uBAAA,GAQH3P,EAAA,GAAAS,EAAA,OAAAP,EAAA0P,aAAA,GAIkB5P,EAAA,EAAAS,EAAA,OAAAP,EAAA2P,iBAAA,IAAA3P,EAAA0P,aAAA,GASJ5P,EAAA,GAAAS,EAAA,SAAAP,EAAA4P,QAAA,EAAmB,cAAA5P,EAAA6P,KAAA,EAIrC/P,EAAA,EAAAS,EAAA,eAAAP,EAAA8P,MAAA,EAAuB,cAAA9P,EAAA+P,cAAA,cAAAC,GAAAxQ,CAAA,CAAAC,CAAA,EAAAD,CAAA,KAW7ByQ,GAAA,GACE3P,EAAA,8BAAA4P,EAAA,KCjCF,GAAaC,KAAiB,KAAxB,GAAOA,GAAP,KAAOA,EAAiB,CACpBC,MAAQrO,EAAOsO,EAAc,EAC7B9N,YAAcR,EAAOS,CAAW,EAChCV,eAAiBC,EAAOC,CAAc,EACtCC,oBAAsBF,EAAOG,CAAmB,EAChDoO,SAAWvO,EAAOwO,EAAQ,EAC1BC,cAAgBzO,EAAO0O,EAAa,EACpCC,gBAAkB3O,EAAO4O,EAAe,EACxCC,YAAc7O,EAAO8O,EAAW,EAChC1O,aAAeJ,EAAOK,CAAY,EAClCC,SAAWN,EAAOO,CAAe,EACjCwO,UAAY/O,EAAOgP,EAAgB,EACnCxI,cAAgBxG,EAAOyG,CAAa,EACpCwI,YAAcjP,EAAOkP,EAAW,EAChCC,eAAiBnP,EAAOoP,EAAqB,EAE5CC,mBAAqB1I,EAAkC,oBAAoB,EAEpFjG,QACA+K,YAEAsC,OAAS,GAETpN,cAAgC,GAEhCmN,MAA+B,GAC/BD,SAAW,GAEXjC,mBACA6B,uBAAyB,GACzB1B,2BAA6B,GAE7BqB,yBAAkD,GAE1CkC,SAERzN,UAAQ,CACN,KAAKyN,SAAW,KAAKjB,MAAMkB,OACxB9M,KACCa,EAAIiM,GAAUA,EAAOC,SAAY,EACjCC,GAAoB,EACpB5M,EAAU2M,GAAa,KAAKzP,eAAe2P,WAAWF,CAAS,CAAC,EAChE9M,EAAIhC,GAAW,KAAKiP,UAAUjP,CAAO,CAAC,EACtCmC,EAAUnC,GAAW,KAAKR,oBAAoBsC,yBAAyB,CAAE9B,SAAO,CAAE,CAAC,EACnFkP,GAAWC,GACT,KAAKpB,cAAcqB,wBAAwBD,EAAK,QAAS,CACvDE,GAAeC,gBACfD,GAAeE,aAAa,CAC7B,CAAC,CACH,EAEFlO,UAAU,CACTgC,KAAMpD,GAAgB,CACpB,KAAKA,cAAgBA,EAAcoC,IACrC,GAEAmN,MAAOL,GAAO,KAAKtB,SAAS2B,MAAML,EAAIM,OAAO,EAC9C,EAEH,KAAKrC,MAAQ,CACX,CAAEvB,gBAAO7H,CAAqB2H,WAAY,gBAAgB,EAC1D,CAAEE,oBAAO7H,CAAmB2H,WAAY,QAAQ,CAAE,EAGpD,KAAK0B,OAAS,KAAKM,MAAM+B,SAASC,YAAYtC,MAAA,EAAa,EAC7D,EAEA5L,aAAW,CACL,KAAKmN,UAAU,KAAKA,SAASlN,YAAW,CAC9C,EAEAmL,4BAA0B,CACxB,MAAO,MAAK5M,cAAc2P,OACxB,CAACC,EAAKC,IAAQD,EAAMC,EAAIjR,eACxB,KAAKmB,QAAQnB,eAEjB,EAEAkR,gBAAc,CACZ,MAAO,MAAK5B,YAAY6B,WAAU,CACpC,EAEA1C,eAAa,CACX,MAAO,MAAKxH,cAAcwH,cAAa,CACzC,EAEAb,sBAAoB,CAClB,MAAI,MAAKa,cAAa,EAAW,GAE1B,GACT,EAEAL,cAAY,CACV,MAAK,MAAK8C,eAAc,EAEjB,KAAK/P,SAASiQ,SAAW,KAAK9B,YAAY+B,QAAO,EAAGnN,GAFxB,EAGrC,EAEAgJ,eAAa,CACX,KAAKoE,iBAAiB,KAAKnQ,OAAO,CACpC,EAEAgM,eAAa,CACX,KAAKiC,gBAAgBmC,mBAAkB,CACzC,EAEAxH,cAAeyE,EAAc,CAC3B,GAAMsC,GAAc,CAAEtC,QAAM,EAE5B,KAAKoB,eAAe4B,eAAe,CAAE,UAAU,EAAIV,EAAa,KAAKhC,KAAK,CAC5E,EAEAnB,4BAA6B8D,EAAkB,CAC7C,KAAKnD,SAAW,KAAKG,cAAa,GAAMgD,CAC1C,EAEApD,kBAAgB,CACd,MAAO,MAAKjN,cAAcsQ,SAAW,CACvC,EAEAvD,wBAAsB,CACpB,MAAO,CAAC,KAAK3B,4BAA8B,KAAK0B,uBAAuBwD,OAAS,GAClF,EAEAC,iBAAe,CACb,MAAO,MAAK7C,MAAM8C,SAAS,CAAC,EAAEf,SAASgB,IAAI,CAAC,EAAEC,OAAS,gBACzD,EAEc1B,UAAWjP,EAAgB,OAAA8C,GAAA,sBACvC,KAAKyL,YAAYqC,SAAS5Q,EAAQpB,WAAW,EAE7C,KAAKmO,uBAAyB,KAAM,MAAKnN,SAASoD,mBAAmB,CACnEpD,SAAUI,EAAQiD,YAClBC,UAAW,GACXC,SAAU,GACX,EAGD,KAAKnD,QAAUA,EAEf,KAAK6Q,wBAAuB,EAC5B,KAAKV,iBAAiBnQ,CAAO,EAC7B,KAAK8Q,uBAAsB,EAC3B,KAAKC,uBAAsB,CAC7B,KAEQC,iBAAe,CACrB,KAAKrC,mBAAkB,EAAGsC,KAAK,KAAKjR,OAAO,CAC7C,EAEQmQ,iBAAkBnQ,EAAgB,CACxC,GAAI,CAACA,EAAQiQ,QAAU,CAAC,KAAK9B,YAAY6B,WAAU,EAAI,OAE1C,KAAK7B,YAAY+B,QAAO,EAC5BgB,SAASC,GAAUC,YAAY,GACtC,KAAKtR,YAAYoQ,QAAQlQ,EAAQiQ,MAAM,EACpC5O,UAAU,CACTgC,KAAM0H,GAAc,CAClB,KAAKA,YAAcA,CACrB,GAEAyE,MAAOL,GAAO,KAAKtB,SAAS2B,MAAML,EAAIM,OAAO,EAC9C,CAEP,EAEQoB,yBAAuB,CAC7B,KAAKnE,yBAA2B,GAE3B,KAAKyB,YAAY6B,WAAU,IAC5B,KAAK/C,aAAY,IAGrB,KAAKP,yBAA2B,CAC9B,CACEb,eAAO7H,CACPqN,SAAU,IAEZ,CACExF,mCAAO7H,CACPsN,QAASA,IAAM,KAAKN,gBAAe,EACpC,GAEL,EAEQF,wBAAsB,CAC5B,KAAKpR,aAAamH,kBAAkB,CAClC7G,QAAS,KAAKA,QACdwC,gBAAiB,CACfnC,YAAa,EACbC,aAAc,GAEhBuB,KAAM,eACP,EAAER,UAAUY,GAAM,CACjB,KAAKiJ,mBAAqBjJ,EAAIC,KAChC,EAAC,CACH,EAEQ6O,wBAAsB,CAC5B,KAAK1C,UAAUkD,UAAU,CAAEC,SAAU,CAAE,KAAKxR,QAAQ4M,kBAAkB,EAAI6E,MAAO,CAAE,KAAKzR,QAAQ0R,IAAI,CAAE,CAAE,EACrGrQ,UAAUsQ,GAAU,KAAK3R,QAAQ4R,kBAAkBD,CAAM,CAAC,CAC/D,IAAAjO,CAAA,CAzMWgK,4CAAiB,IAAAhK,CAAA,CAAjBgK,wBAAiB/J,UAAA,mBAAAuD,UAAA,QAAAA,CAAAC,EAAA9C,EAAA,CAAA8C,EAAA,GAAAC,CAAA,CAAAC,CAAA,CAAAsH,kBAAA,CAAAhE,EAAA,IAAArD,CAAA,IAAAC,CAAA,KAAA3D,KAAA,GAAAC,IAAA,GAAAC,MAAA,CAAAA,CAAA,QAAA1G,CAAA,CAAAA,CAAA,yBDzBuD4G,wCAC9DA,kCAsBVA,wDA2BuBA,sBAxEIA,sHA4BfA,yFAfiHA,iHAkB1HA,0FAAA6N,CAAiG,kBAAAC,EAAA,CAAAA,EAAA,mBAe5G9N,oDAKqGA,+/CA1D1G1F,EAAA,EAAAyT,GAAA,eAAkC,EAAAC,GAAA,sBAAA1K,CAAA,KAA5BxJ,EAAA,OAAAuG,EAAArE,OAAA,EAsFS3C,EAAA,EAAAS,EAAA,OAAAuG,EAAAqI,wBAAA,KAAAlI,YAAA,EChDXyN,GAAYC,GAAAzN,EACZG,EACAuN,GACAC,GACAC,GACAC,GACAzN,EACAC,GACAyN,GACAC,GACAnK,GACAoK,GACAC,EAAsB,EAAA1N,OAAA;4DAAA,KAIpB,GAAO0I,GAAPiF,QAAOjF,EAAiB,MC1C9B,GAAAkF,IAAe,CACb,CACEjC,KAAM,WACNkC,WAAY,8BAEd,CACElC,KAAM,aACNmC,UAAWpF,GACXqF,UAAW,CACTC,GACA1E,GACA2E,GACAC,GACAC,GACAC,GACAC,EAAW,EAEb5C,SAAU,CACR,CACEE,KAAM,GACNkC,WAAY,iBACZS,UAAW,QAEb,CACE3C,KAAM,iBACNmC,UAAW1T,GAEb,CACEuR,KAAM,SACNmC,UAAWjN,GACXxD,KAAM,CACJkR,MAAO,CACLC,QAAS,GACTC,IAAK,yBAMX,CACE9C,KAAM,SACNkC,WAAY,SACb,EAEJ,SAAAa,EAAA,IAAAC,OAAA","names":["ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","ln","o","i","e","_","$implicit","n","ɵɵadvance","ɵɵi18nExp","ctx_r1","getTotalVideosOf","videoChannel_r1","I","dn","_n","ɵɵelement","ɵɵproperty","video_r3","userMiniature","miniatureDisplayOptions","un","getVideoChannelLink","pn","ɵɵtext","ɵɵtemplate","AccountVideoChannelsComponent_div_5_span_9_Template","AccountVideoChannelsComponent_div_5_div_16_Template","AccountVideoChannelsComponent_div_5_my_video_miniature_17_Template","AccountVideoChannelsComponent_div_5_div_18_Template","ɵɵtextInterpolate1","displayName","followersCount","undefined","getChannelDescription","ɵɵsanitizeHtml","ɵɵpureFunction1","_c0","getVideosOf","AccountVideoChannelsComponent","accountService","inject","AccountService","videoChannelService","VideoChannelService","videoService","VideoService","markdown","MarkdownService","userService","UserService","account","videoChannels","videos","channelsDescriptionHTML","channelPagination","currentPage","itemsPerPage","totalItems","videosPagination","videosSort","onChannelDataSubject","Subject","nsfwPolicy","date","views","by","avatar","privacyLabel","accountSub","ngOnInit","accountLoaded","subscribe","loadMoreChannels","getAnonymousOrLoggedUser","user","ngOnDestroy","unsubscribe","options","componentPagination","sort","listAccountVideoChannels","pipe","tap","res","total","switchMap","from","data","concatMap","videoChannel","videoPagination","nsfw","nsfwPolicyToParam","listChannelVideos","map","_0","__async","id","textMarkdownToHTML","description","withEmoji","withHtml","push","next","obj","onNearOfBottom","hasMoreItems","nameWithHost","g","selectors","decls","vars","consts","i18n_0","$localize","i18n_6","k","AccountVideoChannelsComponent_div_3_Template","ɵɵlistener","ctx","AccountVideoChannelsComponent_div_5_Template","asObservable","dependencies","NgIf","InfiniteScrollerDirective","NgFor","ActorAvatarComponent","RouterLink","SubscribeButtonComponent","VideoMiniatureComponent","styles","_AccountVideoChannelsComponent","__decorate","SimpleMemoize","prototype","Cn","mn","ctx_r0","getVideosObservableFunction","getSyndicationItemsFunction","defaultSort","displayAsRow","disabled","AccountVideosComponent","screenService","ScreenService","videosList","viewChild","getVideosObservable","bind","getSyndicationItems","alreadyLoaded","reloadVideos","pagination","filters","__spreadProps","__spreadValues","toVideosAPIObject","skipCount","listAccountVideos","getAccountFeedUrls","isInMobileView","disableForReuse","enabledForReuse","viewQuery","rf","R","r","t","x","AccountVideosComponent_my_videos_list_2_Template","VideosListComponent","encapsulation","_AccountVideosComponent","gn","hn","w","ɵɵrestoreView","_r2","ctx_r2","ɵɵnextContext","ɵɵresetView","hideInput","SimpleSearchInputComponent","input","initialValue","name","placeholder","iconTitle","alwaysShow","searchChanged","output","inputDisplayChanged","lastSearch","value","inputShown","isInputShown","showInput","onIconClick","sendSearch","focus","emit","setTimeout","nativeElement","focusLost","onResetFilter","inputs","outputs","ɵɵtwoWayListener","$event","i0","_r1","ɵɵtwoWayBindingSet","SimpleSearchInputComponent_button_8_Template","ɵɵtwoWayProperty","FormsModule","DefaultValueAccessor","NgControlStatus","NgModel","GlobalIconComponent","_SimpleSearchInputComponent","Sn","On","expanded","vn","accountUser","blockedReason","fn","accountVideosCount","Nn","_r3","accountDescriptionExpanded","An","Mn","Tn","item","item_r4","routerLink","ɵɵtextInterpolate","label","Pn","onUserChanged","onUserDeleted","AccountsComponent_div_0_span_13_Template","AccountsComponent_div_0_span_22_Template","AccountsComponent_div_0_button_25_Template","AccountsComponent_div_0_a_27_Template","AccountsComponent_div_0_my_subscribe_button_28_Template","AccountsComponent_div_0_ng_template_30_Template","ɵɵtemplateRefExtractor","onSearchInputDisplayChanged","getAccountAvatarSize","prependModerationActions","blocked","nameWithHostForced","naiveAggregatedSubscribers","_c1","accountDescriptionHTML","hasShowMoreDescription","isManageable","hasVideoChannels","hideMenu","links","search","isInSmallView","En","ɵɵelementContainerStart","he","AccountsComponent","route","ActivatedRoute","notifier","Notifier","restExtractor","RestExtractor","redirectService","RedirectService","authService","AuthService","blocklist","BlocklistService","metaService","MetaService","peertubeRouter","PeerTubeRouterService","accountReportModal","routeSub","params","accountId","distinctUntilChanged","getAccount","onAccount","catchError","err","redirectTo404IfNotFound","HttpStatusCode","BAD_REQUEST_400","NOT_FOUND_404","error","message","snapshot","queryParams","reduce","acc","val","isUserLoggedIn","isLoggedIn","userId","getUser","loadUserIfNeeded","redirectToHomepage","silentNavigate","displayed","length","isOnChannelPage","children","url","path","setTitle","updateModerationActions","loadAccountVideosCount","loadAccountBlockStatus","showReportModal","show","hasRight","UserRight","MANAGE_USERS","isHeader","handler","getStatus","accounts","hosts","host","status","updateBlockStatus","i18n_7","ae","AccountsComponent_div_0_Template","AccountsComponent_ng_container_1_Template","CommonModule","NgClass","UserModerationDropdownComponent","NgbTooltip","AccountBlockBadgesComponent","CopyButtonComponent","RouterLinkActive","HorizontalMenuComponent","RouterOutlet","AccountReportComponent","_AccountsComponent","routes_default","redirectTo","component","providers","UserSubscriptionService","VideoPlaylistService","VideoBlockService","AbuseService","UserAdminService","BulkService","pathMatch","reuse","enabled","key","zt","default"],"ignoreList":[],"sources":["src/app/+accounts/account-video-channels/account-video-channels.component.html","src/app/+accounts/account-video-channels/account-video-channels.component.ts","src/app/+accounts/account-videos/account-videos.component.html","src/app/+accounts/account-videos/account-videos.component.ts","src/app/shared/shared-main/search/simple-search-input.component.html","src/app/shared/shared-main/search/simple-search-input.component.ts","src/app/+accounts/accounts.component.html","src/app/+accounts/accounts.component.ts","src/app/+accounts/routes.ts"],"sourcesContent":["<h1 class=\"visually-hidden\" i18n>Video channels</h1>\n\n<div class=\"margin-content\">\n\n  <div class=\"no-results\" i18n *ngIf=\"channelPagination.totalItems === 0\">This account does not have channels.</div>\n\n  <div class=\"channels\" myInfiniteScroller (nearOfBottom)=\"onNearOfBottom()\" [dataObservable]=\"onChannelDataSubject.asObservable()\">\n    <div class=\"channel\" *ngFor=\"let videoChannel of videoChannels\">\n\n      <div class=\"channel-avatar-row\">\n        <my-actor-avatar\n          [actor]=\"videoChannel\" actorType=\"channel\"\n          [internalHref]=\"getVideoChannelLink(videoChannel)\"\n          i18n-title\n          title=\"See this video channel\"\n          size=\"75\"\n        ></my-actor-avatar>\n\n        <h2 class=\"fs-5 lh-1 fw-bold m-0\">\n          <a class=\"text-decoration-none\" [routerLink]=\"getVideoChannelLink(videoChannel)\" i18n-title title=\"See this video channel\">\n            {{ videoChannel.displayName }}\n          </a>\n        </h2>\n\n        <div class=\"actor-counters\">\n          <div class=\"followers\" i18n>{videoChannel.followersCount, plural, =0 {No subscribers} =1 {1 subscriber} other {{{ videoChannel.followersCount }} subscribers}}</div>\n\n          <span class=\"videos-count\" *ngIf=\"getTotalVideosOf(videoChannel) !== undefined\" i18n>\n            {getTotalVideosOf(videoChannel), plural, =0 {No videos} =1 {1 video} other {{{ getTotalVideosOf(videoChannel) }} videos}}\n          </span>\n        </div>\n\n        <div class=\"description-html\" [innerHTML]=\"getChannelDescription(videoChannel)\"></div>\n      </div>\n\n      <my-subscribe-button [videoChannels]=\"[videoChannel]\"></my-subscribe-button>\n\n      <a i18n class=\"button-show-channel peertube-button-link primary-button\" [routerLink]=\"getVideoChannelLink(videoChannel)\">Show this channel</a>\n\n      <div class=\"videos-overflow-workaround\">\n        <div class=\"videos\">\n          <div class=\"no-results h-auto\" i18n *ngIf=\"getTotalVideosOf(videoChannel) === 0\">This channel doesn't have any videos.</div>\n\n          <my-video-miniature\n            *ngFor=\"let video of getVideosOf(videoChannel)\"\n            [video]=\"video\" [user]=\"userMiniature\" [displayVideoActions]=\"true\" [displayOptions]=\"miniatureDisplayOptions\"\n          ></my-video-miniature>\n\n          <div *ngIf=\"getTotalVideosOf(videoChannel)\" class=\"miniature-show-channel\">\n            <a class=\"link-primary\" i18n [routerLink]=\"getVideoChannelLink(videoChannel)\">SHOW THIS CHANNEL ></a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { from, Subject, Subscription } from 'rxjs'\nimport { concatMap, map, switchMap, tap } from 'rxjs/operators'\nimport { Component, OnDestroy, OnInit, inject } from '@angular/core'\nimport { ComponentPagination, hasMoreItems, MarkdownService, User, UserService } from '@app/core'\nimport { SimpleMemoize } from '@app/helpers'\nimport { NSFWPolicyType, VideoSortField } from '@peertube/peertube-models'\nimport { MiniatureDisplayOptions, VideoMiniatureComponent } from '../../shared/shared-video-miniature/video-miniature.component'\nimport { SubscribeButtonComponent } from '../../shared/shared-user-subscription/subscribe-button.component'\nimport { RouterLink } from '@angular/router'\nimport { ActorAvatarComponent } from '../../shared/shared-actor-image/actor-avatar.component'\nimport { InfiniteScrollerDirective } from '../../shared/shared-main/common/infinite-scroller.directive'\nimport { NgIf, NgFor } from '@angular/common'\nimport { AccountService } from '@app/shared/shared-main/account/account.service'\nimport { VideoChannelService } from '@app/shared/shared-main/channel/video-channel.service'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\nimport { Account } from '@app/shared/shared-main/account/account.model'\nimport { Video } from '@app/shared/shared-main/video/video.model'\n\n@Component({\n  selector: 'my-account-video-channels',\n  templateUrl: './account-video-channels.component.html',\n  styleUrls: [ './account-video-channels.component.scss' ],\n  imports: [ NgIf, InfiniteScrollerDirective, NgFor, ActorAvatarComponent, RouterLink, SubscribeButtonComponent, VideoMiniatureComponent ]\n})\nexport class AccountVideoChannelsComponent implements OnInit, OnDestroy {\n  private accountService = inject(AccountService)\n  private videoChannelService = inject(VideoChannelService)\n  private videoService = inject(VideoService)\n  private markdown = inject(MarkdownService)\n  private userService = inject(UserService)\n\n  account: Account\n  videoChannels: VideoChannel[] = []\n\n  videos: { [id: number]: { total: number, videos: Video[] } } = {}\n\n  channelsDescriptionHTML: { [id: number]: string } = {}\n\n  channelPagination: ComponentPagination = {\n    currentPage: 1,\n    itemsPerPage: 2,\n    totalItems: null\n  }\n\n  videosPagination: ComponentPagination = {\n    currentPage: 1,\n    itemsPerPage: 5,\n    totalItems: null\n  }\n  videosSort: VideoSortField = '-publishedAt'\n\n  onChannelDataSubject = new Subject<any>()\n\n  userMiniature: User\n  nsfwPolicy: NSFWPolicyType\n  miniatureDisplayOptions: MiniatureDisplayOptions = {\n    date: true,\n    views: true,\n    by: false,\n    avatar: false,\n    privacyLabel: false\n  }\n\n  private accountSub: Subscription\n\n  ngOnInit () {\n    // Parent get the account for us\n    this.accountSub = this.accountService.accountLoaded\n      .subscribe(account => {\n        this.account = account\n        this.videoChannels = []\n\n        this.loadMoreChannels()\n      })\n\n    this.userService.getAnonymousOrLoggedUser()\n      .subscribe(user => {\n        this.userMiniature = user\n\n        this.nsfwPolicy = user.nsfwPolicy\n      })\n  }\n\n  ngOnDestroy () {\n    if (this.accountSub) this.accountSub.unsubscribe()\n  }\n\n  loadMoreChannels () {\n    const options = {\n      account: this.account,\n      componentPagination: this.channelPagination,\n      sort: '-updatedAt'\n    }\n\n    this.videoChannelService.listAccountVideoChannels(options)\n      .pipe(\n        tap(res => {\n          this.channelPagination.totalItems = res.total\n        }),\n        switchMap(res => from(res.data)),\n        concatMap(videoChannel => {\n          const options = {\n            videoChannel,\n            videoPagination: this.videosPagination,\n            sort: this.videosSort,\n            nsfw: this.videoService.nsfwPolicyToParam(this.nsfwPolicy)\n          }\n\n          return this.videoService.listChannelVideos(options)\n            .pipe(map(data => ({ videoChannel, videos: data.data, total: data.total })))\n        })\n      )\n      .subscribe(async ({ videoChannel, videos, total }) => {\n        this.channelsDescriptionHTML[videoChannel.id] = await this.markdown.textMarkdownToHTML({\n          markdown: videoChannel.description,\n          withEmoji: true,\n          withHtml: true\n        })\n\n        this.videoChannels.push(videoChannel)\n\n        this.videos[videoChannel.id] = { videos, total }\n\n        this.onChannelDataSubject.next([ videoChannel ])\n      })\n  }\n\n  getVideosOf (videoChannel: VideoChannel) {\n    const obj = this.videos[videoChannel.id]\n    if (!obj) return []\n\n    return obj.videos\n  }\n\n  getTotalVideosOf (videoChannel: VideoChannel) {\n    const obj = this.videos[videoChannel.id]\n    if (!obj) return undefined\n\n    return obj.total\n  }\n\n  getChannelDescription (videoChannel: VideoChannel) {\n    return this.channelsDescriptionHTML[videoChannel.id]\n  }\n\n  onNearOfBottom () {\n    if (!hasMoreItems(this.channelPagination)) return\n\n    this.channelPagination.currentPage += 1\n\n    this.loadMoreChannels()\n  }\n\n  @SimpleMemoize()\n  getVideoChannelLink (videoChannel: VideoChannel) {\n    return [ '/c', videoChannel.nameWithHost ]\n  }\n}\n","<h1 class=\"visually-hidden\" i18n>Videos</h1>\n\n<my-videos-list\n  #videosList\n\n  *ngIf=\"account\"\n\n  [getVideosObservableFunction]=\"getVideosObservableFunction\"\n  [getSyndicationItemsFunction]=\"getSyndicationItemsFunction\"\n\n  [defaultSort]=\"defaultSort\"\n\n  displayFilters=\"true\"\n  [displayAsRow]=\"displayAsRow()\"\n\n  hideScopeFilter=\"true\"\n\n  loadUserVideoPreferences=\"true\"\n\n  highlightLives=\"true\"\n\n  [disabled]=\"disabled\"\n>\n</my-videos-list>\n","import { NgIf } from '@angular/common'\nimport { Component, inject, OnDestroy, OnInit, viewChild } from '@angular/core'\nimport { ComponentPaginationLight, DisableForReuseHook, ScreenService } from '@app/core'\nimport { Account } from '@app/shared/shared-main/account/account.model'\nimport { AccountService } from '@app/shared/shared-main/account/account.service'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { VideoFilters } from '@app/shared/shared-video-miniature/video-filters.model'\nimport { VideoSortField } from '@peertube/peertube-models'\nimport { Subscription } from 'rxjs'\nimport { VideosListComponent } from '../../shared/shared-video-miniature/videos-list.component'\n\n@Component({\n  selector: 'my-account-videos',\n  templateUrl: './account-videos.component.html',\n  imports: [ NgIf, VideosListComponent ]\n})\nexport class AccountVideosComponent implements OnInit, OnDestroy, DisableForReuseHook {\n  private screenService = inject(ScreenService)\n  private accountService = inject(AccountService)\n  private videoService = inject(VideoService)\n\n  readonly videosList = viewChild<VideosListComponent>('videosList')\n\n  getVideosObservableFunction = this.getVideosObservable.bind(this)\n  getSyndicationItemsFunction = this.getSyndicationItems.bind(this)\n\n  defaultSort = '-publishedAt' as VideoSortField\n\n  account: Account\n  disabled = false\n\n  private alreadyLoaded = false\n\n  private accountSub: Subscription\n\n  ngOnInit () {\n    // Parent get the account for us\n    this.accountSub = this.accountService.accountLoaded\n      .subscribe(account => {\n        if (account.id === this.account?.id) return\n\n        this.account = account\n        if (this.alreadyLoaded) this.videosList().reloadVideos()\n\n        this.alreadyLoaded = true\n      })\n  }\n\n  ngOnDestroy () {\n    if (this.accountSub) this.accountSub.unsubscribe()\n  }\n\n  getVideosObservable (pagination: ComponentPaginationLight, filters: VideoFilters) {\n    const options = {\n      ...filters.toVideosAPIObject(),\n\n      videoPagination: pagination,\n      account: this.account,\n      skipCount: true\n    }\n\n    return this.videoService.listAccountVideos(options)\n  }\n\n  getSyndicationItems () {\n    return this.videoService.getAccountFeedUrls(this.account.id)\n  }\n\n  displayAsRow () {\n    return this.screenService.isInMobileView()\n  }\n\n  disableForReuse () {\n    this.disabled = true\n  }\n\n  enabledForReuse () {\n    this.disabled = false\n  }\n}\n","<div class=\"root\">\n  <div class=\"input-group has-clear\" [hidden]=\"!inputShown\">\n    <input\n      #ref type=\"text\" class=\"last-in-group\"\n      [(ngModel)]=\"value\" (keyup.enter)=\"sendSearch()\" [name]=\"name()\" [placeholder]=\"placeholder()\"\n    >\n\n    <button class=\"border-0 p-0 form-control-clear\" title=\"Clear filter\" i18n-title (click)=\"onResetFilter()\">\n      <my-global-icon iconName=\"cross\"></my-global-icon>\n    </button>\n  </div>\n\n  <button class=\"border-0 p-0 search-button\" [title]=\"iconTitle()\" (click)=\"onIconClick()\">\n    <my-global-icon iconName=\"search\"></my-global-icon>\n  </button>\n\n  <button *ngIf=\"!alwaysShow() && inputShown\" class=\"border-0 p-0 close-search-button\" i18n-title title=\"Close search\" (click)=\"hideInput()\">\n    <my-global-icon iconName=\"cross\"></my-global-icon>\n  </button>\n</div>\n","import { NgIf } from '@angular/common'\nimport { Component, ElementRef, OnInit, input, output, viewChild } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { GlobalIconComponent } from '../../shared-icons/global-icon.component'\n\n@Component({\n  selector: 'my-simple-search-input',\n  templateUrl: './simple-search-input.component.html',\n  styleUrls: [ './simple-search-input.component.scss' ],\n  imports: [ FormsModule, GlobalIconComponent, NgIf ]\n})\nexport class SimpleSearchInputComponent implements OnInit {\n  readonly input = viewChild<ElementRef>('ref')\n\n  readonly initialValue = input('')\n  readonly name = input('search')\n  readonly placeholder = input($localize`Search`)\n  readonly iconTitle = input($localize`Search`)\n  readonly alwaysShow = input(true)\n\n  readonly searchChanged = output<string>()\n  readonly inputDisplayChanged = output<boolean>()\n\n  lastSearch = ''\n  value = ''\n  inputShown: boolean\n\n  ngOnInit () {\n    this.value = this.initialValue()\n\n    if (this.isInputShown()) this.showInput(false)\n  }\n\n  isInputShown () {\n    if (this.alwaysShow()) return true\n\n    return this.inputShown\n  }\n\n  onIconClick () {\n    if (!this.isInputShown()) {\n      this.showInput()\n      return\n    }\n\n    this.sendSearch()\n  }\n\n  showInput (focus = true) {\n    this.inputShown = true\n    this.inputDisplayChanged.emit(this.inputShown)\n\n    if (focus) {\n      setTimeout(() => this.input().nativeElement.focus())\n    }\n  }\n\n  hideInput () {\n    this.inputShown = false\n\n    if (this.isInputShown() === false) {\n      this.inputDisplayChanged.emit(this.inputShown)\n    }\n  }\n\n  focusLost () {\n    if (this.value) return\n\n    this.hideInput()\n  }\n\n  sendSearch () {\n    if (this.lastSearch === this.value) return\n\n    this.lastSearch = this.value\n    this.searchChanged.emit(this.value)\n  }\n\n  onResetFilter () {\n    this.value = ''\n    this.input().nativeElement.focus()\n\n    this.sendSearch()\n  }\n}\n","<div *ngIf=\"account\" class=\"root\">\n  <div class=\"margin-content account-info d-md-grid d-block\">\n\n    <div class=\"account-avatar-row\">\n      <my-actor-avatar [size]=\"getAccountAvatarSize()\" actorType=\"account\" [actor]=\"account\"></my-actor-avatar>\n\n      <div>\n        <div class=\"section-label\" i18n>ACCOUNT</div>\n\n        <div class=\"actor-info\">\n          <div>\n            <div class=\"actor-display-name align-items-center\">\n              <h1>{{ account.displayName }}</h1>\n\n              <my-user-moderation-dropdown\n                class=\"mx-3\" [prependActions]=\"prependModerationActions\"\n                buttonSize=\"small\" [account]=\"account\" [user]=\"accountUser\" placement=\"bottom-left auto\"\n                (userChanged)=\"onUserChanged()\" (userDeleted)=\"onUserDeleted()\"\n              ></my-user-moderation-dropdown>\n\n              <span *ngIf=\"accountUser?.blocked\" tabindex=\"0\" [ngbTooltip]=\"accountUser.blockedReason\" class=\"pt-badge badge-danger\" i18n>Banned</span>\n\n              <my-account-block-badges [account]=\"account\"></my-account-block-badges>\n            </div>\n\n            <div class=\"actor-handle\">\n              <span>&#64;{{ account.nameWithHost }}</span>\n\n              <my-copy-button\n                [value]=\"account.nameWithHostForced\" i18n-notification notification=\"Username copied\"\n                title=\"Copy account handle\" i18n-title\n              ></my-copy-button>\n            </div>\n\n            <div class=\"actor-counters\">\n              <span i18n>{naiveAggregatedSubscribers(), plural, =0 {No subscribers} =1 {1 subscriber} other {{{ naiveAggregatedSubscribers() }} subscribers}}</span>\n\n              <span class=\"videos-count\" *ngIf=\"accountVideosCount !== undefined\" i18n>\n                {accountVideosCount, plural, =0 {No videos} =1 {1 video} other {{{ accountVideosCount }} videos}}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"description\" [ngClass]=\"{ expanded: accountDescriptionExpanded }\">\n      <div class=\"description-html\" [innerHTML]=\"accountDescriptionHTML\"></div>\n    </div>\n\n    <button *ngIf=\"hasShowMoreDescription()\" class=\"show-more peertube-button-like-link d-md-none d-block\"\n      (click)=\"accountDescriptionExpanded = !accountDescriptionExpanded\"\n      title=\"Show the complete description\" i18n-title i18n\n    >\n      Show more...\n    </button>\n\n    <div class=\"buttons\">\n      <a *ngIf=\"isManageable()\" routerLink=\"/my-account\" class=\"peertube-button-link primary-button\" i18n>\n        Manage account\n      </a>\n\n      <my-subscribe-button *ngIf=\"hasVideoChannels() && !isManageable()\" [account]=\"account\" [videoChannels]=\"videoChannels\"></my-subscribe-button>\n    </div>\n  </div>\n\n  <div class=\"margin-content horizontal-menu mb-3\">\n    <ng-template #linkTemplate let-item=\"item\">\n      <a [routerLink]=\"item.routerLink\" routerLinkActive=\"active\" class=\"sub-menu-entry\">{{ item.label }}</a>\n    </ng-template>\n\n    <my-horizontal-menu [hidden]=\"hideMenu\" [menuEntries]=\"links\"></my-horizontal-menu>\n\n    <my-simple-search-input\n      class=\"ms-auto\"\n      [initialValue]=\"search\"\n      [alwaysShow]=\"!isInSmallView()\" (searchChanged)=\"searchChanged($event)\"\n      (inputDisplayChanged)=\"onSearchInputDisplayChanged($event)\" name=\"search-videos\"\n      i18n-iconTitle icon-title=\"Search account videos\"\n      i18n-placeholder placeholder=\"Search account videos\"\n    ></my-simple-search-input>\n  </div>\n\n  <router-outlet></router-outlet>\n</div>\n\n<ng-container *ngIf=\"prependModerationActions\">\n  <my-account-report #accountReportModal></my-account-report>\n</ng-container>\n","import { CommonModule } from '@angular/common'\nimport { Component, OnDestroy, OnInit, inject, viewChild } from '@angular/core'\nimport { ActivatedRoute, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'\nimport {\n  AuthService,\n  MarkdownService,\n  MetaService,\n  Notifier,\n  PeerTubeRouterService,\n  RedirectService,\n  RestExtractor,\n  ScreenService,\n  UserService\n} from '@app/core'\nimport { Account } from '@app/shared/shared-main/account/account.model'\nimport { AccountService } from '@app/shared/shared-main/account/account.service'\nimport { DropdownAction } from '@app/shared/shared-main/buttons/action-dropdown.component'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\nimport { VideoChannelService } from '@app/shared/shared-main/channel/video-channel.service'\nimport { HorizontalMenuComponent, HorizontalMenuEntry } from '@app/shared/shared-main/menu/horizontal-menu.component'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { BlocklistService } from '@app/shared/shared-moderation/blocklist.service'\nimport { AccountReportComponent } from '@app/shared/shared-moderation/report-modals'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { HttpStatusCode, User, UserRight } from '@peertube/peertube-models'\nimport { Subscription } from 'rxjs'\nimport { catchError, distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators'\nimport { ActorAvatarComponent } from '../shared/shared-actor-image/actor-avatar.component'\nimport { CopyButtonComponent } from '../shared/shared-main/buttons/copy-button.component'\nimport { SimpleSearchInputComponent } from '../shared/shared-main/search/simple-search-input.component'\nimport { AccountBlockBadgesComponent } from '../shared/shared-moderation/account-block-badges.component'\nimport { UserModerationDropdownComponent } from '../shared/shared-moderation/user-moderation-dropdown.component'\nimport { SubscribeButtonComponent } from '../shared/shared-user-subscription/subscribe-button.component'\n\n@Component({\n  templateUrl: './accounts.component.html',\n  styleUrls: [ './accounts.component.scss' ],\n  imports: [\n    CommonModule,\n    ActorAvatarComponent,\n    UserModerationDropdownComponent,\n    NgbTooltip,\n    AccountBlockBadgesComponent,\n    CopyButtonComponent,\n    RouterLink,\n    SubscribeButtonComponent,\n    RouterLinkActive,\n    HorizontalMenuComponent,\n    SimpleSearchInputComponent,\n    RouterOutlet,\n    AccountReportComponent,\n    HorizontalMenuComponent\n  ]\n})\nexport class AccountsComponent implements OnInit, OnDestroy {\n  private route = inject(ActivatedRoute)\n  private userService = inject(UserService)\n  private accountService = inject(AccountService)\n  private videoChannelService = inject(VideoChannelService)\n  private notifier = inject(Notifier)\n  private restExtractor = inject(RestExtractor)\n  private redirectService = inject(RedirectService)\n  private authService = inject(AuthService)\n  private videoService = inject(VideoService)\n  private markdown = inject(MarkdownService)\n  private blocklist = inject(BlocklistService)\n  private screenService = inject(ScreenService)\n  private metaService = inject(MetaService)\n  private peertubeRouter = inject(PeerTubeRouterService)\n\n  readonly accountReportModal = viewChild<AccountReportComponent>('accountReportModal')\n\n  account: Account\n  accountUser: User\n\n  search = ''\n\n  videoChannels: VideoChannel[] = []\n\n  links: HorizontalMenuEntry[] = []\n  hideMenu = false\n\n  accountVideosCount: number\n  accountDescriptionHTML = ''\n  accountDescriptionExpanded = false\n\n  prependModerationActions: DropdownAction<any>[] = []\n\n  private routeSub: Subscription\n\n  ngOnInit () {\n    this.routeSub = this.route.params\n      .pipe(\n        map(params => params['accountId']),\n        distinctUntilChanged(),\n        switchMap(accountId => this.accountService.getAccount(accountId)),\n        tap(account => this.onAccount(account)),\n        switchMap(account => this.videoChannelService.listAccountVideoChannels({ account })),\n        catchError(err =>\n          this.restExtractor.redirectTo404IfNotFound(err, 'other', [\n            HttpStatusCode.BAD_REQUEST_400,\n            HttpStatusCode.NOT_FOUND_404\n          ])\n        )\n      )\n      .subscribe({\n        next: videoChannels => {\n          this.videoChannels = videoChannels.data\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n\n    this.links = [\n      { label: $localize`Channels`, routerLink: 'video-channels' },\n      { label: $localize`Videos`, routerLink: 'videos' }\n    ]\n\n    this.search = this.route.snapshot.queryParams['search'] || ''\n  }\n\n  ngOnDestroy () {\n    if (this.routeSub) this.routeSub.unsubscribe()\n  }\n\n  naiveAggregatedSubscribers () {\n    return this.videoChannels.reduce(\n      (acc, val) => acc + val.followersCount,\n      this.account.followersCount // accumulator starts with the base number of subscribers the account has\n    )\n  }\n\n  isUserLoggedIn () {\n    return this.authService.isLoggedIn()\n  }\n\n  isInSmallView () {\n    return this.screenService.isInSmallView()\n  }\n\n  getAccountAvatarSize () {\n    if (this.isInSmallView()) return 80\n\n    return 120\n  }\n\n  isManageable () {\n    if (!this.isUserLoggedIn()) return false\n\n    return this.account?.userId === this.authService.getUser().id\n  }\n\n  onUserChanged () {\n    this.loadUserIfNeeded(this.account)\n  }\n\n  onUserDeleted () {\n    this.redirectService.redirectToHomepage()\n  }\n\n  searchChanged (search: string) {\n    const queryParams = { search }\n\n    this.peertubeRouter.silentNavigate([ './videos' ], queryParams, this.route)\n  }\n\n  onSearchInputDisplayChanged (displayed: boolean) {\n    this.hideMenu = this.isInSmallView() && displayed\n  }\n\n  hasVideoChannels () {\n    return this.videoChannels.length !== 0\n  }\n\n  hasShowMoreDescription () {\n    return !this.accountDescriptionExpanded && this.accountDescriptionHTML.length > 100\n  }\n\n  isOnChannelPage () {\n    return this.route.children[0].snapshot.url[0].path === 'video-channels'\n  }\n\n  private async onAccount (account: Account) {\n    this.metaService.setTitle(account.displayName)\n\n    this.accountDescriptionHTML = await this.markdown.textMarkdownToHTML({\n      markdown: account.description,\n      withEmoji: true,\n      withHtml: true\n    })\n\n    // After the markdown renderer to avoid layout changes\n    this.account = account\n\n    this.updateModerationActions()\n    this.loadUserIfNeeded(account)\n    this.loadAccountVideosCount()\n    this.loadAccountBlockStatus()\n  }\n\n  private showReportModal () {\n    this.accountReportModal().show(this.account)\n  }\n\n  private loadUserIfNeeded (account: Account) {\n    if (!account.userId || !this.authService.isLoggedIn()) return\n\n    const user = this.authService.getUser()\n    if (user.hasRight(UserRight.MANAGE_USERS)) {\n      this.userService.getUser(account.userId)\n        .subscribe({\n          next: accountUser => {\n            this.accountUser = accountUser\n          },\n\n          error: err => this.notifier.error(err.message)\n        })\n    }\n  }\n\n  private updateModerationActions () {\n    this.prependModerationActions = []\n\n    if (!this.authService.isLoggedIn()) return\n    if (this.isManageable()) return\n\n    // It's not our account, we can report it\n    this.prependModerationActions = [\n      {\n        label: $localize`Report`,\n        isHeader: true\n      },\n      {\n        label: $localize`Report this account`,\n        handler: () => this.showReportModal()\n      }\n    ]\n  }\n\n  private loadAccountVideosCount () {\n    this.videoService.listAccountVideos({\n      account: this.account,\n      videoPagination: {\n        currentPage: 1,\n        itemsPerPage: 0\n      },\n      sort: '-publishedAt'\n    }).subscribe(res => {\n      this.accountVideosCount = res.total\n    })\n  }\n\n  private loadAccountBlockStatus () {\n    this.blocklist.getStatus({ accounts: [ this.account.nameWithHostForced ], hosts: [ this.account.host ] })\n      .subscribe(status => this.account.updateBlockStatus(status))\n  }\n}\n","import { Routes } from '@angular/router'\nimport { AbuseService } from '@app/shared/shared-moderation/abuse.service'\nimport { BlocklistService } from '@app/shared/shared-moderation/blocklist.service'\nimport { BulkService } from '@app/shared/shared-moderation/bulk.service'\nimport { VideoBlockService } from '@app/shared/shared-moderation/video-block.service'\nimport { UserSubscriptionService } from '@app/shared/shared-user-subscription/user-subscription.service'\nimport { UserAdminService } from '@app/shared/shared-users/user-admin.service'\nimport { VideoPlaylistService } from '@app/shared/shared-video-playlist/video-playlist.service'\nimport { AccountVideoChannelsComponent } from './account-video-channels/account-video-channels.component'\nimport { AccountVideosComponent } from './account-videos/account-videos.component'\nimport { AccountsComponent } from './accounts.component'\n\nexport default [\n  {\n    path: 'peertube',\n    redirectTo: '/videos/browse?scope=local'\n  },\n  {\n    path: ':accountId',\n    component: AccountsComponent,\n    providers: [\n      UserSubscriptionService,\n      BlocklistService,\n      VideoPlaylistService,\n      VideoBlockService,\n      AbuseService,\n      UserAdminService,\n      BulkService\n    ],\n    children: [\n      {\n        path: '',\n        redirectTo: 'video-channels',\n        pathMatch: 'full'\n      },\n      {\n        path: 'video-channels',\n        component: AccountVideoChannelsComponent\n      },\n      {\n        path: 'videos',\n        component: AccountVideosComponent,\n        data: {\n          reuse: {\n            enabled: true,\n            key: 'account-videos-list'\n          }\n        }\n      },\n\n      // Old URL redirection\n      {\n        path: 'search',\n        redirectTo: 'videos'\n      }\n    ]\n  }\n] satisfies Routes\n"]}