{"version":3,"mappings":"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","names":["VideoDetails","Video","support","tags","downloadEnabled","commentsEnabled","commentsPolicy","likesPercent","dislikesPercent","trackerUrls","inputFileUpdatedAt","constructor","hash","translations","channel","VideoChannel","account","Account","buildLikeAndDislikePercents","likes","dislikes","getHlsPlaylist","streamingPlaylists","find","p","type","VideoStreamingPlaylistType","HLS","hasHlsPlaylist","VideoService","auth","inject","AuthService","authHttp","HttpClient","restExtractor","RestExtractor","restService","RestService","serverService","ServerService","confirmService","ConfirmService","userService","UserService","getVideoViewUrl","uuid","BASE_VIDEO_URL","getVideo","options","headers","VideoPasswordService","buildVideoPasswordHeader","videoPassword","getServerLocale","pipe","switchMap","get","videoId","map","videoHash","catchError","err","handleError","updateVideo","id","video","data","objectToFormData","put","uploadVideo","req","HttpRequest","reportProgress","request","removeVideo","idArg","ids","arrayify","from","concatMap","delete","toArray","listMyVideos","videoPagination","restPagination","sort","channelNameOneOf","privacyOneOf","search","pagination","componentToRestPagination","params","HttpParams","addRestGetParams","buildListSort","commonFilters","exists","isLive","addObjectParams","undefined","length","addArrayParams","BASE_USERS_URL","res","extractVideos","listAccountVideos","listVideos","__spreadProps","__spreadValues","listChannelVideos","videoChannel","optionsArg","buildVideoListParams","url","VideoChannelService","BASE_VIDEO_CHANNEL_URL","nameWithHost","AccountService","BASE_ACCOUNT_URL","categoryOneOf","languageOneOf","skipCount","nsfw","nsfwFlagsExcluded","nsfwFlagsIncluded","otherOptions","newParams","set","buildNSFWParams","anonymous","isLoggedIn","getAnonymousUser","anonymousFlagsExcluded","nsfwFlagsHidden","anonymousFlagsIncluded","nsfwFlagsDisplayed","nsfwFlagsBlurred","nsfwFlagsWarned","nsfwPolicy","nsfwPolicyToParam","sortArg","buildSortString","replace","buildBaseFeedUrls","base","BASE_FEEDS_URL","feeds","FeedType","VIDEOS","format","FeedFormat","RSS","label","toLowerCase","ATOM","JSON","keys","feed","toString","getVideoFeedUrls","isLocal","c","append","getAccountFeedUrls","accountId","getVideoChannelFeedUrls","videoChannelId","feedUrls","push","PODCAST","PODCAST_FEEDS_URL","getVideoSubscriptionFeedUrls","feedToken","BASE_SUBSCRIPTION_FEEDS_URL","getVideoFileMetadata","metadataUrl","removeVideoFiles","videoIds","removeFile","fileId","removeSourceFile","runTranscoding","videos","forceTranscoding","body","transcodingType","post","error","code","ServerErrorCode","VIDEO_ALREADY_BEING_TRANSCODED","message","$localize","name","confirm","throwError","generateDownloadUrl","files","videoFileToken","buildDownloadFilesUrl","baseUrl","environment","originServerUrl","videoFiles","f","videoUUID","getStoryboards","storyboards","status","of","getSource","setVideoLike","setVideoRate","setVideoDislike","unsetVideoLike","getUserVideoRating","result","videosJson","totalVideos","total","videoJson","explainedPrivacyLabels","serverPrivacies","defaultPrivacyId","VideoPrivacy","PUBLIC","descriptions","PRIVATE","UNLISTED","INTERNAL","PASSWORD_PROTECTED","videoPrivacies","description","buildNSFWTooltip","flags","nsfwFlags","NSFWFlag","VIOLENT","EXPLICIT_SEX","join","getHighestAvailablePrivacy","order","privacy","Error","buildDefaultOwnerDisplayType","accountName","displayName","match","rateType","rating","__publicField","apiUrl","factory","ɵfac","_VideoService","HttpHeaders","getVideoPasswords","_VideoPasswordService","H","a","B","b","C"],"ignoreList":[],"sources":["src/app/shared/shared-main/video/video-details.model.ts","src/app/shared/shared-main/video/video.service.ts","src/app/shared/shared-main/video/video-password.service.ts"],"sourcesContent":["import { Account } from '@app/shared/shared-main/account/account.model'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\nimport {\n  VideoCommentPolicyType,\n  VideoConstant,\n  VideoDetails as VideoDetailsServerModel,\n  VideoFile,\n  VideoStateType,\n  VideoStreamingPlaylist,\n  VideoStreamingPlaylistType\n} from '@peertube/peertube-models'\nimport { Video } from './video.model'\n\nexport class VideoDetails extends Video implements VideoDetailsServerModel {\n  declare channel: VideoChannel\n  declare account: Account\n\n  support: string\n  tags: string[]\n  downloadEnabled: boolean\n\n  commentsEnabled: never\n  commentsPolicy: VideoConstant<VideoCommentPolicyType>\n\n  likesPercent: number\n  dislikesPercent: number\n\n  trackerUrls: string[]\n\n  inputFileUpdatedAt: Date | string\n\n  // These fields are not optional\n  declare files: VideoFile[]\n  declare streamingPlaylists: VideoStreamingPlaylist[]\n  declare waitTranscoding: boolean\n  declare state: VideoConstant<VideoStateType>\n\n  constructor (hash: VideoDetailsServerModel, translations = {}) {\n    super(hash, translations)\n\n    this.channel = new VideoChannel(hash.channel)\n    this.account = new Account(hash.account)\n    this.tags = hash.tags\n    this.support = hash.support\n    this.commentsPolicy = hash.commentsPolicy\n    this.downloadEnabled = hash.downloadEnabled\n\n    this.inputFileUpdatedAt = hash.inputFileUpdatedAt\n\n    this.trackerUrls = hash.trackerUrls\n\n    this.buildLikeAndDislikePercents()\n  }\n\n  buildLikeAndDislikePercents () {\n    this.likesPercent = (this.likes / (this.likes + this.dislikes)) * 100\n    this.dislikesPercent = (this.dislikes / (this.likes + this.dislikes)) * 100\n  }\n\n  getHlsPlaylist () {\n    return this.streamingPlaylists.find(p => p.type === VideoStreamingPlaylistType.HLS)\n  }\n\n  hasHlsPlaylist () {\n    return !!this.getHlsPlaylist()\n  }\n}\n","import { HttpClient, HttpParams, HttpRequest } from '@angular/common/http'\nimport { inject, Injectable } from '@angular/core'\nimport {\n  AuthService,\n  ComponentPaginationLight,\n  ConfirmService,\n  RestExtractor,\n  RestPagination,\n  RestService,\n  ServerService,\n  UserService\n} from '@app/core'\nimport { objectToFormData } from '@app/helpers'\nimport { arrayify, buildDownloadFilesUrl, exists } from '@peertube/peertube-core-utils'\nimport {\n  BooleanBothQuery,\n  FeedFormat,\n  FeedFormatType,\n  FeedType,\n  FeedType_Type,\n  NSFWFlag,\n  NSFWPolicyType,\n  ResultList,\n  ServerErrorCode,\n  Storyboard,\n  UserVideoRate,\n  UserVideoRateType,\n  UserVideoRateUpdate,\n  VideoChannel as VideoChannelServerModel,\n  VideoConstant,\n  VideoDetails as VideoDetailsServerModel,\n  VideoFile,\n  VideoFileMetadata,\n  VideoPrivacy,\n  VideoPrivacyType,\n  VideosCommonQuery,\n  Video as VideoServerModel,\n  VideoSortField,\n  VideoSource,\n  VideoTranscodingCreate,\n  VideoUpdate\n} from '@peertube/peertube-models'\nimport { SortMeta } from 'primeng/api'\nimport { from, Observable, of, throwError } from 'rxjs'\nimport { catchError, concatMap, map, switchMap, toArray } from 'rxjs/operators'\nimport { environment } from '../../../../environments/environment'\nimport { Account } from '../account/account.model'\nimport { AccountService } from '../account/account.service'\nimport { VideoChannel } from '../channel/video-channel.model'\nimport { VideoChannelService } from '../channel/video-channel.service'\nimport { VideoDetails } from './video-details.model'\nimport { VideoPasswordService } from './video-password.service'\nimport { Video } from './video.model'\n\nexport type VideoListParams = Omit<VideosCommonQuery, 'start' | 'count' | 'sort'> & {\n  videoPagination?: ComponentPaginationLight\n  sort: VideoSortField | SortMeta\n}\n\n@Injectable()\nexport class VideoService {\n  private auth = inject(AuthService)\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n  private restService = inject(RestService)\n  private serverService = inject(ServerService)\n  private confirmService = inject(ConfirmService)\n  private userService = inject(UserService)\n\n  static BASE_VIDEO_URL = environment.apiUrl + '/api/v1/videos'\n  static BASE_FEEDS_URL = environment.apiUrl + '/feeds/videos.'\n  static PODCAST_FEEDS_URL = environment.apiUrl + '/feeds/podcast/videos.xml'\n  static BASE_SUBSCRIPTION_FEEDS_URL = environment.apiUrl + '/feeds/subscriptions.'\n\n  getVideoViewUrl (uuid: string) {\n    return `${VideoService.BASE_VIDEO_URL}/${uuid}/views`\n  }\n\n  getVideo (options: { videoId: string, videoPassword?: string }): Observable<VideoDetails> {\n    const headers = VideoPasswordService.buildVideoPasswordHeader(options.videoPassword)\n\n    return this.serverService.getServerLocale().pipe(\n      switchMap(translations => {\n        return this.authHttp.get<VideoDetailsServerModel>(`${VideoService.BASE_VIDEO_URL}/${options.videoId}`, { headers })\n          .pipe(map(videoHash => ({ videoHash, translations })))\n      }),\n      map(({ videoHash, translations }) => new VideoDetails(videoHash, translations)),\n      catchError(err => this.restExtractor.handleError(err))\n    )\n  }\n\n  updateVideo (id: number | string, video: VideoUpdate) {\n    const data = objectToFormData(video)\n\n    return this.authHttp.put(`${VideoService.BASE_VIDEO_URL}/${id}`, data)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  uploadVideo (video: FormData) {\n    const req = new HttpRequest('POST', `${VideoService.BASE_VIDEO_URL}/upload`, video, { reportProgress: true })\n\n    return this.authHttp\n      .request<{ video: { id: number, uuid: string } }>(req)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  removeVideo (idArg: number | number[]) {\n    const ids = arrayify(idArg)\n\n    return from(ids)\n      .pipe(\n        concatMap(id => this.authHttp.delete(`${VideoService.BASE_VIDEO_URL}/${id}`)),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  listMyVideos (options: {\n    videoPagination?: ComponentPaginationLight\n    restPagination?: RestPagination\n\n    sort: VideoSortField | SortMeta\n    userChannels?: VideoChannelServerModel[]\n\n    isLive?: boolean\n    privacyOneOf?: VideoPrivacyType[]\n    channelNameOneOf: string[]\n    search?: string\n  }): Observable<ResultList<Video>> {\n    const { videoPagination, restPagination, sort, channelNameOneOf, privacyOneOf, search } = options\n\n    const pagination = videoPagination\n      ? this.restService.componentToRestPagination(videoPagination)\n      : restPagination\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, this.buildListSort(sort))\n\n    const commonFilters: VideosCommonQuery = {}\n\n    if (exists(options.isLive)) commonFilters.isLive = options.isLive\n    if (options.search) commonFilters.search = search\n    if (options.privacyOneOf) commonFilters.privacyOneOf = privacyOneOf\n\n    params = this.restService.addObjectParams(params, commonFilters)\n\n    if (channelNameOneOf !== undefined && channelNameOneOf.length !== 0) {\n      params = this.restService.addArrayParams(params, 'channelNameOneOf', channelNameOneOf)\n    }\n\n    return this.authHttp\n      .get<ResultList<Video>>(UserService.BASE_USERS_URL + 'me/videos', { params })\n      .pipe(\n        switchMap(res => this.extractVideos(res)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  listAccountVideos (\n    options: VideoListParams & {\n      account: Pick<Account, 'nameWithHost'>\n    }\n  ): Observable<ResultList<Video>> {\n    return this.listVideos({ ...options, account: options.account })\n  }\n\n  listChannelVideos (\n    options: VideoListParams & {\n      videoChannel: Pick<VideoChannel, 'nameWithHost'>\n    }\n  ): Observable<ResultList<Video>> {\n    return this.listVideos({ ...options, videoChannel: options.videoChannel })\n  }\n\n  listVideos (\n    optionsArg: VideoListParams & {\n      videoChannel?: Pick<VideoChannel, 'nameWithHost'>\n      account?: Pick<Account, 'nameWithHost'>\n    }\n  ): Observable<ResultList<Video>> {\n    const { account, videoChannel, ...options } = optionsArg\n\n    let params = new HttpParams()\n    params = this.buildVideoListParams({ params, ...options })\n\n    let url: string\n    if (videoChannel) {\n      url = VideoChannelService.BASE_VIDEO_CHANNEL_URL + videoChannel.nameWithHost + '/videos'\n    } else if (account) {\n      url = AccountService.BASE_ACCOUNT_URL + account.nameWithHost + '/videos'\n    } else {\n      url = VideoService.BASE_VIDEO_URL\n    }\n\n    return this.authHttp\n      .get<ResultList<Video>>(url, { params })\n      .pipe(\n        switchMap(res => this.extractVideos(res)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  buildVideoListParams (options: VideoListParams & { params: HttpParams }) {\n    const {\n      params,\n      videoPagination,\n      sort,\n      categoryOneOf,\n      languageOneOf,\n      privacyOneOf,\n      skipCount,\n      search,\n      nsfw,\n      nsfwFlagsExcluded,\n      nsfwFlagsIncluded,\n\n      ...otherOptions\n    } = options\n\n    const pagination = videoPagination\n      ? this.restService.componentToRestPagination(videoPagination)\n      : undefined\n\n    let newParams = this.restService.addRestGetParams(params, pagination, this.buildListSort(sort))\n\n    if (skipCount) newParams = newParams.set('skipCount', skipCount + '')\n    if (languageOneOf !== undefined) newParams = this.restService.addArrayParams(newParams, 'languageOneOf', languageOneOf)\n    if (categoryOneOf !== undefined) newParams = this.restService.addArrayParams(newParams, 'categoryOneOf', categoryOneOf)\n    if (privacyOneOf !== undefined) newParams = this.restService.addArrayParams(newParams, 'privacyOneOf', privacyOneOf)\n    if (search) newParams = newParams.set('search', search)\n\n    newParams = this.buildNSFWParams(newParams, { nsfw, nsfwFlagsExcluded, nsfwFlagsIncluded })\n\n    return this.restService.addObjectParams(newParams, otherOptions)\n  }\n\n  buildNSFWParams (params: HttpParams, options: Pick<VideoListParams, 'nsfw' | 'nsfwFlagsExcluded' | 'nsfwFlagsIncluded'> = {}) {\n    const { nsfw, nsfwFlagsExcluded, nsfwFlagsIncluded } = options\n\n    const anonymous = this.auth.isLoggedIn()\n      ? undefined\n      : this.userService.getAnonymousUser()\n\n    const anonymousFlagsExcluded = anonymous\n      ? anonymous.nsfwFlagsHidden\n      : undefined\n\n    const anonymousFlagsIncluded = anonymous\n      ? anonymous.nsfwFlagsDisplayed | anonymous.nsfwFlagsBlurred | anonymous.nsfwFlagsWarned\n      : undefined\n\n    if (nsfw !== undefined) params = params.set('nsfw', nsfw)\n    else if (anonymous?.nsfwPolicy) params = params.set('nsfw', this.nsfwPolicyToParam(anonymous.nsfwPolicy))\n\n    if (nsfwFlagsExcluded !== undefined) params = params.set('nsfwFlagsExcluded', nsfwFlagsExcluded)\n    else if (anonymousFlagsExcluded !== undefined) params = params.set('nsfwFlagsExcluded', anonymousFlagsExcluded)\n\n    if (nsfwFlagsIncluded !== undefined) params = params.set('nsfwFlagsIncluded', nsfwFlagsIncluded)\n    else if (anonymousFlagsIncluded !== undefined) params = params.set('nsfwFlagsIncluded', anonymousFlagsIncluded)\n\n    return params\n  }\n\n  private buildListSort (sortArg: VideoSortField | SortMeta) {\n    const sort = this.restService.buildSortString(sortArg)\n\n    if (typeof sort === 'string') {\n      // Silently use the best algorithm for logged in users if they chose the hot algorithm\n      if (\n        this.auth.isLoggedIn() &&\n        (sort === 'hot' || sort === '-hot')\n      ) {\n        return sort.replace('hot', 'best')\n      }\n\n      return sort\n    }\n  }\n\n  // ---------------------------------------------------------------------------\n  // Video feeds\n  // ---------------------------------------------------------------------------\n\n  buildBaseFeedUrls (params: HttpParams, base = VideoService.BASE_FEEDS_URL) {\n    const feeds: { type: FeedType_Type, format: FeedFormatType, label: string, url: string }[] = [\n      {\n        type: FeedType.VIDEOS,\n        format: FeedFormat.RSS,\n        label: 'media rss 2.0',\n        url: base + FeedFormat.RSS.toLowerCase()\n      },\n      {\n        type: FeedType.VIDEOS,\n        format: FeedFormat.ATOM,\n        label: 'atom 1.0',\n        url: base + FeedFormat.ATOM.toLowerCase()\n      },\n      {\n        type: FeedType.VIDEOS,\n        format: FeedFormat.JSON,\n        label: 'json 1.0',\n        url: base + FeedFormat.JSON.toLowerCase()\n      }\n    ]\n\n    if (params && params.keys().length !== 0) {\n      for (const feed of feeds) {\n        feed.url += '?' + params.toString()\n      }\n    }\n\n    return feeds\n  }\n\n  getVideoFeedUrls (sort: VideoSortField, isLocal: boolean, categoryOneOf?: number[]) {\n    let params = this.restService.addRestGetParams(new HttpParams(), undefined, sort)\n\n    if (isLocal) params = params.set('isLocal', isLocal)\n\n    if (categoryOneOf) {\n      for (const c of categoryOneOf) {\n        params = params.append('categoryOneOf[]', c + '')\n      }\n    }\n\n    return this.buildBaseFeedUrls(params)\n  }\n\n  getAccountFeedUrls (accountId: number) {\n    let params = this.restService.addRestGetParams(new HttpParams())\n    params = params.set('accountId', accountId.toString())\n\n    return this.buildBaseFeedUrls(params)\n  }\n\n  getVideoChannelFeedUrls (videoChannelId: number) {\n    let params = this.restService.addRestGetParams(new HttpParams())\n    params = params.set('videoChannelId', videoChannelId.toString())\n\n    const feedUrls = this.buildBaseFeedUrls(params)\n\n    feedUrls.push({\n      type: FeedType.PODCAST,\n      format: FeedFormat.PODCAST,\n      label: 'podcast rss 2.0',\n      url: VideoService.PODCAST_FEEDS_URL + `?videoChannelId=${videoChannelId}`\n    })\n\n    return feedUrls\n  }\n\n  getVideoSubscriptionFeedUrls (accountId: number, feedToken: string) {\n    let params = this.restService.addRestGetParams(new HttpParams())\n    params = params.set('accountId', accountId.toString())\n    params = params.set('token', feedToken)\n\n    return this.buildBaseFeedUrls(params, VideoService.BASE_SUBSCRIPTION_FEEDS_URL)\n  }\n\n  // ---------------------------------------------------------------------------\n  // Video files\n  // ---------------------------------------------------------------------------\n\n  getVideoFileMetadata (metadataUrl: string) {\n    return this.authHttp\n      .get<VideoFileMetadata>(metadataUrl)\n      .pipe(\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  removeVideoFiles (videoIds: (number | string)[], type: 'hls' | 'web-videos') {\n    return from(videoIds)\n      .pipe(\n        concatMap(id => this.authHttp.delete(VideoService.BASE_VIDEO_URL + '/' + id + '/' + type)),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  removeFile (videoId: number | string, fileId: number, type: 'hls' | 'web-videos') {\n    return this.authHttp.delete(VideoService.BASE_VIDEO_URL + '/' + videoId + '/' + type + '/' + fileId)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  removeSourceFile (videoId: number | string) {\n    return this.authHttp.delete(VideoService.BASE_VIDEO_URL + '/' + videoId + '/source/file')\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  // ---------------------------------------------------------------------------\n\n  runTranscoding (options: {\n    videos: Video[]\n    type: 'hls' | 'web-video'\n    forceTranscoding?: boolean\n  }): Observable<any> {\n    const { videos, type, forceTranscoding } = options\n\n    const body: VideoTranscodingCreate = { transcodingType: type, forceTranscoding }\n\n    return from(videos)\n      .pipe(\n        concatMap(video => {\n          return this.authHttp.post(VideoService.BASE_VIDEO_URL + '/' + video.uuid + '/transcoding', body)\n            .pipe(\n              catchError(err => {\n                if (err.error?.code === ServerErrorCode.VIDEO_ALREADY_BEING_TRANSCODED && !forceTranscoding) {\n                  const message = $localize`PeerTube considers video \"${video.name}\" is already being transcoded.` +\n                    // eslint-disable-next-line max-len\n                    $localize` If you think PeerTube is wrong (video in broken state after a crash etc.), you can force transcoding on this video.` +\n                    ` Do you still want to run transcoding?`\n\n                  return from(this.confirmService.confirm(message, $localize`Force transcoding`))\n                    .pipe(\n                      switchMap(res => {\n                        if (res === false) return throwError(() => err)\n\n                        return this.runTranscoding({\n                          videos: [ video ],\n                          type,\n                          forceTranscoding: true\n                        })\n                      })\n                    )\n                }\n\n                return throwError(() => err)\n              })\n            )\n        }),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  // ---------------------------------------------------------------------------\n\n  generateDownloadUrl (options: {\n    video: Video\n    files: VideoFile[]\n    videoFileToken?: string\n  }) {\n    const { video, files, videoFileToken } = options\n\n    return buildDownloadFilesUrl({\n      baseUrl: environment.originServerUrl,\n      videoFiles: files.map(f => f.id),\n      videoUUID: video.uuid,\n      videoFileToken\n    })\n  }\n\n  // ---------------------------------------------------------------------------\n\n  getStoryboards (videoId: string | number, videoPassword: string) {\n    const headers = VideoPasswordService.buildVideoPasswordHeader(videoPassword)\n\n    return this.authHttp\n      .get<{ storyboards: Storyboard[] }>(VideoService.BASE_VIDEO_URL + '/' + videoId + '/storyboards', { headers })\n      .pipe(\n        map(({ storyboards }) => storyboards),\n        catchError(err => {\n          if (err.status === 404) {\n            return of([])\n          }\n\n          return this.restExtractor.handleError(err)\n        })\n      )\n  }\n\n  // ---------------------------------------------------------------------------\n\n  getSource (videoId: number) {\n    return this.authHttp\n      .get<VideoSource>(VideoService.BASE_VIDEO_URL + '/' + videoId + '/source')\n      .pipe(\n        catchError(err => {\n          if (err.status === 404) {\n            return of(undefined)\n          }\n\n          return this.restExtractor.handleError(err)\n        })\n      )\n  }\n\n  // ---------------------------------------------------------------------------\n\n  setVideoLike (id: string, videoPassword: string) {\n    return this.setVideoRate(id, 'like', videoPassword)\n  }\n\n  setVideoDislike (id: string, videoPassword: string) {\n    return this.setVideoRate(id, 'dislike', videoPassword)\n  }\n\n  unsetVideoLike (id: string, videoPassword: string) {\n    return this.setVideoRate(id, 'none', videoPassword)\n  }\n\n  // ---------------------------------------------------------------------------\n\n  getUserVideoRating (id: string) {\n    const url = UserService.BASE_USERS_URL + 'me/videos/' + id + '/rating'\n\n    return this.authHttp.get<UserVideoRate>(url)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  extractVideos (result: ResultList<VideoServerModel>) {\n    return this.serverService.getServerLocale()\n      .pipe(\n        map(translations => {\n          const videosJson = result.data\n          const totalVideos = result.total\n          const videos: Video[] = []\n\n          for (const videoJson of videosJson) {\n            videos.push(new Video(videoJson, translations))\n          }\n\n          return { total: totalVideos, data: videos }\n        })\n      )\n  }\n\n  explainedPrivacyLabels (serverPrivacies: VideoConstant<VideoPrivacyType>[], defaultPrivacyId: VideoPrivacyType = VideoPrivacy.PUBLIC) {\n    const descriptions = {\n      [VideoPrivacy.PRIVATE]: $localize`Only I can see this video`,\n      [VideoPrivacy.UNLISTED]: $localize`Only shareable via a private link`,\n      [VideoPrivacy.PUBLIC]: $localize`Anyone can see this video`,\n      [VideoPrivacy.INTERNAL]: $localize`Only users of this platform can see this video`,\n      [VideoPrivacy.PASSWORD_PROTECTED]: $localize`Only users with the appropriate password can see this video`\n    }\n\n    const videoPrivacies = serverPrivacies.map(p => {\n      return {\n        ...p,\n\n        description: descriptions[p.id]\n      }\n    })\n\n    return {\n      videoPrivacies,\n      defaultPrivacyId: serverPrivacies.find(p => p.id === defaultPrivacyId)?.id || serverPrivacies[0].id\n    }\n  }\n\n  buildNSFWTooltip (video: Pick<VideoServerModel, 'nsfw' | 'nsfwFlags'>) {\n    const flags: string[] = []\n\n    if ((video.nsfwFlags & NSFWFlag.VIOLENT) === NSFWFlag.VIOLENT) {\n      flags.push($localize`violence`)\n    }\n\n    if ((video.nsfwFlags & NSFWFlag.EXPLICIT_SEX) === NSFWFlag.EXPLICIT_SEX) {\n      flags.push($localize`explicit sex`)\n    }\n\n    if (flags.length === 0) {\n      return $localize`This video contains sensitive content`\n    }\n\n    return $localize`This video contains sensitive content: ${flags.join(' - ')}`\n  }\n\n  getHighestAvailablePrivacy (serverPrivacies: VideoConstant<VideoPrivacyType>[]) {\n    // We do not add a password as this requires additional configuration.\n    const order = [\n      VideoPrivacy.PRIVATE,\n      VideoPrivacy.INTERNAL,\n      VideoPrivacy.UNLISTED,\n      VideoPrivacy.PUBLIC\n    ]\n\n    for (const privacy of order) {\n      if (serverPrivacies.find(p => p.id === privacy)) {\n        return privacy\n      }\n    }\n\n    throw new Error('No highest privacy available')\n  }\n\n  nsfwPolicyToParam (nsfwPolicy: NSFWPolicyType): BooleanBothQuery {\n    return nsfwPolicy === 'do_not_list'\n      ? 'false'\n      : 'both'\n  }\n\n  // Choose if we display by default the account or the channel\n  buildDefaultOwnerDisplayType (video: Video) {\n    const accountName = video.account.name\n\n    // If the video channel name is an UUID (not really displayable, we changed this behaviour in v1.0.0-beta.12)\n    // Or has not been customized (default created channel display name)\n    // -> Use the account name\n    if (\n      video.channel.displayName === `Default ${accountName} channel` ||\n      video.channel.displayName === `Main ${accountName} channel` ||\n      video.channel.name.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)\n    ) {\n      return 'account' as 'account'\n    }\n\n    return 'videoChannel' as 'videoChannel'\n  }\n\n  private setVideoRate (id: string, rateType: UserVideoRateType, videoPassword?: string) {\n    const url = `${VideoService.BASE_VIDEO_URL}/${id}/rate`\n    const body: UserVideoRateUpdate = {\n      rating: rateType\n    }\n    const headers = VideoPasswordService.buildVideoPasswordHeader(videoPassword)\n\n    return this.authHttp\n      .put(url, body, { headers })\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor } from '@app/core'\nimport { ResultList, VideoPassword } from '@peertube/peertube-models'\nimport { catchError, map } from 'rxjs'\nimport { VideoService } from './video.service'\n\n@Injectable()\nexport class VideoPasswordService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n\n  static buildVideoPasswordHeader (videoPassword: string) {\n    return videoPassword\n      ? new HttpHeaders().set('x-peertube-video-password', videoPassword)\n      : undefined\n  }\n\n  getVideoPasswords (options: { videoUUID: string }) {\n    return this.authHttp.get<ResultList<VideoPassword>>(`${VideoService.BASE_VIDEO_URL}/${options.videoUUID}/passwords`)\n      .pipe(\n        map(res => res.data),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n}\n"]}