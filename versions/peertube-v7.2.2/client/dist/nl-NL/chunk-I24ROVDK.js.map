{"version":3,"mappings":"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","names":["TwoFactorService","authHttp","inject","HttpClient","restExtractor","RestExtractor","requestTwoFactor","options","userId","currentPassword","url","UserService","BASE_USERS_URL","post","pipe","catchError","err","handleError","confirmTwoFactorRequest","requestToken","otpToken","disableTwoFactor","E","factory","ɵfac","_TwoFactorService","import_debug","Bt","Ht","fe","Te","t","search","Ft","i","ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","ɵɵelement","ɵɵtext","ɵɵi18nStart","ɵɵi18nEnd","n","c","ɵɵadvance","ɵɵproperty","ɵɵpureFunction0","_c0","ɵɵpureFunction1","_c1","ctx_r0","abuse","reporterAccount","displayName","ɵɵtextInterpolate","nameWithHost","ɵɵi18nExp","countReportsForReporter","te","wt","flaggedAccount","countReportsForReportee","Ut","ɵɵtemplate","AbuseDetailsComponent_div_3_a_8_Template","isAdminView","kt","ne","ɵɵpipeBind2","updatedAt","Gt","$implicit","reason_r2","id","label","zt","AbuseDetailsComponent_div_12_a_2_Template","predefinedReasons","Vt","ɵɵelementContainerStart","x","ɵɵtextInterpolate1","endAt","Xt","AbuseDetailsComponent_div_13_ng_container_5_Template","startAt","video","jt","moderationCommentHtml","ɵɵsanitizeHtml","qt","Qt","Wt","AbuseDetailsComponent_div_16_div_1_Template","AbuseDetailsComponent_div_16_my_embed_2_Template","deleted","Yt","commentHTML","AbuseDetailsComponent","input","undefined","predefinedReasonsTranslations","constructor","violentOrRepulsive","$localize","hatefulOrAbusive","spamOrMisleading","privacy","rights","serverRules","thumbnails","captions","ngOnInit","map","r","durationToString","selectors","inputs","decls","vars","consts","i18n_0","i18n_2","d","i18n_5","Ce","AbuseDetailsComponent_div_2_Template","AbuseDetailsComponent_div_3_Template","AbuseDetailsComponent_div_4_Template","AbuseDetailsComponent_div_12_Template","AbuseDetailsComponent_div_13_Template","AbuseDetailsComponent_div_14_Template","AbuseDetailsComponent_div_16_Template","AbuseDetailsComponent_div_17_Template","o","S","ctx","reasonHtml","tmp_8_0","moderationComment","comment","dependencies","NgIf","RouterLink","ActorAvatarComponent","GlobalIconComponent","NgFor","EmbedComponent","PTDatePipe","styles","_AbuseDetailsComponent","Kt","Jt","Zt","en","tn","nn","e","ɵɵpureFunction2","_c2","message_r3","byModerator","ctx_r1","isMessageByMe","account","name","messageHtml","ɵɵpipeBind1","createdAt","on","an","formErrors","message","rn","B","AbuseMessageModalComponent_ng_template_0_ng_container_2_Template","AbuseMessageModalComponent_ng_template_0_ng_container_3_Template","ɵɵlistener","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","hide","AbuseMessageModalComponent_ng_template_0_div_8_Template","AbuseMessageModalComponent_ng_template_0_div_9_Template","addMessage","AbuseMessageModalComponent_ng_template_0_div_13_Template","abuseMessages","noResults","form","getPlaceholderMessage","valid","sendingMessage","AbuseMessageModalComponent","FormReactive","formReactiveService","FormReactiveService","modalService","NgbModal","htmlRenderer","HtmlRendererService","auth","AuthService","notifier","Notifier","abuseService","AbuseService","modal","viewChild","countMessagesUpdated","output","textareaMessage","openedModal","buildForm","ABUSE_MESSAGE_VALIDATOR","openModal","open","centered","loadMessages","close","addAbuseMessage","value","subscribe","next","reset","emit","abuseId","countMessages","length","error","logger","deleteMessage","abuseMessage","deleteAbuseMessage","filter","m","getUser","listAbuseMessages","res","data","push","Object","assign","convertToBr","setTimeout","messagesBlock","document","querySelector","scroll","scrollHeight","__ngFactoryType__","viewQuery","rf","D","H","outputs","features","L","AbuseMessageModalComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","NgClass","FormsModule","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","_AbuseMessageModalComponent","sn","ln","_n","cn","banUser","ModerationCommentModalComponent_ng_template_0_div_10_Template","ModerationCommentModalComponent","commentUpdated","abuseToComment","ABUSE_MODERATION_COMMENT_VALIDATOR","patchValue","updateAbuse","success","ModerationCommentModalComponent_ng_template_0_Template","_ModerationCommentModalComponent","dn","mn","pn","show","un","$event","_r2","ctx_r2","onSearch","inputFilters","gn","Sn","An","AbuseListTableComponent_ng_template_2_th_7_Template","AbuseListTableComponent_ng_template_2_th_18_Template","sortTooltip","En","abuse_r4","ɵɵsanitizeUrl","fn","Tn","AbuseListTableComponent_ng_template_3_td_5_a_1_Template","AbuseListTableComponent_ng_template_3_td_5_span_2_Template","Mn","count","Cn","bn","AbuseListTableComponent_ng_template_3_ng_container_6_td_1_span_3_Template","AbuseListTableComponent_ng_template_3_ng_container_6_td_1_span_4_Template","blacklisted","hn","channel","host","Rn","AbuseListTableComponent_ng_template_3_ng_container_6_td_1_Template","AbuseListTableComponent_ng_template_3_ng_container_6_td_2_Template","vn","In","AbuseListTableComponent_ng_template_3_ng_container_7_div_3_Template","getCommentUrl","Pn","getAccountUrl","nameWithHostForced","Ln","yn","AbuseListTableComponent_ng_template_3_ng_container_8_td_1_Template","AbuseListTableComponent_ng_template_3_ng_container_8_td_2_Template","xn","state","On","Dn","_r5","openAbuseMessagesModal","getSendMessageButtonLabel","Nn","$n","AbuseListTableComponent_ng_template_3_td_5_Template","AbuseListTableComponent_ng_template_3_ng_container_6_Template","AbuseListTableComponent_ng_template_3_ng_container_7_Template","AbuseListTableComponent_ng_template_3_ng_container_8_Template","AbuseListTableComponent_ng_template_3_div_13_Template","AbuseListTableComponent_ng_template_3_div_14_Template","AbuseListTableComponent_ng_template_3_button_16_Template","AbuseListTableComponent_ng_template_3_td_17_Template","expanded","expanded_r6","abuseActions","isAbuseAccepted","isAbuseRejected","isLocalAbuse","Bn","abuse_r7","Hn","Fn","AbuseListTableComponent_ng_template_4_td_1_Template","AbuseListTableComponent_ng_template_4_td_2_Template","wn","Un","kn","AbuseListTableComponent_ng_template_5_ng_container_3_Template","AbuseListTableComponent_ng_template_5_ng_container_4_Template","debugLogger","debug","AbuseListTableComponent","RestTable","route","ActivatedRoute","router","Router","blocklistService","BlocklistService","commentService","VideoCommentService","videoService","VideoService","videoBlocklistService","VideoBlockService","confirmService","ConfirmService","markdownRenderer","MarkdownService","hooks","HooksService","pluginService","PluginService","viewType","abuseMessagesModal","moderationCommentModal","abuses","totalRecords","sort","field","order","pagination","rowsPerPage","start","title","children","__async","addAction","reloadDataInternal","buildInternalActions","buildFlaggedAccountActions","buildCommentActions","buildVideoActions","buildAccountActions","initialize","wrapObject","ngOnDestroy","removeAction","getIdentifier","openModerationCommentModal","onModerationCommentUpdated","reloadData","AbuseState","ACCEPTED","REJECTED","getVideoUrl","Video","buildWatchUrl","threadId","removeAbuse","confirm","updateAbuseState","onCountMessagesUpdated","event","find","a","Actor","IS_LOCAL","formatICU","observable","getAdminAbuses","getUserAbuses","resultList","lastValueFrom","total","toHtml","reason","ownerAccount","Account","textMarkdownToHTML","markdown","text","withHtml","isHeader","handler","isDisplayed","muteAccountHelper","muteServerHelper","blockVideo","videoId","unfederate","isLocal","unblockVideo","removeVideo","deleteVideoComment","blockAccountByInstance","mutedByInstance","blockServerByInstance","f","i18n_12","Fe","Ge","i0","loadLazy","AbuseListTableComponent_ng_template_1_Template","AbuseListTableComponent_ng_template_2_Template","AbuseListTableComponent_ng_template_3_Template","AbuseListTableComponent_ng_template_4_Template","AbuseListTableComponent_ng_template_5_Template","rowsPerPageOptions","getPaginationTemplate","expandedRows","TableModule","Table","PrimeTemplate","SortableColumn","RowToggler","ResizableColumn","SortIcon","SharedModule","AdvancedInputFilterComponent","NgbTooltip","TableExpanderIconComponent","ActionDropdownComponent","VideoCellComponent","AutoColspanDirective","_AbuseListTableComponent","GenericAccountBlocklistComponent","blockedAccounts","unblockAccount","accountBlock","blockedAccount","mode","BlocklistComponentType","unblockAccountByUser","unblockAccountByInstance","getUserAccountBlocklist","getInstanceAccountBlocklist","ɵɵInheritDefinitionFeature","_GenericAccountBlocklistComponent","zn","GenericServerBlocklistComponent","batchDomainsModal","blockedServers","unblockServer","serverBlock","operation","unblockServerByUser","unblockServerByInstance","blockedServer","addServersToBlock","onDomainsToBlock","domains","domain","blockServerByUser","forEach","getUserServerBlocklist","getInstanceServerBlocklist","_GenericServerBlocklistComponent","Vn","Xn","jn","qn","Qn","controls","hosts","errors","validHosts","Wn","BatchDomainsModalComponent_ng_template_0_div_11_div_2_Template","Yn","submit","BatchDomainsModalComponent_ng_template_0_div_11_Template","ɵɵprojection","action","placeholder","_c3","BatchDomainsModalComponent","UNIQUE_HOSTS_VALIDATOR","splitAndGetNotEmpty","ngContentSelectors","BatchDomainsModalComponent_ng_template_0_Template","_BatchDomainsModalComponent","hi","xi","b","Fi","Ki","no"],"ignoreList":[],"sources":["src/app/shared/shared-users/two-factor.service.ts","src/app/shared/shared-abuse-list/abuse-list-table.component.ts","src/app/shared/shared-abuse-list/abuse-details.component.html","src/app/shared/shared-abuse-list/abuse-details.component.ts","src/app/shared/shared-abuse-list/abuse-message-modal.component.html","src/app/shared/shared-abuse-list/abuse-message-modal.component.ts","src/app/shared/shared-abuse-list/moderation-comment-modal.component.html","src/app/shared/shared-abuse-list/moderation-comment-modal.component.ts","src/app/shared/shared-abuse-list/abuse-list-table.component.html","src/app/shared/shared-moderation/account-blocklist.component.ts","src/app/shared/shared-moderation/server-blocklist.component.ts","src/app/shared/shared-moderation/batch-domains-modal.component.html","src/app/shared/shared-moderation/batch-domains-modal.component.ts"],"sourcesContent":["import { catchError } from 'rxjs/operators'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, UserService } from '@app/core'\nimport { TwoFactorEnableResult } from '@peertube/peertube-models'\n\n@Injectable()\nexport class TwoFactorService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n\n  // ---------------------------------------------------------------------------\n\n  requestTwoFactor (options: {\n    userId: number\n    currentPassword: string\n  }) {\n    const { userId, currentPassword } = options\n\n    const url = UserService.BASE_USERS_URL + userId + '/two-factor/request'\n\n    return this.authHttp.post<TwoFactorEnableResult>(url, { currentPassword })\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  confirmTwoFactorRequest (options: {\n    userId: number\n    requestToken: string\n    otpToken: string\n  }) {\n    const { userId, requestToken, otpToken } = options\n\n    const url = UserService.BASE_USERS_URL + userId + '/two-factor/confirm-request'\n\n    return this.authHttp.post(url, { requestToken, otpToken })\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  disableTwoFactor (options: {\n    userId: number\n    currentPassword?: string\n  }) {\n    const { userId, currentPassword } = options\n\n    const url = UserService.BASE_USERS_URL + userId + '/two-factor/disable'\n\n    return this.authHttp.post(url, { currentPassword })\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n}\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, OnDestroy, OnInit, inject, input, viewChild } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { ConfirmService, HooksService, MarkdownService, Notifier, PluginService, RestPagination, RestTable } from '@app/core'\nimport { formatICU } from '@app/helpers'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { AbuseState, AbuseStateType, AdminAbuse } from '@peertube/peertube-models'\nimport { logger } from '@root-helpers/logger'\nimport debug from 'debug'\nimport { SharedModule, SortMeta } from 'primeng/api'\nimport { TableModule } from 'primeng/table'\nimport { lastValueFrom } from 'rxjs'\nimport { ActorAvatarComponent } from '../shared-actor-image/actor-avatar.component'\nimport { AdvancedInputFilter, AdvancedInputFilterComponent } from '../shared-forms/advanced-input-filter.component'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { Account } from '../shared-main/account/account.model'\nimport { Actor } from '../shared-main/account/actor.model'\nimport { ActionDropdownComponent, DropdownAction } from '../shared-main/buttons/action-dropdown.component'\nimport { AutoColspanDirective } from '../shared-main/common/auto-colspan.directive'\nimport { PTDatePipe } from '../shared-main/common/date.pipe'\nimport { Video } from '../shared-main/video/video.model'\nimport { VideoService } from '../shared-main/video/video.service'\nimport { AbuseService } from '../shared-moderation/abuse.service'\nimport { BlocklistService } from '../shared-moderation/blocklist.service'\nimport { VideoBlockService } from '../shared-moderation/video-block.service'\nimport { TableExpanderIconComponent } from '../shared-tables/table-expander-icon.component'\nimport { VideoCellComponent } from '../shared-tables/video-cell.component'\nimport { VideoCommentService } from '../shared-video-comment/video-comment.service'\nimport { AbuseDetailsComponent } from './abuse-details.component'\nimport { AbuseMessageModalComponent } from './abuse-message-modal.component'\nimport { ModerationCommentModalComponent } from './moderation-comment-modal.component'\nimport { ProcessedAbuse } from './processed-abuse.model'\n\nconst debugLogger = debug('peertube:moderation:AbuseListTableComponent')\n\n@Component({\n  selector: 'my-abuse-list-table',\n  templateUrl: './abuse-list-table.component.html',\n  styleUrls: [ '../shared-moderation/moderation.scss', './abuse-list-table.component.scss' ],\n  imports: [\n    TableModule,\n    SharedModule,\n    AdvancedInputFilterComponent,\n    NgIf,\n    NgbTooltip,\n    TableExpanderIconComponent,\n    ActionDropdownComponent,\n    NgClass,\n    ActorAvatarComponent,\n    VideoCellComponent,\n    GlobalIconComponent,\n    AutoColspanDirective,\n    AbuseDetailsComponent,\n    ModerationCommentModalComponent,\n    AbuseMessageModalComponent,\n    PTDatePipe\n  ]\n})\nexport class AbuseListTableComponent extends RestTable implements OnInit, OnDestroy {\n  protected route = inject(ActivatedRoute)\n  protected router = inject(Router)\n  private notifier = inject(Notifier)\n  private abuseService = inject(AbuseService)\n  private blocklistService = inject(BlocklistService)\n  private commentService = inject(VideoCommentService)\n  private videoService = inject(VideoService)\n  private videoBlocklistService = inject(VideoBlockService)\n  private confirmService = inject(ConfirmService)\n  private markdownRenderer = inject(MarkdownService)\n  private hooks = inject(HooksService)\n  private pluginService = inject(PluginService)\n\n  readonly viewType = input<'admin' | 'user'>(undefined)\n\n  readonly abuseMessagesModal = viewChild<AbuseMessageModalComponent>('abuseMessagesModal')\n  readonly moderationCommentModal = viewChild<ModerationCommentModalComponent>('moderationCommentModal')\n\n  abuses: ProcessedAbuse[] = []\n  totalRecords = 0\n  sort: SortMeta = { field: 'createdAt', order: 1 }\n  pagination: RestPagination = { count: this.rowsPerPage, start: 0 }\n\n  abuseActions: DropdownAction<ProcessedAbuse>[][] = []\n\n  inputFilters: AdvancedInputFilter[] = [\n    {\n      title: $localize`Advanced filters`,\n      children: [\n        {\n          value: 'state:pending',\n          label: $localize`Unsolved reports`\n        },\n        {\n          value: 'state:accepted',\n          label: $localize`Accepted reports`\n        },\n        {\n          value: 'state:rejected',\n          label: $localize`Refused reports`\n        },\n        {\n          value: 'videoIs:blacklisted',\n          label: $localize`Reports with blocked videos`\n        },\n        {\n          value: 'videoIs:deleted',\n          label: $localize`Reports with deleted videos`\n        }\n      ]\n    }\n  ]\n\n  async ngOnInit () {\n    const viewType = this.viewType()\n    if (viewType === 'admin') {\n      this.pluginService.addAction('admin-abuse-list:load-data', () => this.reloadDataInternal())\n    }\n\n    const abuseActions: DropdownAction<ProcessedAbuse>[][] = [\n      this.buildInternalActions(),\n\n      this.buildFlaggedAccountActions(),\n\n      this.buildCommentActions(),\n\n      this.buildVideoActions(),\n\n      this.buildAccountActions()\n    ]\n\n    this.initialize()\n\n    this.abuseActions = viewType === 'admin'\n      ? await this.hooks.wrapObject(abuseActions, 'admin-comments', 'filter:admin-abuse-list.actions.create.result')\n      : abuseActions\n  }\n\n  ngOnDestroy () {\n    if (this.viewType() === 'admin') {\n      this.pluginService.removeAction('admin-abuse-list:load-data')\n    }\n  }\n\n  isAdminView () {\n    return this.viewType() === 'admin'\n  }\n\n  getIdentifier () {\n    return 'AbuseListTableComponent'\n  }\n\n  openModerationCommentModal (abuse: AdminAbuse) {\n    this.moderationCommentModal().openModal(abuse)\n  }\n\n  onModerationCommentUpdated () {\n    this.reloadData()\n  }\n\n  isAbuseAccepted (abuse: AdminAbuse) {\n    return abuse.state.id === AbuseState.ACCEPTED\n  }\n\n  isAbuseRejected (abuse: AdminAbuse) {\n    return abuse.state.id === AbuseState.REJECTED\n  }\n\n  getVideoUrl (abuse: AdminAbuse) {\n    return Video.buildWatchUrl(abuse.video)\n  }\n\n  getCommentUrl (abuse: AdminAbuse) {\n    return Video.buildWatchUrl(abuse.comment.video) + ';threadId=' + abuse.comment.threadId\n  }\n\n  getAccountUrl (abuse: ProcessedAbuse) {\n    return '/a/' + abuse.flaggedAccount.nameWithHost\n  }\n\n  async removeAbuse (abuse: AdminAbuse) {\n    const res = await this.confirmService.confirm($localize`Do you really want to delete this abuse report?`, $localize`Delete`)\n    if (res === false) return\n\n    this.abuseService.removeAbuse(abuse)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Abuse deleted.`)\n          this.reloadData()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  updateAbuseState (abuse: AdminAbuse, state: AbuseStateType) {\n    this.abuseService.updateAbuse(abuse, { state })\n      .subscribe({\n        next: () => this.reloadData(),\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  onCountMessagesUpdated (event: { abuseId: number, countMessages: number }) {\n    const abuse = this.abuses.find(a => a.id === event.abuseId)\n\n    if (!abuse) {\n      logger.error(`Cannot find abuse ${event.abuseId}`)\n      return\n    }\n\n    abuse.countMessages = event.countMessages\n  }\n\n  openAbuseMessagesModal (abuse: AdminAbuse) {\n    this.abuseMessagesModal().openModal(abuse)\n  }\n\n  isLocalAbuse (abuse: AdminAbuse) {\n    if (this.viewType() === 'user') return true\n    if (!abuse.reporterAccount) return false\n\n    return Actor.IS_LOCAL(abuse.reporterAccount.host)\n  }\n\n  getSendMessageButtonLabel (abuse: AdminAbuse) {\n    if (this.viewType() === 'admin') {\n      return formatICU(\n        $localize`Send a message to the reporter (currently {count, plural, =1 {{count} message} other {{count} messages}})`,\n        { count: abuse.countMessages }\n      )\n    }\n\n    return formatICU(\n      $localize`Send a message to the admins/moderators (currently {count, plural, =1 {{count} message} other {{count} messages}})`,\n      { count: abuse.countMessages }\n    )\n  }\n\n  protected async reloadDataInternal () {\n    debugLogger('Loading data.')\n\n    const options = {\n      pagination: this.pagination,\n      sort: this.sort,\n      search: this.search\n    }\n\n    const observable = this.viewType() === 'admin'\n      ? this.abuseService.getAdminAbuses(options)\n      : this.abuseService.getUserAbuses(options)\n\n    try {\n      const resultList = await lastValueFrom(observable)\n\n      this.totalRecords = resultList.total\n\n      this.abuses = []\n\n      for (const a of resultList.data) {\n        const abuse = a as ProcessedAbuse\n\n        abuse.reasonHtml = await this.toHtml(abuse.reason)\n\n        if (abuse.moderationComment) {\n          abuse.moderationCommentHtml = await this.toHtml(abuse.moderationComment)\n        }\n\n        if (abuse.video) {\n          if (abuse.video.channel?.ownerAccount) {\n            abuse.video.channel.ownerAccount = new Account(abuse.video.channel.ownerAccount)\n          }\n        }\n\n        if (abuse.comment) {\n          if (abuse.comment.deleted) {\n            abuse.commentHTML = $localize`Deleted comment`\n          } else {\n            abuse.commentHTML = await this.markdownRenderer.textMarkdownToHTML({ markdown: abuse.comment.text, withHtml: true })\n          }\n        }\n\n        if (abuse.reporterAccount) {\n          abuse.reporterAccount = new Account(abuse.reporterAccount)\n        }\n\n        if (abuse.flaggedAccount) {\n          abuse.flaggedAccount = new Account(abuse.flaggedAccount)\n        }\n\n        if (abuse.updatedAt === abuse.createdAt) delete abuse.updatedAt\n\n        this.abuses.push(abuse)\n      }\n    } catch (err) {\n      this.notifier.error(err.message)\n    }\n  }\n\n  private buildInternalActions (): DropdownAction<ProcessedAbuse>[] {\n    return [\n      {\n        label: $localize`Internal actions`,\n        isHeader: true\n      },\n      {\n        label: this.isAdminView()\n          ? $localize`Messages with reporter`\n          : $localize`Messages with moderators`,\n        handler: abuse => this.openAbuseMessagesModal(abuse),\n        isDisplayed: abuse => this.isLocalAbuse(abuse)\n      },\n      {\n        label: $localize`Update internal note`,\n        handler: abuse => this.openModerationCommentModal(abuse),\n        isDisplayed: abuse => this.isAdminView() && !!abuse.moderationComment\n      },\n      {\n        label: $localize`Mark as accepted`,\n        handler: abuse => this.updateAbuseState(abuse, AbuseState.ACCEPTED),\n        isDisplayed: abuse => this.isAdminView() && !this.isAbuseAccepted(abuse)\n      },\n      {\n        label: $localize`Mark as rejected`,\n        handler: abuse => this.updateAbuseState(abuse, AbuseState.REJECTED),\n        isDisplayed: abuse => this.isAdminView() && !this.isAbuseRejected(abuse)\n      },\n      {\n        label: $localize`Add internal note`,\n        handler: abuse => this.openModerationCommentModal(abuse),\n        isDisplayed: abuse => this.isAdminView() && !abuse.moderationComment\n      },\n      {\n        label: $localize`Delete report`,\n        handler: abuse => this.removeAbuse(abuse),\n        isDisplayed: () => this.isAdminView()\n      }\n    ]\n  }\n\n  private buildFlaggedAccountActions (): DropdownAction<ProcessedAbuse>[] {\n    if (!this.isAdminView()) return []\n\n    return [\n      {\n        label: $localize`Actions for the flagged account`,\n        isHeader: true,\n        isDisplayed: abuse => abuse.flaggedAccount && !abuse.comment && !abuse.video\n      },\n\n      {\n        label: $localize`Mute account`,\n        isDisplayed: abuse => abuse.flaggedAccount && !abuse.comment && !abuse.video,\n        handler: abuse => this.muteAccountHelper(abuse.flaggedAccount)\n      },\n\n      {\n        label: $localize`Mute server account`,\n        isDisplayed: abuse => abuse.flaggedAccount && !abuse.comment && !abuse.video,\n        handler: abuse => this.muteServerHelper(abuse.flaggedAccount.host)\n      }\n    ]\n  }\n\n  private buildAccountActions (): DropdownAction<ProcessedAbuse>[] {\n    if (!this.isAdminView()) return []\n\n    return [\n      {\n        label: $localize`Actions for the reporter`,\n        isHeader: true,\n        isDisplayed: abuse => !!abuse.reporterAccount\n      },\n\n      {\n        label: $localize`Mute reporter`,\n        isDisplayed: abuse => !!abuse.reporterAccount,\n        handler: abuse => this.muteAccountHelper(abuse.reporterAccount)\n      },\n\n      {\n        label: $localize`Mute server`,\n        isDisplayed: abuse => abuse.reporterAccount && !abuse.reporterAccount.userId,\n        handler: abuse => this.muteServerHelper(abuse.reporterAccount.host)\n      }\n    ]\n  }\n\n  private buildVideoActions (): DropdownAction<ProcessedAbuse>[] {\n    if (!this.isAdminView()) return []\n\n    return [\n      {\n        label: $localize`Actions for the video`,\n        isHeader: true,\n        isDisplayed: abuse => abuse.video && !abuse.video.deleted\n      },\n      {\n        label: $localize`Block video`,\n        isDisplayed: abuse => abuse.video && !abuse.video.deleted && !abuse.video.blacklisted,\n        handler: abuse => {\n          this.videoBlocklistService.blockVideo([ { videoId: abuse.video.id, unfederate: abuse.video.channel.isLocal } ])\n            .subscribe({\n              next: () => {\n                this.notifier.success($localize`Video blocked.`)\n\n                this.updateAbuseState(abuse, AbuseState.ACCEPTED)\n              },\n\n              error: err => this.notifier.error(err.message)\n            })\n        }\n      },\n      {\n        label: $localize`Unblock video`,\n        isDisplayed: abuse => abuse.video && !abuse.video.deleted && abuse.video.blacklisted,\n        handler: abuse => {\n          this.videoBlocklistService.unblockVideo(abuse.video.id)\n            .subscribe({\n              next: () => {\n                this.notifier.success($localize`Video unblocked.`)\n\n                this.updateAbuseState(abuse, AbuseState.ACCEPTED)\n              },\n\n              error: err => this.notifier.error(err.message)\n            })\n        }\n      },\n      {\n        label: $localize`Delete video`,\n        isDisplayed: abuse => abuse.video && !abuse.video.deleted,\n        handler: async abuse => {\n          const res = await this.confirmService.confirm(\n            $localize`Do you really want to delete this video?`,\n            $localize`Delete`\n          )\n          if (res === false) return\n\n          this.videoService.removeVideo(abuse.video.id)\n            .subscribe({\n              next: () => {\n                this.notifier.success($localize`Video deleted.`)\n\n                this.updateAbuseState(abuse, AbuseState.ACCEPTED)\n              },\n\n              error: err => this.notifier.error(err.message)\n            })\n        }\n      }\n    ]\n  }\n\n  private buildCommentActions (): DropdownAction<ProcessedAbuse>[] {\n    if (!this.isAdminView()) return []\n\n    return [\n      {\n        label: $localize`Actions for the comment`,\n        isHeader: true,\n        isDisplayed: abuse => abuse.comment && !abuse.comment.deleted\n      },\n\n      {\n        label: $localize`Delete comment`,\n        isDisplayed: abuse => abuse.comment && !abuse.comment.deleted,\n        handler: async abuse => {\n          const res = await this.confirmService.confirm(\n            $localize`Do you really want to delete this comment?`,\n            $localize`Delete`\n          )\n          if (res === false) return\n\n          this.commentService.deleteVideoComment(abuse.comment.video.id, abuse.comment.id)\n            .subscribe({\n              next: () => {\n                this.notifier.success($localize`Comment deleted.`)\n\n                this.updateAbuseState(abuse, AbuseState.ACCEPTED)\n              },\n\n              error: err => this.notifier.error(err.message)\n            })\n        }\n      }\n    ]\n  }\n\n  private muteAccountHelper (account: Account) {\n    this.blocklistService.blockAccountByInstance(account)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Account ${account.nameWithHost} muted by your platform.`)\n          account.mutedByInstance = true\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  private muteServerHelper (host: string) {\n    this.blocklistService.blockServerByInstance(host)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`${host} muted by your platform.`)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  private toHtml (text: string) {\n    return this.markdownRenderer.textMarkdownToHTML({ markdown: text })\n  }\n}\n","<div class=\"d-flex moderation-expanded\">\n  <!-- report left part (report details) -->\n  <div class=\"left\">\n\n    <!-- report metadata -->\n    <div class=\"d-flex\" *ngIf=\"isAdminView() && abuse().reporterAccount\">\n      <span class=\"moderation-expanded-label\" i18n>Reporter</span>\n\n      <span class=\"moderation-expanded-text\">\n        <a [routerLink]=\"[ '.' ]\" [queryParams]=\"{ 'search': 'reporter:&quot;' + abuse().reporterAccount.displayName + '&quot;' }\"\n          class=\"chip me-1\"\n        >\n          <my-actor-avatar size=\"18\" [actor]=\"abuse().reporterAccount\" actorType=\"account\"></my-actor-avatar>\n          <span class=\"muted\">{{ abuse().reporterAccount.nameWithHost }}</span>\n        </a>\n\n        <a [routerLink]=\"[ '.' ]\" [queryParams]=\"{ 'search': 'reporter:&quot;' + abuse().reporterAccount.displayName + '&quot;' }\"\n          class=\"ms-auto muted abuse-details-links\" i18n\n        >\n          {abuse().countReportsForReporter, plural, =1 {1 report} other {{{ abuse().countReportsForReporter }} reports}}\n          <my-global-icon iconName=\"flag\"></my-global-icon>\n        </a>\n      </span>\n    </div>\n\n    <div class=\"d-flex\" *ngIf=\"abuse().flaggedAccount\">\n      <span class=\"moderation-expanded-label\" i18n>Reportee</span>\n      <span class=\"moderation-expanded-text\">\n        <a [routerLink]=\"[ '.' ]\" [queryParams]=\"{ 'search': 'reportee:&quot;' +abuse().flaggedAccount.displayName + '&quot;' }\"\n          class=\"chip me-1\"\n        >\n          <my-actor-avatar size=\"18\" [actor]=\"abuse().flaggedAccount\" actorType=\"account\"></my-actor-avatar>\n          <span class=\"muted\">{{ abuse().flaggedAccount ? abuse().flaggedAccount.nameWithHost : '' }}</span>\n        </a>\n\n        <a *ngIf=\"isAdminView()\" [routerLink]=\"[ '.' ]\" [queryParams]=\"{ 'search': 'reportee:&quot;' +abuse().flaggedAccount.displayName + '&quot;' }\"\n          class=\"ms-auto muted abuse-details-links\" i18n\n        >\n          {abuse().countReportsForReportee, plural, =1 {1 report} other {{{ abuse().countReportsForReportee }} reports}}\n          <my-global-icon iconName=\"flag\"></my-global-icon>\n        </a>\n      </span>\n    </div>\n\n    <div class=\"d-flex\" *ngIf=\"abuse().updatedAt\">\n      <span class=\"moderation-expanded-label\" i18n>Updated</span>\n      <time class=\"moderation-expanded-text abuse-details-date-updated\">{{ abuse().updatedAt | ptDate: 'medium' }}</time>\n    </div>\n\n    <!-- report text -->\n    <div class=\"mt-3 d-flex\">\n      <span class=\"moderation-expanded-label\">\n        <ng-container i18n>Report</ng-container>\n        <a [routerLink]=\"[ '.' ]\" [queryParams]=\"{ 'search': '#' + abuse().id  }\" class=\"ms-1 muted\">#{{ abuse().id }}</a>\n      </span>\n      <span class=\"moderation-expanded-text\" [innerHTML]=\"abuse().reasonHtml\"></span>\n    </div>\n\n    <div *ngIf=\"predefinedReasons\" class=\"mt-2 d-flex\">\n      <span>\n        <a *ngFor=\"let reason of predefinedReasons\"  [routerLink]=\"[ '.' ]\"\n          [queryParams]=\"{ 'search': 'tag:' + reason.id  }\" class=\"pt-badge badge-secondary\"\n        >\n          <div>{{ reason.label }}</div>\n        </a>\n      </span>\n    </div>\n\n    <div *ngIf=\"abuse().video?.startAt\" class=\"mt-2 d-flex\">\n      <span class=\"moderation-expanded-label\" i18n>Reported part</span>\n      <span>\n        {{ startAt }}<ng-container *ngIf=\"abuse().video.endAt\"> - {{ endAt }}</ng-container>\n      </span>\n    </div>\n\n    <div class=\"mt-3 d-flex\" *ngIf=\"isAdminView() && abuse().moderationComment\">\n      <span class=\"moderation-expanded-label\" i18n>Note</span>\n      <span class=\"moderation-expanded-text d-block\" [innerHTML]=\"abuse().moderationCommentHtml\"></span>\n    </div>\n\n  </div>\n\n  <!-- report right part (video/comment details) -->\n  <div class=\"right\">\n    <div *ngIf=\"abuse().video\">\n      <div *ngIf=\"abuse().video.deleted\" i18n>The video was deleted</div>\n      <my-embed *ngIf=\"!abuse().video.deleted\" [video]=\"abuse().video\"></my-embed>\n    </div>\n\n    <div *ngIf=\"abuse().comment\" class=\"comment-html\">\n      <div>\n        <strong i18n>Comment:</strong>\n      </div>\n\n      <div [innerHTML]=\"abuse().commentHTML\"></div>\n    </div>\n  </div>\n</div>\n","import { NgFor, NgIf } from '@angular/common'\nimport { Component, OnInit, input } from '@angular/core'\nimport { RouterLink } from '@angular/router'\nimport { durationToString } from '@app/helpers'\nimport { AbusePredefinedReasonsString } from '@peertube/peertube-models'\nimport { ActorAvatarComponent } from '../shared-actor-image/actor-avatar.component'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { PTDatePipe } from '../shared-main/common/date.pipe'\nimport { EmbedComponent } from '../shared-main/video/embed.component'\nimport { ProcessedAbuse } from './processed-abuse.model'\n\n@Component({\n  selector: 'my-abuse-details',\n  templateUrl: './abuse-details.component.html',\n  styleUrls: [ '../shared-moderation/moderation.scss', './abuse-details.component.scss' ],\n  imports: [ NgIf, RouterLink, ActorAvatarComponent, GlobalIconComponent, NgFor, EmbedComponent, PTDatePipe ]\n})\nexport class AbuseDetailsComponent implements OnInit {\n  readonly abuse = input<ProcessedAbuse>(undefined)\n  readonly isAdminView = input<boolean>(undefined)\n\n  predefinedReasons: { id: string, label: string }[]\n  private predefinedReasonsTranslations: { [key in AbusePredefinedReasonsString]: string }\n\n  constructor () {\n    this.predefinedReasonsTranslations = {\n      violentOrRepulsive: $localize`Violent or Repulsive`,\n      hatefulOrAbusive: $localize`Hateful or Abusive`,\n      spamOrMisleading: $localize`Spam or Misleading`,\n      privacy: $localize`Privacy`,\n      rights: $localize`Copyright`,\n      serverRules: $localize`Server rules`,\n      thumbnails: $localize`Thumbnails`,\n      captions: $localize`Captions`\n    }\n  }\n\n  ngOnInit (): void {\n    const abuse = this.abuse()\n    if (!abuse.predefinedReasons) return\n\n    this.predefinedReasons = abuse.predefinedReasons.map(r => ({\n      id: r,\n      label: this.predefinedReasonsTranslations[r]\n    }))\n  }\n\n  get startAt () {\n    return durationToString(this.abuse().video.startAt)\n  }\n\n  get endAt () {\n    return durationToString(this.abuse().video.endAt)\n  }\n}\n","<ng-template #modal>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\">\n      <ng-container i18n *ngIf=\"isAdminView()\">Messages with the reporter</ng-container>\n      <ng-container i18n *ngIf=\"!isAdminView()\">Messages with the moderation team</ng-container>\n    </h4>\n\n    <button class=\"border-0 p-0\" title=\"Close this modal\" i18n-title (click)=\"hide()\">\n      <my-global-icon iconName=\"cross\"></my-global-icon>\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n    <div class=\"messages\">\n      <div\n        *ngFor=\"let message of abuseMessages\"\n        class=\"message-block\" [ngClass]=\"{ 'by-moderator': message.byModerator, 'by-me': isMessageByMe(message) }\"\n      >\n\n        <div class=\"author\">{{ message.account.name }}</div>\n\n        <div class=\"bubble\">\n          <div class=\"content\" [innerHTML]=\"message.messageHtml\"></div>\n          <div class=\"date\">{{ message.createdAt | ptDate }}</div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"no-messages\" *ngIf=\"noResults\" i18n>\n      No messages for now.\n    </div>\n\n    <form novalidate [formGroup]=\"form\" (ngSubmit)=\"addMessage()\">\n      <div class=\"form-group\">\n        <textarea\n          formControlName=\"message\" ngbAutofocus [placeholder]=\"getPlaceholderMessage()\"\n          [ngClass]=\"{ 'input-error': formErrors['message'] }\" class=\"form-control\"\n        ></textarea>\n\n        <div *ngIf=\"formErrors.message\" class=\"form-error\" role=\"alert\">\n          {{ formErrors.message }}\n        </div>\n      </div>\n\n      <div class=\"form-group inputs\">\n        <input type=\"submit\" i18n-value value=\"Add a message\" class=\"peertube-button primary-button\" [disabled]=\"!form.valid || sendingMessage\">\n      </div>\n    </form>\n\n  </div>\n\n</ng-template>\n","import { NgClass, NgFor, NgIf } from '@angular/common'\nimport { Component, OnInit, inject, input, output, viewChild } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { AuthService, HtmlRendererService, Notifier } from '@app/core'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap/modal/modal-ref'\nimport { AbuseMessage, UserAbuse } from '@peertube/peertube-models'\nimport { logger } from '@root-helpers/logger'\nimport { ABUSE_MESSAGE_VALIDATOR } from '../form-validators/abuse-validators'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { PTDatePipe } from '../shared-main/common/date.pipe'\nimport { AbuseService } from '../shared-moderation/abuse.service'\n\n@Component({\n  selector: 'my-abuse-message-modal',\n  templateUrl: './abuse-message-modal.component.html',\n  styleUrls: [ './abuse-message-modal.component.scss' ],\n  imports: [ NgIf, GlobalIconComponent, NgFor, NgClass, FormsModule, ReactiveFormsModule, PTDatePipe ]\n})\nexport class AbuseMessageModalComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private modalService = inject(NgbModal)\n  private htmlRenderer = inject(HtmlRendererService)\n  private auth = inject(AuthService)\n  private notifier = inject(Notifier)\n  private abuseService = inject(AbuseService)\n\n  readonly modal = viewChild<NgbModal>('modal')\n\n  readonly isAdminView = input<boolean>(undefined)\n\n  readonly countMessagesUpdated = output<{\n    abuseId: number\n    countMessages: number\n  }>()\n\n  abuseMessages: (AbuseMessage & { messageHtml: string })[] = []\n  textareaMessage: string\n  sendingMessage = false\n  noResults = false\n\n  private openedModal: NgbModalRef\n  private abuse: UserAbuse\n\n  ngOnInit () {\n    this.buildForm({\n      message: ABUSE_MESSAGE_VALIDATOR\n    })\n  }\n\n  openModal (abuse: UserAbuse) {\n    this.abuse = abuse\n\n    this.openedModal = this.modalService.open(this.modal(), { centered: true })\n\n    this.loadMessages()\n  }\n\n  hide () {\n    this.abuseMessages = []\n    this.openedModal.close()\n  }\n\n  addMessage () {\n    this.sendingMessage = true\n\n    this.abuseService.addAbuseMessage(this.abuse, this.form.value['message'])\n      .subscribe({\n        next: () => {\n          this.form.reset()\n          this.sendingMessage = false\n          this.countMessagesUpdated.emit({ abuseId: this.abuse.id, countMessages: this.abuseMessages.length + 1 })\n\n          this.loadMessages()\n        },\n\n        error: err => {\n          this.sendingMessage = false\n          logger.error(err)\n          this.notifier.error('Sorry but you cannot send this message. Please retry later')\n        }\n      })\n  }\n\n  deleteMessage (abuseMessage: AbuseMessage) {\n    this.abuseService.deleteAbuseMessage(this.abuse, abuseMessage)\n      .subscribe({\n        next: () => {\n          this.countMessagesUpdated.emit({ abuseId: this.abuse.id, countMessages: this.abuseMessages.length - 1 })\n\n          this.abuseMessages = this.abuseMessages.filter(m => m.id !== abuseMessage.id)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  isMessageByMe (abuseMessage: AbuseMessage) {\n    return this.auth.getUser().account.id === abuseMessage.account.id\n  }\n\n  getPlaceholderMessage () {\n    if (this.isAdminView()) {\n      return $localize`Add a message to communicate with the reporter`\n    }\n\n    return $localize`Add a message to communicate with the moderation team`\n  }\n\n  private loadMessages () {\n    this.abuseService.listAbuseMessages(this.abuse)\n      .subscribe({\n        next: res => {\n          this.abuseMessages = []\n\n          for (const m of res.data) {\n            this.abuseMessages.push(Object.assign(m, {\n              messageHtml: this.htmlRenderer.convertToBr(m.message)\n            }))\n          }\n\n          this.noResults = this.abuseMessages.length === 0\n\n          setTimeout(() => {\n            // Don't use ViewChild: it is not supported inside a ng-template\n            const messagesBlock = document.querySelector('.messages')\n            messagesBlock.scroll(0, messagesBlock.scrollHeight)\n          })\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n}\n","<ng-template #modal>\n  <div class=\"modal-header\">\n    <h4 i18n class=\"modal-title\">Moderation comment</h4>\n\n    <button class=\"border-0 p-0\" title=\"Close this modal\" i18n-title (click)=\"hide()\">\n      <my-global-icon iconName=\"cross\"></my-global-icon>\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n    <form novalidate [formGroup]=\"form\" (ngSubmit)=\"banUser()\">\n      <div class=\"form-group\">\n        <textarea\n          formControlName=\"moderationComment\" ngbAutofocus i18-placeholder placeholder=\"Comment this report…\"\n          [ngClass]=\"{ 'input-error': formErrors['moderationComment'] }\" class=\"form-control\">\n        </textarea>\n        <div *ngIf=\"formErrors.moderationComment\" class=\"form-error\" role=\"alert\">\n          {{ formErrors.moderationComment }}\n        </div>\n      </div>\n\n      <div class=\"form-group\" i18n>\n        This comment can only be seen by you or the other moderators.\n      </div>\n\n      <div class=\"form-group inputs\">\n        <input\n          type=\"button\" role=\"button\" i18n-value value=\"Cancel\" class=\"peertube-button secondary-button\"\n          (click)=\"hide()\" (key.enter)=\"hide()\"\n        >\n\n        <input type=\"submit\" i18n-value value=\"Update this comment\" class=\"peertube-button primary-button\" [disabled]=\"!form.valid\" />\n      </div>\n    </form>\n  </div>\n\n</ng-template>\n","import { Component, OnInit, inject, output, viewChild } from '@angular/core'\nimport { Notifier } from '@app/core'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap/modal/modal-ref'\nimport { AdminAbuse } from '@peertube/peertube-models'\nimport { ABUSE_MODERATION_COMMENT_VALIDATOR } from '../form-validators/abuse-validators'\nimport { NgClass, NgIf } from '@angular/common'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { AbuseService } from '../shared-moderation/abuse.service'\n\n@Component({\n  selector: 'my-moderation-comment-modal',\n  templateUrl: './moderation-comment-modal.component.html',\n  styleUrls: [ './moderation-comment-modal.component.scss' ],\n  imports: [ GlobalIconComponent, FormsModule, ReactiveFormsModule, NgClass, NgIf ]\n})\nexport class ModerationCommentModalComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private modalService = inject(NgbModal)\n  private notifier = inject(Notifier)\n  private abuseService = inject(AbuseService)\n\n  readonly modal = viewChild<NgbModal>('modal')\n  readonly commentUpdated = output<string>()\n\n  private abuseToComment: AdminAbuse\n  private openedModal: NgbModalRef\n\n  ngOnInit () {\n    this.buildForm({\n      moderationComment: ABUSE_MODERATION_COMMENT_VALIDATOR\n    })\n  }\n\n  openModal (abuseToComment: AdminAbuse) {\n    this.abuseToComment = abuseToComment\n    this.openedModal = this.modalService.open(this.modal(), { centered: true })\n\n    this.form.patchValue({\n      moderationComment: this.abuseToComment.moderationComment\n    })\n  }\n\n  hide () {\n    this.abuseToComment = undefined\n    this.openedModal.close()\n    this.form.reset()\n  }\n\n  banUser () {\n    const moderationComment: string = this.form.value['moderationComment']\n\n    this.abuseService.updateAbuse(this.abuseToComment, { moderationComment })\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Comment updated.`)\n\n          this.commentUpdated.emit(moderationComment)\n          this.hide()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n}\n","<p-table\n  [value]=\"abuses\" [paginator]=\"totalRecords > 0\" [totalRecords]=\"totalRecords\" [rows]=\"rowsPerPage\" [first]=\"pagination.start\"\n  [rowsPerPageOptions]=\"rowsPerPageOptions\" [sortField]=\"sort.field\" [sortOrder]=\"sort.order\" dataKey=\"id\" [resizableColumns]=\"true\"\n  [lazy]=\"true\" (onLazyLoad)=\"loadLazy($event)\" [lazyLoadOnInit]=\"false\"\n  [showCurrentPageReport]=\"true\" [currentPageReportTemplate]=\"getPaginationTemplate()\" [expandedRowKeys]=\"expandedRows\"\n>\n  <ng-template pTemplate=\"caption\">\n    <div class=\"caption\">\n      <div class=\"ms-auto\">\n        <my-advanced-input-filter [filters]=\"inputFilters\" (search)=\"onSearch($event)\"></my-advanced-input-filter>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\">\n    <tr> <!-- header -->\n      <th scope=\"col\" style=\"width: 40px;\">\n        <span i18n class=\"visually-hidden\">More information</span>\n      </th>\n      <th scope=\"col\" style=\"width: 70px;\">\n        <span i18n class=\"visually-hidden\">Actions</span>\n      </th>\n      <th scope=\"col\" *ngIf=\"isAdminView()\" style=\"width: 20%;\" pResizableColumn i18n>Reporter</th>\n      <th scope=\"col\" i18n>Video/Comment/Account</th>\n      <th scope=\"col\" style=\"width: 150px;\" i18n [ngbTooltip]=\"sortTooltip\" container=\"body\" pSortableColumn=\"createdAt\">Created <p-sortIcon field=\"createdAt\"></p-sortIcon></th>\n      <th scope=\"col\" i18n [ngbTooltip]=\"sortTooltip\" container=\"body\" pSortableColumn=\"state\" style=\"width: 80px;\">State <p-sortIcon field=\"state\"></p-sortIcon></th>\n      <th scope=\"col\" i18n style=\"width: 80px;\">Messages</th>\n      <th scope=\"col\" i18n *ngIf=\"isAdminView()\" style=\"width: 100px;\">Internal note</th>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"body\" let-expanded=\"expanded\" let-abuse>\n    <tr>\n      <td class=\"expand-cell\">\n        <my-table-expander-icon [pRowToggler]=\"abuse\" [expanded]=\"expanded\"></my-table-expander-icon>\n      </td>\n\n      <td class=\"action-cell\">\n        <my-action-dropdown\n          [ngClass]=\"{ 'show': expanded }\" placement=\"bottom-right top-right left auto\" container=\"body\"\n          [actions]=\"abuseActions\" [entry]=\"abuse\" buttonSize=\"small\"\n        ></my-action-dropdown>\n      </td>\n\n      <td *ngIf=\"isAdminView()\">\n        <a *ngIf=\"abuse.reporterAccount\" [href]=\"abuse.reporterAccount.url\" i18n-title title=\"Open account in a new tab\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <div class=\"chip two-lines\">\n            <my-actor-avatar [actor]=\"abuse.reporterAccount\" actorType=\"account\" size=\"32\"></my-actor-avatar>\n            <div>\n              {{ abuse.reporterAccount.displayName }}\n              <span>{{ abuse.reporterAccount.nameWithHost }}</span>\n            </div>\n          </div>\n        </a>\n\n        <span i18n *ngIf=\"!abuse.reporterAccount\">\n          Deleted account\n        </span>\n      </td>\n\n      <ng-container *ngIf=\"abuse.video\">\n\n        <td *ngIf=\"!abuse.video.deleted\">\n          <my-video-cell [video]=\"abuse.video\" size=\"small\">\n            <div>\n              <span *ngIf=\"abuse.count > 1\" class=\"pt-badge badge-secondary me-1\" i18n-title title=\"This video has been reported multiple times\" i18n>\n                {abuse.count, plural, =1 {1 abuse} other {{{ abuse.count }} abuses}}\n              </span>\n\n              <span *ngIf=\"abuse.video.blacklisted\" class=\"pt-badge badge-red\" i18n-title title=\"The video is blocked\" i18n>Blocked</span>\n            </div>\n          </my-video-cell>\n        </td>\n\n        <td *ngIf=\"abuse.video.deleted\" class=\"c-hand\" [pRowToggler]=\"abuse\">\n          <div class=\"table-video\" i18n-title title=\"Video was deleted\">\n            <div class=\"table-video-text\">\n              <div>\n                {{ abuse.video.name }}\n\n                <span i18n class=\"pt-badge badge-secondary ms-1\">Deleted video</span>\n              </div>\n\n              <div class=\"video-owner\" i18n>by {{ abuse.video.channel?.displayName }} on {{ abuse.video.channel?.host }} </div>\n            </div>\n          </div>\n        </td>\n      </ng-container>\n\n      <ng-container *ngIf=\"abuse.comment\">\n        <td>\n          <a\n            [href]=\"getCommentUrl(abuse)\" [innerHTML]=\"abuse.commentHTML\" class=\"table-comment-link ellipsis-multiline-1\"\n            [title]=\"abuse.comment.video.name\" target=\"_blank\" rel=\"noopener noreferrer\"\n          ></a>\n\n          <div class=\"comment-flagged-account\" *ngIf=\"abuse.flaggedAccount\">by {{ abuse.flaggedAccount.displayName }}</div>\n        </td>\n      </ng-container>\n\n      <ng-container *ngIf=\"!abuse.comment && !abuse.video\">\n        <td *ngIf=\"abuse.flaggedAccount\">\n          <a [href]=\"getAccountUrl(abuse)\"  class=\"table-account-link\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <span>{{ abuse.flaggedAccount.displayName }}</span>\n\n            <span class=\"account-flagged-handle\">{{ abuse.flaggedAccount.nameWithHostForced }}</span>\n          </a>\n        </td>\n\n        <td i18n *ngIf=\"!abuse.flaggedAccount\">\n          Account deleted\n        </td>\n\n      </ng-container>\n\n      <td class=\"c-hand\" [pRowToggler]=\"abuse\">{{ abuse.createdAt | ptDate: 'short'  }}</td>\n\n      <td class=\"c-hand abuse-states\" [pRowToggler]=\"abuse\">\n        <div *ngIf=\"isAbuseAccepted(abuse)\" [title]=\"abuse.state.label\" class=\"pt-badge badge-success\">\n          <my-global-icon iconName=\"tick\"></my-global-icon>\n        </div>\n\n        <div *ngIf=\"isAbuseRejected(abuse)\" [title]=\"abuse.state.label\" class=\"pt-badge badge-danger\">\n          <my-global-icon iconName=\"cross\"></my-global-icon>\n        </div>\n      </td>\n\n      <td class=\"abuse-messages\">\n        <button\n          *ngIf=\"isLocalAbuse(abuse)\" (click)=\"openAbuseMessagesModal(abuse)\"\n          class=\"peertube-button secondary-button icon-only\"\n          [ariaLabel]=\"getSendMessageButtonLabel(abuse)\"\n          [title]=\"getSendMessageButtonLabel(abuse)\"\n        >\n          {{ abuse.countMessages }}\n\n          <my-global-icon aria- iconName=\"message-circle\"></my-global-icon>\n        </button>\n      </td>\n\n      <td *ngIf=\"isAdminView()\" class=\"internal-note\" container=\"body\" placement=\"left auto\" [ngbTooltip]=\"abuse.moderationComment\">\n        {{ abuse.moderationComment }}\n      </td>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"rowexpansion\" let-abuse>\n      <tr>\n        <td *ngIf=\"isAdminView()\" class=\"expand-cell\" myAutoColspan>\n          <my-abuse-details [abuse]=\"abuse\" [isAdminView]=\"true\"></my-abuse-details>\n        </td>\n        <td *ngIf=\"!isAdminView()\" class=\"expand-cell\" myAutoColspan>\n          <my-abuse-details [abuse]=\"abuse\" [isAdminView]=\"false\"></my-abuse-details>\n        </td>\n      </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"emptymessage\">\n    <tr>\n      <td myAutoColspan>\n        <div class=\"no-results\">\n          <ng-container *ngIf=\"search\" i18n>No abuses found matching current filters.</ng-container>\n          <ng-container *ngIf=\"!search\" i18n>No abuses found.</ng-container>\n        </div>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n\n<my-moderation-comment-modal #moderationCommentModal (commentUpdated)=\"onModerationCommentUpdated()\"></my-moderation-comment-modal>\n<my-abuse-message-modal #abuseMessagesModal [isAdminView]=\"isAdminView()\" (countMessagesUpdated)=\"onCountMessagesUpdated($event)\"></my-abuse-message-modal>\n","import { Directive, OnInit, inject } from '@angular/core'\nimport { Notifier, RestPagination, RestTable } from '@app/core'\nimport { SortMeta } from 'primeng/api'\nimport { AccountBlock } from './account-block.model'\nimport { BlocklistComponentType, BlocklistService } from './blocklist.service'\n\n@Directive()\nexport class GenericAccountBlocklistComponent extends RestTable implements OnInit {\n  private notifier = inject(Notifier)\n  private blocklistService = inject(BlocklistService)\n\n  // @ts-expect-error: \"Abstract methods can only appear within an abstract class\"\n  abstract mode: BlocklistComponentType\n\n  blockedAccounts: AccountBlock[] = []\n  totalRecords = 0\n  sort: SortMeta = { field: 'createdAt', order: -1 }\n  pagination: RestPagination = { count: this.rowsPerPage, start: 0 }\n\n  // @ts-expect-error: \"Abstract methods can only appear within an abstract class\"\n  abstract getIdentifier (): string\n\n  ngOnInit () {\n    this.initialize()\n  }\n\n  unblockAccount (accountBlock: AccountBlock) {\n    const blockedAccount = accountBlock.blockedAccount\n    const operation = this.mode === BlocklistComponentType.Account\n      ? this.blocklistService.unblockAccountByUser(blockedAccount)\n      : this.blocklistService.unblockAccountByInstance(blockedAccount)\n\n    operation.subscribe(\n      () => {\n        this.notifier.success(\n          this.mode === BlocklistComponentType.Account\n            ? $localize`Account ${blockedAccount.nameWithHost} unmuted.`\n            : $localize`Account ${blockedAccount.nameWithHost} unmuted by your platform.`\n        )\n\n        this.reloadData()\n      }\n    )\n  }\n\n  protected reloadDataInternal () {\n    const operation = this.mode === BlocklistComponentType.Account\n      ? this.blocklistService.getUserAccountBlocklist({\n        pagination: this.pagination,\n        sort: this.sort,\n        search: this.search\n      })\n      : this.blocklistService.getInstanceAccountBlocklist({\n        pagination: this.pagination,\n        sort: this.sort,\n        search: this.search\n      })\n\n    return operation.subscribe({\n      next: resultList => {\n        this.blockedAccounts = resultList.data\n        this.totalRecords = resultList.total\n      },\n\n      error: err => this.notifier.error(err.message)\n    })\n  }\n}\n","import { Directive, OnInit, inject, viewChild } from '@angular/core'\nimport { Notifier, RestPagination, RestTable } from '@app/core'\nimport { BatchDomainsModalComponent } from '@app/shared/shared-moderation/batch-domains-modal.component'\nimport { ServerBlock } from '@peertube/peertube-models'\nimport { SortMeta } from 'primeng/api'\nimport { BlocklistComponentType, BlocklistService } from './blocklist.service'\n\n@Directive()\nexport class GenericServerBlocklistComponent extends RestTable implements OnInit {\n  protected notifier = inject(Notifier)\n  protected blocklistService = inject(BlocklistService)\n\n  readonly batchDomainsModal = viewChild<BatchDomainsModalComponent>('batchDomainsModal')\n\n  // @ts-expect-error: \"Abstract methods can only appear within an abstract class\"\n  public abstract mode: BlocklistComponentType\n\n  blockedServers: ServerBlock[] = []\n  totalRecords = 0\n  sort: SortMeta = { field: 'createdAt', order: -1 }\n  pagination: RestPagination = { count: this.rowsPerPage, start: 0 }\n\n  // @ts-expect-error: \"Abstract methods can only appear within an abstract class\"\n  public abstract getIdentifier (): string\n\n  ngOnInit () {\n    this.initialize()\n  }\n\n  unblockServer (serverBlock: ServerBlock) {\n    const operation = (host: string) =>\n      this.mode === BlocklistComponentType.Account\n        ? this.blocklistService.unblockServerByUser(host)\n        : this.blocklistService.unblockServerByInstance(host)\n    const host = serverBlock.blockedServer.host\n\n    operation(host).subscribe(\n      () => {\n        this.notifier.success(\n          this.mode === BlocklistComponentType.Account\n            ? $localize`${host} unmuted.`\n            : $localize`${host} unmuted by your platform.`\n        )\n\n        this.reloadData()\n      }\n    )\n  }\n\n  addServersToBlock () {\n    this.batchDomainsModal().openModal()\n  }\n\n  onDomainsToBlock (domains: string[]) {\n    const operation = (domain: string) =>\n      this.mode === BlocklistComponentType.Account\n        ? this.blocklistService.blockServerByUser(domain)\n        : this.blocklistService.blockServerByInstance(domain)\n\n    domains.forEach(domain => {\n      operation(domain).subscribe(\n        () => {\n          this.notifier.success(\n            this.mode === BlocklistComponentType.Account\n              ? $localize`Platform ${domain} muted.`\n              : $localize`Platform ${domain} muted by your platform.`\n          )\n\n          this.reloadData()\n        }\n      )\n    })\n  }\n\n  protected reloadDataInternal () {\n    const operation = this.mode === BlocklistComponentType.Account\n      ? this.blocklistService.getUserServerBlocklist({\n        pagination: this.pagination,\n        sort: this.sort,\n        search: this.search\n      })\n      : this.blocklistService.getInstanceServerBlocklist({\n        pagination: this.pagination,\n        sort: this.sort,\n        search: this.search\n      })\n\n    return operation.subscribe({\n      next: resultList => {\n        this.blockedServers = resultList.data\n        this.totalRecords = resultList.total\n      },\n\n      error: err => this.notifier.error(err.message)\n    })\n  }\n}\n","<ng-template #modal>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\">{{ action() }}</h4>\n\n    <button class=\"border-0 p-0\" title=\"Close this modal\" i18n-title (click)=\"hide()\">\n      <my-global-icon iconName=\"cross\"></my-global-icon>\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n    <form novalidate [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n      <div class=\"form-group\">\n        <label i18n for=\"hosts\">1 host (without \"http://\") per line</label>\n\n        <textarea\n          [placeholder]=\"placeholder()\" formControlName=\"hosts\" type=\"text\" id=\"hosts\" name=\"hosts\"\n          class=\"form-control\" [ngClass]=\"{ 'input-error': formErrors['hosts'] }\" ngbAutofocus\n        ></textarea>\n\n        <div *ngIf=\"formErrors.hosts\" class=\"form-error\" role=\"alert\">\n          {{ formErrors.hosts }}\n\n          <div *ngIf=\"form.controls['hosts'].errors.validHosts\">\n            {{ form.controls['hosts'].errors.validHosts.value }}\n          </div>\n        </div>\n      </div>\n\n      <ng-content select=\"warning\"></ng-content>\n\n      <div class=\"form-group inputs\">\n        <input\n          type=\"button\" role=\"button\" i18n-value value=\"Cancel\" class=\"peertube-button secondary-button\"\n          (click)=\"hide()\" (key.enter)=\"hide()\"\n        >\n\n        <input type=\"submit\" [value]=\"action()\" class=\"peertube-button primary-button\" [disabled]=\"!form.valid\" />\n      </div>\n    </form>\n  </div>\n\n</ng-template>\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, OnInit, inject, input, output, viewChild } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap/modal/modal-ref'\nimport { splitAndGetNotEmpty } from '@root-helpers/string'\nimport { UNIQUE_HOSTS_VALIDATOR } from '../form-validators/host-validators'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\n\n@Component({\n  selector: 'my-batch-domains-modal',\n  templateUrl: './batch-domains-modal.component.html',\n  styleUrls: [ './batch-domains-modal.component.scss' ],\n  imports: [ GlobalIconComponent, FormsModule, ReactiveFormsModule, NgClass, NgIf ]\n})\nexport class BatchDomainsModalComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private modalService = inject(NgbModal)\n\n  readonly modal = viewChild<NgbModal>('modal')\n  readonly placeholder = input('example.com')\n  readonly action = input<string>($localize`Process domains`)\n  readonly domains = output<string[]>()\n\n  private openedModal: NgbModalRef\n\n  ngOnInit () {\n    this.buildForm({\n      hosts: UNIQUE_HOSTS_VALIDATOR\n    })\n  }\n\n  openModal () {\n    this.openedModal = this.modalService.open(this.modal(), { centered: true })\n  }\n\n  hide () {\n    this.openedModal.close()\n  }\n\n  submit () {\n    this.domains.emit(splitAndGetNotEmpty(this.form.controls['hosts'].value))\n    this.form.reset()\n    this.hide()\n  }\n}\n"]}