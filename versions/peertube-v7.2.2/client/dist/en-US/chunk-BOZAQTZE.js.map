{"version":3,"mappings":"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","names":["USER_USERNAME_REGEX_CHARACTERS","USER_USERNAME_VALIDATOR","VALIDATORS","Validators","required","minLength","maxLength","pattern","RegExp","MESSAGES","$localize","minlength","maxlength","USER_CHANNEL_NAME_VALIDATOR","USER_EMAIL_VALIDATOR","email","USER_HANDLE_VALIDATOR","USER_EXISTING_PASSWORD_VALIDATOR","USER_OTP_TOKEN_VALIDATOR","USER_PASSWORD_VALIDATOR","USER_PASSWORD_OPTIONAL_VALIDATOR","USER_CONFIRM_PASSWORD_VALIDATOR","matchPassword","USER_VIDEO_QUOTA_VALIDATOR","min","USER_VIDEO_QUOTA_DAILY_VALIDATOR","USER_ROLE_VALIDATOR","USER_DISPLAY_NAME_REQUIRED_VALIDATOR","buildDisplayNameValidator","USER_DESCRIPTION_VALIDATOR","USER_BAN_REASON_VALIDATOR","control","push","n","a","l","b","i","c","d","s","e","A","f","S","g","m","h","E","j","k","R","u","L","D","o","O","p"],"ignoreList":[],"sources":["src/app/shared/form-validators/user-validators.ts"],"sourcesContent":["import { Validators } from '@angular/forms'\nimport { BuildFormValidator } from './form-validator.model'\n\nexport const USER_USERNAME_REGEX_CHARACTERS = '[a-z0-9][a-z0-9._]'\n\nexport const USER_USERNAME_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.required,\n    Validators.minLength(1),\n    Validators.maxLength(50),\n    Validators.pattern(new RegExp(`^${USER_USERNAME_REGEX_CHARACTERS}*$`))\n  ],\n  MESSAGES: {\n    required: $localize`Username is required.`,\n    minlength: $localize`Username must be at least 1 character long.`,\n    maxlength: $localize`Username cannot be more than 50 characters long.`,\n    pattern: $localize`Username should be lowercase alphanumeric; dots and underscores are allowed.`\n  }\n}\n\nexport const USER_CHANNEL_NAME_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.required,\n    Validators.minLength(1),\n    Validators.maxLength(50),\n    Validators.pattern(/^[a-z0-9][a-z0-9._]*$/)\n  ],\n  MESSAGES: {\n    required: $localize`Channel name is required.`,\n    minlength: $localize`Channel name must be at least 1 character long.`,\n    maxlength: $localize`Channel name cannot be more than 50 characters long.`,\n    pattern: $localize`Channel name should be lowercase, and can contain only alphanumeric characters, dots and underscores.`\n  }\n}\n\nexport const USER_EMAIL_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, Validators.email ],\n  MESSAGES: {\n    required: $localize`Email is required.`,\n    email: $localize`Email must be valid.`\n  }\n}\n\nexport const USER_HANDLE_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.required,\n    Validators.pattern(/@.+/)\n  ],\n  MESSAGES: {\n    required: $localize`Handle is required.`,\n    pattern: $localize`Handle must be valid (eg. chocobozzz@example.com).`\n  }\n}\n\nexport const USER_EXISTING_PASSWORD_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.required\n  ],\n  MESSAGES: {\n    required: $localize`Password is required.`\n  }\n}\n\nexport const USER_OTP_TOKEN_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.required\n  ],\n  MESSAGES: {\n    required: $localize`OTP token is required.`\n  }\n}\n\nexport const USER_PASSWORD_VALIDATOR = {\n  VALIDATORS: [\n    Validators.required,\n    Validators.minLength(6),\n    Validators.maxLength(255)\n  ],\n  MESSAGES: {\n    required: $localize`Password is required.`,\n    minlength: $localize`Password must be at least 6 characters long.`,\n    maxlength: $localize`Password cannot be more than 255 characters long.`\n  }\n}\n\nexport const USER_PASSWORD_OPTIONAL_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.minLength(6),\n    Validators.maxLength(255)\n  ],\n  MESSAGES: {\n    minlength: $localize`Password must be at least 6 characters long.`,\n    maxlength: $localize`Password cannot be more than 255 characters long.`\n  }\n}\n\nexport const USER_CONFIRM_PASSWORD_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [],\n  MESSAGES: {\n    matchPassword: $localize`The new password and the confirmed password do not correspond.`\n  }\n}\n\nexport const USER_VIDEO_QUOTA_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, Validators.min(-1) ],\n  MESSAGES: {\n    required: $localize`Video quota is required.`,\n    min: $localize`Quota must be greater than -1.`\n  }\n}\nexport const USER_VIDEO_QUOTA_DAILY_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, Validators.min(-1) ],\n  MESSAGES: {\n    required: $localize`Daily upload limit is required.`,\n    min: $localize`Daily upload limit must be greater than -1.`\n  }\n}\n\nexport const USER_ROLE_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required ],\n  MESSAGES: {\n    required: $localize`User role is required.`\n  }\n}\n\nexport const USER_DISPLAY_NAME_REQUIRED_VALIDATOR = buildDisplayNameValidator(true)\n\nexport const USER_DESCRIPTION_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.minLength(3),\n    Validators.maxLength(1000)\n  ],\n  MESSAGES: {\n    minlength: $localize`Description must be at least 3 characters long.`,\n    maxlength: $localize`Description cannot be more than 1000 characters long.`\n  }\n}\n\nexport const USER_BAN_REASON_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.minLength(3),\n    Validators.maxLength(250)\n  ],\n  MESSAGES: {\n    minlength: $localize`Ban reason must be at least 3 characters long.`,\n    maxlength: $localize`Ban reason cannot be more than 250 characters long.`\n  }\n}\n\nfunction buildDisplayNameValidator (required: boolean) {\n  const control = {\n    VALIDATORS: [\n      Validators.minLength(1),\n      Validators.maxLength(120)\n    ],\n    MESSAGES: {\n      required: $localize`Display name is required.`,\n      minlength: $localize`Display name must be at least 1 character long.`,\n      maxlength: $localize`Display name cannot be more than 50 characters long.`\n    }\n  }\n\n  if (required) control.VALIDATORS.push(Validators.required)\n\n  return control\n}\n"]}