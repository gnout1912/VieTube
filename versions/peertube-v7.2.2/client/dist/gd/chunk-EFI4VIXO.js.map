{"version":3,"mappings":"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","names":["SelectCheckboxDefaultAllComponent","notifier","inject","Notifier","inputId","input","required","availableItems","placeholder","undefined","maxIndividualItems","allSelectedLabel","selectedLabel","virtualScroll","transform","booleanAttribute","selectedItemsLabel","selectedItems","propagateChange","_","writeValue","items","selectAll","registerOnChange","fn","registerOnTouched","onModelChange","updateLabel","isMaxItemsValid","buildOutputItems","onPanelHide","Array","isArray","length","checkMaxItems","outputItems","error","formatICU","maxItems","map","i","id","o","selectors","inputs","features","ɵɵProvidersFeature","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵtwoWayListener","$event","i0","ɵɵtwoWayBindingSet","ɵɵlistener","ɵɵelementEnd","l","ɵɵtwoWayProperty","ɵɵproperty","dependencies","SelectCheckboxComponent","FormsModule","NgControlStatus","NgModel","encapsulation","_SelectCheckboxDefaultAllComponent","V","a","s","y","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","selectedLanguages","ɵɵresetView","h","availableLanguages","maxLanguages","SelectLanguagesComponent","server","ServerService","ngOnInit","getVideoLanguages","subscribe","languages","noLangSet","find","label","$localize","filter","i18n_0","ɵɵtemplate","SelectLanguagesComponent_my_select_checkbox_default_all_0_Template","NgIf","_SelectLanguagesComponent","D","ee","b"],"ignoreList":[],"sources":["src/app/shared/shared-forms/select/select-checkbox-default-all.component.ts","src/app/shared/shared-forms/select/select-languages.component.ts"],"sourcesContent":["import { booleanAttribute, Component, forwardRef, inject, input } from '@angular/core'\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms'\nimport { Notifier } from '@app/core'\nimport { formatICU } from '@app/helpers'\nimport { SelectOptionsItem } from '../../../../types/select-options-item.model'\nimport { SelectCheckboxComponent } from './select-checkbox.component'\n\n@Component({\n  selector: 'my-select-checkbox-default-all',\n  template: `\n  <my-select-checkbox\n    [(ngModel)]=\"selectedItems\"\n    (ngModelChange)=\"onModelChange()\"\n    [availableItems]=\"availableItems()\"\n    [placeholder]=\"placeholder()\"\n    [inputId]=\"inputId()\"\n\n    [selectedItemsLabel]=\"selectedItemsLabel\"\n\n    showClear=\"false\"\n    showToggleAll=\"true\"\n\n    [virtualScroll]=\"virtualScroll()\"\n\n    (panelHide)=\"onPanelHide()\"\n  >\n  </my-select-checkbox>`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectCheckboxDefaultAllComponent),\n      multi: true\n    }\n  ],\n  imports: [ SelectCheckboxComponent, FormsModule ]\n})\nexport class SelectCheckboxDefaultAllComponent implements ControlValueAccessor {\n  private notifier = inject(Notifier)\n\n  readonly inputId = input.required<string>()\n  readonly availableItems = input<SelectOptionsItem[]>([])\n\n  readonly placeholder = input<string>(undefined)\n  readonly maxIndividualItems = input<number>(undefined)\n\n  readonly allSelectedLabel = input<string>(undefined)\n  readonly selectedLabel = input<string>(undefined)\n\n  readonly virtualScroll = input(false, { transform: booleanAttribute })\n\n  selectedItemsLabel: string\n  selectedItems: string[]\n\n  propagateChange = (_: any) => {\n    // empty\n  }\n\n  writeValue (items: string[]) {\n    if (items) this.selectedItems = items\n    else this.selectAll()\n  }\n\n  registerOnChange (fn: (_: any) => void) {\n    this.propagateChange = fn\n  }\n\n  registerOnTouched () {\n    // Unused\n  }\n\n  onModelChange () {\n    this.updateLabel()\n\n    if (!this.isMaxItemsValid()) return\n\n    this.propagateChange(this.buildOutputItems())\n  }\n\n  onPanelHide () {\n    // Automatically use \"All languages\" if the user did not select any language\n    if (Array.isArray(this.selectedItems) && this.selectedItems.length === 0) {\n      this.selectAll()\n    }\n\n    this.checkMaxItems()\n  }\n\n  private isMaxItemsValid () {\n    const maxIndividualItems = this.maxIndividualItems()\n    if (!maxIndividualItems) return true\n\n    const outputItems = this.buildOutputItems()\n    if (!outputItems) return true\n\n    if (outputItems.length >= maxIndividualItems) return false\n\n    return true\n  }\n\n  private checkMaxItems () {\n    if (!this.isMaxItemsValid()) {\n      this.notifier.error(\n        formatICU(\n          $localize`You can't select more than {maxItems, plural, =1 {1 item} other {{maxItems} items}}`,\n          { maxItems: this.maxIndividualItems() }\n        )\n      )\n\n      this.selectAll()\n    }\n  }\n\n  private selectAll () {\n    this.selectedItems = this.availableItems().map(i => i.id + '')\n\n    this.updateLabel()\n  }\n\n  private updateLabel () {\n    const availableItems = this.availableItems()\n    if (this.selectedItems && availableItems && this.selectedItems.length === availableItems.length) {\n      this.selectedItemsLabel = this.allSelectedLabel()\n    } else {\n      this.selectedItemsLabel = this.selectedLabel()\n    }\n  }\n\n  private buildOutputItems () {\n    if (!Array.isArray(this.selectedItems)) return undefined\n\n    // null means \"All\"\n    if (this.selectedItems.length === 0 || this.selectedItems.length === this.availableItems().length) {\n      return null\n    }\n\n    return this.selectedItems\n  }\n}\n","import { NgIf } from '@angular/common'\nimport { Component, forwardRef, OnInit, inject, input } from '@angular/core'\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms'\nimport { ServerService } from '@app/core'\nimport { SelectOptionsItem } from '../../../../types/select-options-item.model'\nimport { SelectCheckboxDefaultAllComponent } from './select-checkbox-default-all.component'\n\n@Component({\n  selector: 'my-select-languages',\n  template: `\n<my-select-checkbox-default-all\n  *ngIf=\"availableLanguages\"\n\n  [availableItems]=\"availableLanguages\"\n  [(ngModel)]=\"selectedLanguages\"\n  (ngModelChange)=\"onModelChange()\"\n\n  [inputId]=\"inputId()\"\n\n  [maxIndividualItems]=\"maxLanguages()\"\n\n  virtualScroll=\"true\"\n  virtualScrollItemSize=\"37\"\n\n  i18n-allSelectedLabel allSelectedLabel=\"All languages\"\n  i18n-selectedLabel selectedLabel=\"{1} languages selected\"\n  i18n-placeholder placeholder=\"Add a new language\"\n>\n</my-select-checkbox-default-all>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectLanguagesComponent),\n      multi: true\n    }\n  ],\n  imports: [ SelectCheckboxDefaultAllComponent, FormsModule, NgIf ]\n})\nexport class SelectLanguagesComponent implements ControlValueAccessor, OnInit {\n  private server = inject(ServerService)\n\n  readonly inputId = input.required<string>()\n  readonly maxLanguages = input<number>(undefined)\n\n  selectedLanguages: string[]\n  availableLanguages: SelectOptionsItem[]\n\n  ngOnInit () {\n    this.server.getVideoLanguages()\n      .subscribe(\n        languages => {\n          const noLangSet = languages.find(l => l.id === 'zxx')\n\n          this.availableLanguages = [\n            {\n              label: $localize`Unknown language`,\n              id: '_unknown'\n            },\n\n            noLangSet,\n\n            ...languages\n              .filter(l => l.id !== 'zxx')\n              .map(l => ({ label: l.label, id: l.id }))\n          ]\n        }\n      )\n  }\n\n  propagateChange = (_: any) => {\n    // empty\n  }\n\n  writeValue (languages: string[]) {\n    this.selectedLanguages = languages\n  }\n\n  registerOnChange (fn: (_: any) => void) {\n    this.propagateChange = fn\n  }\n\n  registerOnTouched () {\n    // Unused\n  }\n\n  onModelChange () {\n    this.propagateChange(this.selectedLanguages)\n  }\n}\n"]}