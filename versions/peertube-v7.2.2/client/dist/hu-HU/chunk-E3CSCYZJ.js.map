{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵi18n","ɵɵlistener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","onAvatarChange","deleteAvatar","t","e","_","ɵɵadvance","ɵɵproperty","avatarFormat","avatarExtensions","Y","o","y","_r3","B","ɵɵtemplate","ActorAvatarEditComponent_div_0_Conditional_3_Conditional_0_Template","ActorAvatarEditComponent_div_0_Conditional_3_Conditional_1_Template","ɵɵconditional","hasAvatar","Z","ɵɵtext","ɵɵtextInterpolate","displayName","J","username","K","ɵɵi18nExp","subscribers","D","W","ActorAvatarEditComponent_div_0_Conditional_3_Template","ActorAvatarEditComponent_div_0_div_5_Template","ActorAvatarEditComponent_div_0_div_6_Template","ActorAvatarEditComponent_div_0_div_7_Template","actor","actorType","preview","editable","displayUsername","ActorAvatarEditComponent","serverService","inject","ServerService","notifier","Notifier","avatarfileInput","viewChild","input","required","avatars","undefined","transform","booleanAttribute","previewImage","avatarChange","output","avatarDelete","maxAvatarSize","ngOnInit","config","getHTMLConfig","avatar","file","size","max","extensions","join","getBytes","ngOnChanges","name","avatarfile","nativeElement","files","error","formData","FormData","append","emit","imageToDataURL","then","result","length","E","selectors","viewQuery","rf","ctx","P","d","Q","n","N","inputs","outputs","features","R","decls","vars","consts","i","$localize","M","template","ActorAvatarEditComponent_div_0_Template","dependencies","NgIf","ActorAvatarComponent","NgbTooltip","GlobalIconComponent","NgbDropdown","NgbDropdownToggle","NgbDropdownMenu","styles","_ActorAvatarEditComponent","se","a"],"ignoreList":[],"sources":["src/app/shared/shared-actor-image-edit/actor-avatar-edit.component.html","src/app/shared/shared-actor-image-edit/actor-avatar-edit.component.ts"],"sourcesContent":["<div class=\"actor\" *ngIf=\"actor\">\n  <div class=\"position-relative me-3\">\n    <my-actor-avatar [actor]=\"actor\" [actorType]=\"actorType()\" [previewImage]=\"preview\" size=\"100\"></my-actor-avatar>\n\n    @if (editable()) {\n      @if (hasAvatar()) {\n        <div ngbDropdown placement=\"right\">\n          <button type=\"button\" class=\"actor-img-edit-button button-file primary-button\" i18n-arialLabel aria-label=\"Change your avatar\" ngbDropdownToggle>\n            <my-global-icon iconName=\"edit\"></my-global-icon>\n          </button>\n\n          <div ngbDropdownMenu>\n            <div class=\"dropdown-item dropdown-file button-focus-within\" [ngbTooltip]=\"avatarFormat\">\n              <my-global-icon iconName=\"upload\"></my-global-icon>\n              <label for=\"avatarfile\" i18n>Upload a new avatar</label>\n              <input #avatarfileInput type=\"file\" name=\"avatarfile\" id=\"avatarfile\" [accept]=\"avatarExtensions\" (change)=\"onAvatarChange()\"/>\n            </div>\n\n            <button type=\"button\" class=\"dropdown-item\" (click)=\"deleteAvatar()\" (key.enter)=\"deleteAvatar()\">\n              <my-global-icon iconName=\"delete\"></my-global-icon>\n              <span i18n>Remove avatar</span>\n            </button>\n          </div>\n        </div>\n      } @else {\n        <div class=\"actor-img-edit-button button-file primary-button button-focus-within\" [ngbTooltip]=\"avatarFormat\" placement=\"right\" container=\"body\">\n          <my-global-icon iconName=\"upload\"></my-global-icon>\n          <label class=\"visually-hidden\" for=\"avatarfile\" i18n>Upload a new avatar</label>\n          <input #avatarfileInput type=\"file\" name=\"avatarfile\" id=\"avatarfile\" [accept]=\"avatarExtensions\" (change)=\"onAvatarChange()\"/>\n        </div>\n      }\n    }\n  </div>\n\n  <div class=\"actor-info\">\n    <div *ngIf=\"displayName()\" class=\"actor-info-display-name\">{{ displayName() }}</div>\n    <div *ngIf=\"displayUsername() && username()\" class=\"actor-info-username\">{{ username() }}</div>\n    <div *ngIf=\"subscribers()\" i18n class=\"actor-info-followers\">{{ subscribers() }} subscribers</div>\n  </div>\n</div>\n","import { NgIf } from '@angular/common'\nimport { Component, ElementRef, OnChanges, OnInit, booleanAttribute, inject, input, output, viewChild } from '@angular/core'\nimport { Notifier, ServerService } from '@app/core'\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle, NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { ActorImage } from '@peertube/peertube-models'\nimport { getBytes } from '@root-helpers/bytes'\nimport { imageToDataURL } from '@root-helpers/images'\nimport { ActorAvatarComponent, ActorAvatarInput } from '../shared-actor-image/actor-avatar.component'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\n\n@Component({\n  selector: 'my-actor-avatar-edit',\n  templateUrl: './actor-avatar-edit.component.html',\n  styleUrls: [\n    './actor-image-edit.scss',\n    './actor-avatar-edit.component.scss'\n  ],\n  imports: [ NgIf, ActorAvatarComponent, NgbTooltip, GlobalIconComponent, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu ]\n})\nexport class ActorAvatarEditComponent implements OnInit, OnChanges {\n  private serverService = inject(ServerService)\n  private notifier = inject(Notifier)\n\n  readonly avatarfileInput = viewChild<ElementRef<HTMLInputElement>>('avatarfileInput')\n\n  readonly actorType = input.required<'channel' | 'account'>()\n  readonly avatars = input.required<ActorImage[]>()\n  readonly username = input.required<string>()\n\n  readonly displayName = input<string>(undefined)\n  readonly subscribers = input<number>(undefined)\n\n  readonly displayUsername = input(true, { transform: booleanAttribute })\n  readonly editable = input(true, { transform: booleanAttribute })\n  readonly previewImage = input(false, { transform: booleanAttribute })\n\n  readonly avatarChange = output<FormData>()\n  readonly avatarDelete = output()\n\n  avatarFormat = ''\n  maxAvatarSize = 0\n  avatarExtensions = ''\n\n  preview: string\n\n  actor: ActorAvatarInput\n\n  ngOnInit (): void {\n    const config = this.serverService.getHTMLConfig()\n\n    this.maxAvatarSize = config.avatar.file.size.max\n    this.avatarExtensions = config.avatar.file.extensions.join(', ')\n\n    this.avatarFormat = $localize`max size: 192*192px, ${getBytes(this.maxAvatarSize)} extensions: ${this.avatarExtensions}`\n  }\n\n  ngOnChanges () {\n    this.actor = {\n      avatars: this.avatars(),\n      name: this.username()\n    }\n  }\n\n  onAvatarChange () {\n    const avatarfile = this.avatarfileInput().nativeElement.files[0]\n    if (avatarfile.size > this.maxAvatarSize) {\n      this.notifier.error('Error', $localize`This image is too large.`)\n      return\n    }\n\n    const formData = new FormData()\n    formData.append('avatarfile', avatarfile)\n    this.avatarChange.emit(formData)\n\n    if (this.previewImage()) {\n      imageToDataURL(avatarfile).then(result => this.preview = result)\n    }\n  }\n\n  deleteAvatar () {\n    this.preview = undefined\n    this.avatarDelete.emit()\n  }\n\n  hasAvatar () {\n    return !!this.preview || this.avatars().length !== 0\n  }\n}\n"]}