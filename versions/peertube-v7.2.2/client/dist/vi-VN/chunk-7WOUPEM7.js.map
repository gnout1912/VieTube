{"version":3,"mappings":"qbAGO,GAAMA,GAAuD,CAClEC,WAAY,CACVC,EAAWC,QAAQ,EAErBC,SAAU,CACRD,+DAAUE,GCOd,GAAaC,IAAuB,KAA9B,GAAOA,GAAP,KAAOA,UAA+BC,EAAY,CAC5CC,oBAAsBC,EAAOC,CAAmB,EAClDC,YAAcF,EAAOG,CAAW,EAChCC,SAAWJ,EAAOK,CAAQ,EAC1BC,OAASN,EAAOO,CAAM,EACtBC,MAAQR,EAAOS,CAAc,EAE7BC,OACAC,mBAERC,UAAQ,CACN,KAAKC,UAAU,CACbC,QAAA,CAAYC,EACZ,mBAAoBxB,EACrB,EAED,KAAKmB,OAAS,KAAKF,MAAMQ,SAASC,YAAYP,MAAA,CAC9C,KAAKC,mBAAqB,KAAKH,MAAMQ,SAASC,YAAYN,kBAAA,EAEtD,CAAC,KAAKD,QAAU,CAAC,KAAKC,sBACxB,KAAKP,SAASc,uGAA+D,EAC7E,KAAKZ,OAAOa,SAAS,CAAE,GAAG,CAAE,EAEhC,EAEAC,eAAa,CACX,KAAKlB,YAAYkB,cAAc,KAAKV,OAAQ,KAAKC,mBAAoB,KAAKU,KAAKC,MAAMR,QAAQ,EAC1FS,UAAU,CACTC,KAAMA,IAAK,CACT,KAAKpB,SAASqB,gFAA6D,EAE3E,KAAKnB,OAAOa,SAAS,CAAE,QAAQ,CAAE,CACnC,GAEAD,MAAOQ,GAAO,KAAKtB,SAASc,MAAMQ,EAAIC,OAAO,EAC9C,CACL,EAEAC,0BAAwB,CACtB,GAAMC,GAAS,KAAKR,KAAKC,MACzB,MAAOO,GAAOf,WAAae,EAAO,kBAAkB,CACtD,IAAAC,CAAA,CAzCWjC,6DAAsB,IAAAkC,GAAtBlC,CAAsB,UAAAiC,CAAA,CAAtBjC,wBAAsBmC,UAAA,mBAAAC,SAAA,CAAAC,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,WAAA,IAAAC,yBCPiD1C,yDASgBA,oEAMvBA,oEAtB/CA,6BAIGA,qDASQA,seAdzC2C,EAAA,WAA4B,UAC1BC,EAAA,KAA6CC,EAAA,EAE7CF,EAAA,YAAMG,EAAA,4BAAYC,GAAAvB,cAAA,CAAe,IAC/BmB,EAAA,WAAwB,aACtBC,EAAA,KAAmCC,EAAA,EAEnCG,EAAA,qBAIFH,EAAA,EAEAF,EAAA,WAAwB,aACtBC,EAAA,MAAmDC,EAAA,EAEnDG,EAAA,uBAIFH,EAAA,EAEAG,EAAA,eAIFH,EAAA,EAAO,GAAAI,CAAA,KAvB4BC,EAAA,GAAAC,EAAA,YAAAJ,EAAAtB,IAAA,EAM7ByB,EAAA,GAAAC,EAAA,YAAAJ,EAAAK,WAAAlC,QAAA,EASAgC,EAAA,GAAAC,EAAA,YAAAJ,EAAAK,WAAA,qBAMFF,EAAA,EAAAC,EAAA,YAAAJ,EAAAtB,KAAA4B,OAAA,CAAAN,EAAAf,yBAAA,MAAAsB,YAAA,EDXOC,EAAWC,EAAAC,EAAAC,EAAEC,EAAmBC,EAAAC,EAAEC,CAAkB,EAAAC,OAAA;kEAAA,KAE3D,GAAO9D,GAAP+D,QAAO/D,EAAuB,MEZpC,GAAAgE,IAAe,CACb,CACEC,KAAM,GACNC,UAAWlE,EACXmE,KAAM,CACJC,KAAM,CACJC,iDAAOtE,GAGZ,SAAAuE,EAAA,IAAAC,OAAA","names":["RESET_PASSWORD_CONFIRM_VALIDATOR","VALIDATORS","Validators","required","MESSAGES","$localize","ResetPasswordComponent","FormReactive","formReactiveService","inject","FormReactiveService","userService","UserService","notifier","Notifier","router","Router","route","ActivatedRoute","userId","verificationString","ngOnInit","buildForm","password","USER_PASSWORD_VALIDATOR","snapshot","queryParams","error","navigate","resetPassword","form","value","subscribe","next","success","err","message","isConfirmedPasswordValid","values","p","__ngFactoryType__","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","i18n_0","ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","ɵɵlistener","ctx","ɵɵelement","i","ɵɵadvance","ɵɵproperty","formErrors","valid","dependencies","FormsModule","ɵNgNoValidate","NgControlStatus","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","InputTextComponent","styles","_ResetPasswordComponent","routes_default","path","component","data","meta","title","re","default"],"ignoreList":[],"sources":["src/app/shared/form-validators/reset-password-validators.ts","src/app/+reset-password/reset-password.component.ts","src/app/+reset-password/reset-password.component.html","src/app/+reset-password/routes.ts"],"sourcesContent":["import { Validators } from '@angular/forms'\nimport { BuildFormValidator } from './form-validator.model'\n\nexport const RESET_PASSWORD_CONFIRM_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [\n    Validators.required\n  ],\n  MESSAGES: {\n    required: $localize`Confirmation of the password is required.`\n  }\n}\n","import { Component, OnInit, inject } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { Notifier, UserService } from '@app/core'\nimport { RESET_PASSWORD_CONFIRM_VALIDATOR } from '@app/shared/form-validators/reset-password-validators'\nimport { USER_PASSWORD_VALIDATOR } from '@app/shared/form-validators/user-validators'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { InputTextComponent } from '../shared/shared-forms/input-text.component'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\n\n@Component({\n  templateUrl: './reset-password.component.html',\n  styleUrls: [ './reset-password.component.scss' ],\n  imports: [ FormsModule, ReactiveFormsModule, InputTextComponent ]\n})\nexport class ResetPasswordComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private userService = inject(UserService)\n  private notifier = inject(Notifier)\n  private router = inject(Router)\n  private route = inject(ActivatedRoute)\n\n  private userId: number\n  private verificationString: string\n\n  ngOnInit () {\n    this.buildForm({\n      'password': USER_PASSWORD_VALIDATOR,\n      'password-confirm': RESET_PASSWORD_CONFIRM_VALIDATOR\n    })\n\n    this.userId = this.route.snapshot.queryParams['userId']\n    this.verificationString = this.route.snapshot.queryParams['verificationString']\n\n    if (!this.userId || !this.verificationString) {\n      this.notifier.error($localize`Unable to find user id or verification string.`)\n      this.router.navigate([ '/' ])\n    }\n  }\n\n  resetPassword () {\n    this.userService.resetPassword(this.userId, this.verificationString, this.form.value.password)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Your password has been successfully reset!`)\n\n          this.router.navigate([ '/login' ])\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  isConfirmedPasswordValid () {\n    const values = this.form.value\n    return values.password === values['password-confirm']\n  }\n}\n","<div class=\"margin-content\">\n  <h1 i18n class=\"title-page\">Reset my password</h1>\n\n  <form (ngSubmit)=\"resetPassword()\" [formGroup]=\"form\">\n    <div class=\"form-group\">\n      <label i18n for=\"password\">Password</label>\n\n      <my-input-text\n        formControlName=\"password\" inputId=\"password\" i18n-placeholder placeholder=\"Password\"\n        [formError]=\"formErrors['password']\" autocomplete=\"new-password\"\n      ></my-input-text>\n    </div>\n\n    <div class=\"form-group\">\n      <label i18n for=\"password-confirm\">Confirm password</label>\n\n      <my-input-text\n        formControlName=\"password-confirm\" inputId=\"password-confirm\" i18n-placeholder placeholder=\"Confirmed password\"\n        [formError]=\"formErrors['password-confirm']\" autocomplete=\"new-password\"\n      ></my-input-text>\n    </div>\n\n    <input\n      class=\"peertube-button primary-button\" type=\"submit\" i18n-value value=\"Reset my password\"\n      [disabled]=\"!form.valid || !isConfirmedPasswordValid()\"\n    >\n  </form>\n</div>\n","import { Routes } from '@angular/router'\nimport { ResetPasswordComponent } from './reset-password.component'\n\nexport default [\n  {\n    path: '',\n    component: ResetPasswordComponent,\n    data: {\n      meta: {\n        title: $localize`Reset password`\n      }\n    }\n  }\n] satisfies Routes\n"]}