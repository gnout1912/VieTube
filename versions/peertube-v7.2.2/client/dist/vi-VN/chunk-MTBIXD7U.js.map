{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵtext","ɵɵelementEnd","n","e","d","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","about","instance","name","rn","t","shortDescription","cn","ɵɵelement","ln","ɵɵelementContainerStart","ɵɵi18n","S","ɵɵtemplate","InstanceAboutAccordionComponent_div_4_ng_template_8_Template","_n","ɵɵproperty","aboutHtml","administrator","ɵɵsanitizeHtml","maintenanceLifetime","businessModel","sn","InstanceAboutAccordionComponent_ng_container_5_div_1_ng_template_8_Template","dn","terms","mn","InstanceAboutAccordionComponent_ng_container_5_div_2_ng_template_7_Template","ɵɵtextInterpolate1","getTermsTitle","pn","moderationInformation","un","InstanceAboutAccordionComponent_ng_container_5_div_3_ng_template_8_Template","An","codeOfConduct","gn","InstanceAboutAccordionComponent_ng_container_5_div_4_ng_template_8_Template","Cn","$implicit","pluginPanel_r2","html","Sn","InstanceAboutAccordionComponent_ng_container_5_div_5_ng_template_8_Template","id","ɵɵi18nExp","title","$","fn","InstanceAboutAccordionComponent_ng_container_5_div_1_Template","InstanceAboutAccordionComponent_ng_container_5_div_2_Template","InstanceAboutAccordionComponent_ng_container_5_div_3_Template","InstanceAboutAccordionComponent_ng_container_5_div_4_Template","InstanceAboutAccordionComponent_ng_container_5_div_5_Template","getAdministratorsPanel","termsPanel","moderationPanel","codeOfConductPanel","pluginPanels","InstanceAboutAccordionComponent","instanceService","inject","InstanceService","notifier","Notifier","hookService","HooksService","accordion","viewChild","init","output","displayInstanceName","input","displayInstanceShortDescription","pluginScope","undefined","pluginHook","panels","features","administrators","moderation","ngOnInit","__async","getAbout","subscribe","next","buildHtml","emit","error","err","message","wrapObject","expandTerms","expand","expandCodeOfConduct","f","selectors","viewQuery","rf","ctx","L","m","on","l","B","inputs","outputs","decls","vars","consts","_","$localize","v","R","M","H","y","template","InstanceAboutAccordionComponent_h2_0_Template","InstanceAboutAccordionComponent_div_1_Template","InstanceAboutAccordionComponent_div_4_Template","InstanceAboutAccordionComponent_ng_container_5_Template","dependencies","NgIf","NgbAccordionDirective","NgbAccordionItem","NgbAccordionHeader","NgbAccordionButton","GlobalIconComponent","NgbAccordionCollapse","NgbAccordionBody","InstanceFeaturesTableComponent","NgFor","styles","_InstanceAboutAccordionComponent","Nn","rounded","En","ɵɵpureFunction1","_c0","instanceBannerUrl","ɵɵsanitizeUrl","InstanceBannerComponent","server","ServerService","transform","booleanAttribute","getHTMLConfig","maxBy","banners","path","InstanceBannerComponent_div_0_Template","NgClass","encapsulation","_InstanceBannerComponent","Dn","a","Un","b"],"ignoreList":[],"sources":["src/app/shared/shared-instance/instance-about-accordion.component.html","src/app/shared/shared-instance/instance-about-accordion.component.ts","src/app/shared/shared-instance/instance-banner.component.html","src/app/shared/shared-instance/instance-banner.component.ts"],"sourcesContent":["<h2 *ngIf=\"displayInstanceName()\" class=\"instance-name\">{{ about?.instance.name }}</h2>\n\n<div *ngIf=\"displayInstanceShortDescription()\" class=\"instance-short-description ellipsis-multiline-3\">{{ about?.instance.shortDescription }}</div>\n\n<div ngbAccordion #accordion=\"ngbAccordion\" [closeOthers]=\"true\">\n  <div ngbAccordionItem=\"instance-features\" *ngIf=\"panels().features\">\n    <div ngbAccordionHeader>\n      <button ngbAccordionButton>\n        <my-global-icon iconName=\"playlists\"></my-global-icon>\n\n        <ng-container i18n>Features found on this instance</ng-container>\n      </button>\n    </div>\n\n    <div ngbAccordionCollapse>\n      <div ngbAccordionBody>\n        <ng-template>\n          <my-instance-features-table></my-instance-features-table>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"about\">\n    <div ngbAccordionItem *ngIf=\"getAdministratorsPanel()\" >\n      <div ngbAccordionHeader>\n        <button ngbAccordionButton>\n          <my-global-icon iconName=\"playlists\"></my-global-icon>\n\n          <ng-container i18n>Administrators & Sustainability</ng-container>\n        </button>\n      </div>\n\n      <div ngbAccordionCollapse>\n        <div ngbAccordionBody>\n          <ng-template>\n            <div class=\"block\">\n              <strong i18n>Who are we?</strong>\n              <div [innerHTML]=\"aboutHtml.administrator\"></div>\n            </div>\n\n            <div class=\"block\">\n              <strong i18n>How long do we plan to maintain this instance?</strong>\n              <div [innerHTML]=\"about.instance.maintenanceLifetime\"></div>\n            </div>\n\n            <div class=\"block\">\n              <strong i18n>How will we finance this instance?</strong>\n              <div [innerHTML]=\"about.instance.businessModel\"></div>\n            </div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <div ngbAccordionItem=\"terms\" *ngIf=\"termsPanel\">\n      <div ngbAccordionHeader>\n        <button ngbAccordionButton>\n          <my-global-icon iconName=\"playlists\"></my-global-icon>\n\n          {{ getTermsTitle() }}\n        </button>\n      </div>\n\n      <div ngbAccordionCollapse>\n        <div ngbAccordionBody>\n          <ng-template>\n            <div class=\"block\" [innerHTML]=\"aboutHtml.terms\"></div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <div ngbAccordionItem=\"moderation-information\" *ngIf=\"moderationPanel\">\n      <div ngbAccordionHeader>\n        <button ngbAccordionButton>\n          <my-global-icon iconName=\"playlists\"></my-global-icon>\n\n          <ng-container i18n>Moderation information</ng-container>\n        </button>\n      </div>\n\n      <div ngbAccordionCollapse>\n        <div ngbAccordionBody>\n          <ng-template>\n            <div class=\"block\" [innerHTML]=\"aboutHtml.moderationInformation\"></div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <div ngbAccordionItem=\"code-of-conduct\" *ngIf=\"codeOfConductPanel\">\n      <div ngbAccordionHeader>\n        <button ngbAccordionButton>\n          <my-global-icon iconName=\"playlists\"></my-global-icon>\n\n          <ng-container i18n>Code of conduct</ng-container>\n        </button>\n      </div>\n\n      <div ngbAccordionCollapse>\n        <div ngbAccordionBody>\n          <ng-template>\n            <div class=\"block\" [innerHTML]=\"aboutHtml.codeOfConduct\"></div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <div ngbAccordionItem *ngFor=\"let pluginPanel of pluginPanels\" [id]=\"pluginPanel.id\">\n      <div ngbAccordionHeader>\n        <button ngbAccordionButton>\n          <my-global-icon iconName=\"playlists\"></my-global-icon>\n\n          <ng-container i18n>{{ pluginPanel.title }}</ng-container>\n        </button>\n      </div>\n\n      <div ngbAccordionCollapse>\n        <div ngbAccordionBody>\n          <ng-template>\n            <div class=\"block\" [innerHTML]=\"pluginPanel.html\"></div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>\n","import { Component, OnInit, inject, input, output, viewChild } from '@angular/core'\nimport { HooksService, Notifier } from '@app/core'\nimport {\n  NgbAccordionDirective,\n  NgbAccordionItem,\n  NgbAccordionHeader,\n  NgbAccordionToggle,\n  NgbAccordionButton,\n  NgbCollapse,\n  NgbAccordionCollapse,\n  NgbAccordionBody\n} from '@ng-bootstrap/ng-bootstrap'\nimport { About, ClientFilterHookName, PluginClientScope } from '@peertube/peertube-models'\nimport { InstanceService } from '../shared-main/instance/instance.service'\nimport { InstanceFeaturesTableComponent } from './instance-features-table.component'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { NgIf, NgFor } from '@angular/common'\n\n@Component({\n  selector: 'my-instance-about-accordion',\n  templateUrl: './instance-about-accordion.component.html',\n  styleUrls: [ './instance-about-accordion.component.scss' ],\n  imports: [\n    NgIf,\n    NgbAccordionDirective,\n    NgbAccordionItem,\n    NgbAccordionHeader,\n    NgbAccordionToggle,\n    NgbAccordionButton,\n    GlobalIconComponent,\n    NgbCollapse,\n    NgbAccordionCollapse,\n    NgbAccordionBody,\n    InstanceFeaturesTableComponent,\n    NgFor\n  ]\n})\nexport class InstanceAboutAccordionComponent implements OnInit {\n  private instanceService = inject(InstanceService)\n  private notifier = inject(Notifier)\n  private hookService = inject(HooksService)\n\n  readonly accordion = viewChild<NgbAccordionDirective>('accordion')\n\n  readonly init = output<InstanceAboutAccordionComponent>()\n\n  readonly displayInstanceName = input(true)\n  readonly displayInstanceShortDescription = input(true)\n\n  readonly pluginScope = input<PluginClientScope>(undefined)\n  readonly pluginHook = input<ClientFilterHookName>(undefined)\n\n  readonly panels = input({\n    features: true,\n    administrators: true,\n    moderation: true,\n    codeOfConduct: true,\n    terms: true\n  })\n\n  about: About\n  aboutHtml = {\n    terms: '',\n    codeOfConduct: '',\n    moderationInformation: '',\n    administrator: ''\n  }\n\n  pluginPanels: { id: string, title: string, html: string }[] = []\n\n  async ngOnInit () {\n    this.instanceService.getAbout()\n      .subscribe({\n        next: async about => {\n          this.about = about\n\n          this.aboutHtml = await this.instanceService.buildHtml(about)\n\n          this.init.emit(this)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n\n    this.pluginPanels = await this.hookService.wrapObject([], this.pluginScope(), this.pluginHook())\n  }\n\n  expandTerms () {\n    this.accordion().expand('terms')\n  }\n\n  expandCodeOfConduct () {\n    this.accordion().expand('code-of-conduct')\n  }\n\n  getAdministratorsPanel () {\n    if (!this.about) return false\n    if (!this.panels().administrators) return false\n\n    return !!(this.aboutHtml?.administrator || this.about?.instance.maintenanceLifetime || this.about?.instance.businessModel)\n  }\n\n  getTermsTitle () {\n    return $localize`Terms of ${this.about.instance.name}`\n  }\n\n  get moderationPanel () {\n    return this.panels().moderation && !!this.aboutHtml.moderationInformation\n  }\n\n  get codeOfConductPanel () {\n    return this.panels().codeOfConduct && !!this.aboutHtml.codeOfConduct\n  }\n\n  get termsPanel () {\n    return this.panels().terms && !!this.aboutHtml.terms\n  }\n}\n","<div *ngIf=\"instanceBannerUrl\" class=\"banner\" [ngClass]=\"{ rounded: rounded() }\">\n  <img class=\"rounded\" [src]=\"instanceBannerUrl\" alt=\"\">\n</div>\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, OnInit, booleanAttribute, inject, input } from '@angular/core'\nimport { ServerService } from '@app/core'\nimport { maxBy } from '@peertube/peertube-core-utils'\n\n@Component({\n  selector: 'my-instance-banner',\n  templateUrl: './instance-banner.component.html',\n  imports: [ NgIf, NgClass ]\n})\nexport class InstanceBannerComponent implements OnInit {\n  private server = inject(ServerService)\n\n  readonly rounded = input(false, { transform: booleanAttribute })\n\n  instanceBannerUrl: string\n\n  ngOnInit () {\n    const { instance } = this.server.getHTMLConfig()\n\n    this.instanceBannerUrl = maxBy(instance.banners, 'width')?.path\n  }\n}\n"]}