{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","We","e","i","ɵɵelement","o","$implicit","n","m","ɵɵadvance","ɵɵproperty","playlist_r1","ctx_r1","displayAsRow","VideoChannelPlaylistsComponent","videoPlaylistService","inject","VideoPlaylistService","videoChannelService","VideoChannelService","screenService","ScreenService","hooks","HooksService","videoPlaylists","pagination","currentPage","itemsPerPage","totalItems","onDataSubject","Subject","videoChannelSub","videoChannel","ngOnInit","videoChannelLoaded","subscribe","runAction","resetCurrentPage","loadVideoPlaylists","ngAfterViewInit","ngOnDestroy","unsubscribe","onNearOfBottom","hasMoreItems","isInMobileView","listChannelPlaylists","res","concat","data","total","playlists","next","u","selectors","decls","vars","consts","i18n_0","$localize","ɵɵtemplate","VideoChannelPlaylistsComponent_div_1_Template","ɵɵlistener","ctx","VideoChannelPlaylistsComponent_div_3_Template","t","asObservable","dependencies","NgIf","InfiniteScrollerDirective","NgFor","VideoPlaylistMiniatureComponent","styles","_VideoChannelPlaylistsComponent","Ye","qe","N","$event","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","onVideosLoaded","getVideosObservableFunction","getSyndicationItemsFunction","defaultSort","disabled","VideoChannelVideosComponent","videoService","VideoService","videosList","viewChild","getVideosObservable","bind","getSyndicationItems","alreadyLoaded","id","reloadVideos","filters","params","__spreadProps","__spreadValues","toVideosAPIObject","videoPagination","skipCount","listChannelVideos","getVideoChannelFeedUrls","disableForReuse","enabledForReuse","videos","viewQuery","rf","w","c","I","VideoChannelVideosComponent_my_videos_list_2_Template","CommonModule","VideosListComponent","encapsulation","_VideoChannelVideosComponent","Je","Ze","Ke","expanded","en","nn","tn","ctx_r0","bannerUrl","ɵɵsanitizeUrl","on","ɵɵpureFunction1","_c3","nameWithHost","an","_c4","rn","_r2","showSupportModal","ln","VideoChannelsComponent_div_0_ng_template_4_a_0_Template","VideoChannelsComponent_div_0_ng_template_4_my_subscribe_button_1_Template","VideoChannelsComponent_div_0_ng_template_4_button_2_Template","isManageable","isOwner","support","sn","ɵɵtext","getAccountAvatarSize","ownerAccount","getAccountUrl","ɵɵtextInterpolate","displayName","ɵɵtextInterpolate1","ownerBy","ownerDescriptionHTML","ɵɵsanitizeHtml","cn","ɵɵi18nExp","channelVideosCount","$","dn","_n","VideoChannelsComponent_div_0_27_ng_template_0_Template","pn","_r3","channelDescriptionExpanded","mn","gn","VideoChannelsComponent_div_0_32_ng_template_0_Template","Cn","un","VideoChannelsComponent_div_0_34_ng_template_0_Template","hn","vn","VideoChannelsComponent_div_0_36_ng_template_0_Template","On","VideoChannelsComponent_div_0_div_2_Template","VideoChannelsComponent_div_0_ng_template_4_Template","ɵɵtemplateRefExtractor","VideoChannelsComponent_div_0_ng_template_6_Template","VideoChannelsComponent_div_0_span_25_Template","VideoChannelsComponent_div_0_27_Template","VideoChannelsComponent_div_0_button_30_Template","VideoChannelsComponent_div_0_32_Template","VideoChannelsComponent_div_0_34_Template","VideoChannelsComponent_div_0_36_Template","z","getChannelAvatarSize","nameWithHostForced","followersCount","undefined","buttonsTemplate_r4","_c2","channelDescriptionHTML","hasShowMoreDescription","ownerTemplate_r5","links","VideoChannelsComponent","route","ActivatedRoute","authService","AuthService","restExtractor","RestExtractor","hotkeysService","HotkeysService","markdown","MarkdownService","blocklist","BlocklistService","metaService","MetaService","server","ServerService","subscribeButton","supportModal","hotkeys","isChannelManageable","routeSub","pipe","map","videoChannelName","distinctUntilChanged","switchMap","getVideoChannel","catchError","err","redirectTo404IfNotFound","HttpStatusCode","BAD_REQUEST_400","NOT_FOUND_404","__async","setTitle","setRSSFeeds","getChannelRSSFeeds","getOriginUrl","getHTMLConfig","instance","name","textMarkdownToHTML","description","withEmoji","withHtml","Account","loadChannelVideosCount","loadOwnerBlockStatus","Hotkey","isSubscribedToAll","isUserLoggedIn","add","label","routerLink","remove","revertMetaTags","isInSmallView","isLoggedIn","userId","getUser","isLocal","hasRight","UserRight","MANAGE_ANY_VIDEO_CHANNEL","length","show","sort","getStatus","accounts","hosts","host","status","updateBlockStatus","i18n_11","K","VideoChannelsComponent_div_0_Template","RouterLink","SubscribeButtonComponent","GlobalIconComponent","ActorAvatarComponent","AccountBlockBadgesComponent","CopyButtonComponent","NgTemplateOutlet","NgClass","HorizontalMenuComponent","RouterOutlet","SupportModalComponent","_VideoChannelsComponent","routes_default","path","component","providers","UserSubscriptionService","BulkService","AbuseService","VideoBlockService","children","redirectTo","pathMatch","reuse","enabled","key","vt","default"],"ignoreList":[],"sources":["src/app/+video-channels/video-channel-playlists/video-channel-playlists.component.html","src/app/+video-channels/video-channel-playlists/video-channel-playlists.component.ts","src/app/+video-channels/video-channel-videos/video-channel-videos.component.html","src/app/+video-channels/video-channel-videos/video-channel-videos.component.ts","src/app/+video-channels/video-channels.component.html","src/app/+video-channels/video-channels.component.ts","src/app/+video-channels/routes.ts"],"sourcesContent":["<div class=\"margin-content\">\n  <div i18n class=\"no-results\" *ngIf=\"pagination.totalItems === 0\">This channel does not have playlists.</div>\n\n  <div class=\"playlists\" myInfiniteScroller (nearOfBottom)=\"onNearOfBottom()\" [dataObservable]=\"onDataSubject.asObservable()\">\n    <div *ngFor=\"let playlist of videoPlaylists\" class=\"playlist-wrapper\">\n      <my-video-playlist-miniature [playlist]=\"playlist\" [toManage]=\"false\" [displayAsRow]=\"displayAsRow()\"></my-video-playlist-miniature>\n    </div>\n  </div>\n</div>\n","import { NgFor, NgIf } from '@angular/common'\nimport { AfterViewInit, Component, OnDestroy, OnInit, inject } from '@angular/core'\nimport { ComponentPagination, hasMoreItems, HooksService, resetCurrentPage, ScreenService } from '@app/core'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\nimport { VideoChannelService } from '@app/shared/shared-main/channel/video-channel.service'\nimport { VideoPlaylist } from '@app/shared/shared-video-playlist/video-playlist.model'\nimport { VideoPlaylistService } from '@app/shared/shared-video-playlist/video-playlist.service'\nimport { Subject, Subscription } from 'rxjs'\nimport { InfiniteScrollerDirective } from '../../shared/shared-main/common/infinite-scroller.directive'\nimport { VideoPlaylistMiniatureComponent } from '../../shared/shared-video-playlist/video-playlist-miniature.component'\n\n@Component({\n  selector: 'my-video-channel-playlists',\n  templateUrl: './video-channel-playlists.component.html',\n  styleUrls: [ './video-channel-playlists.component.scss' ],\n  imports: [ NgIf, InfiniteScrollerDirective, NgFor, VideoPlaylistMiniatureComponent ]\n})\nexport class VideoChannelPlaylistsComponent implements OnInit, AfterViewInit, OnDestroy {\n  private videoPlaylistService = inject(VideoPlaylistService)\n  private videoChannelService = inject(VideoChannelService)\n  private screenService = inject(ScreenService)\n  private hooks = inject(HooksService)\n\n  videoPlaylists: VideoPlaylist[] = []\n\n  pagination: ComponentPagination = {\n    currentPage: 1,\n    itemsPerPage: 20,\n    totalItems: null\n  }\n\n  onDataSubject = new Subject<any[]>()\n\n  private videoChannelSub: Subscription\n  private videoChannel: VideoChannel\n\n  ngOnInit () {\n    // Parent get the video channel for us\n    this.videoChannelSub = this.videoChannelService.videoChannelLoaded\n      .subscribe(videoChannel => {\n        this.videoChannel = videoChannel\n\n        this.hooks.runAction('action:video-channel-playlists.video-channel.loaded', 'video-channel', { videoChannel })\n\n        this.videoPlaylists = []\n        resetCurrentPage(this.pagination)\n        this.loadVideoPlaylists()\n      })\n  }\n\n  ngAfterViewInit () {\n    this.hooks.runAction('action:video-channel-playlists.init', 'video-channel')\n  }\n\n  ngOnDestroy () {\n    if (this.videoChannelSub) this.videoChannelSub.unsubscribe()\n  }\n\n  onNearOfBottom () {\n    if (!hasMoreItems(this.pagination)) return\n\n    this.pagination.currentPage += 1\n    this.loadVideoPlaylists()\n  }\n\n  displayAsRow () {\n    return this.screenService.isInMobileView()\n  }\n\n  private loadVideoPlaylists () {\n    this.videoPlaylistService.listChannelPlaylists(this.videoChannel, this.pagination)\n      .subscribe(res => {\n        this.videoPlaylists = this.videoPlaylists.concat(res.data)\n        this.pagination.totalItems = res.total\n\n        this.hooks.runAction('action:video-channel-playlists.playlists.loaded', 'video-channel', { playlists: this.videoPlaylists })\n\n        this.onDataSubject.next(res.data)\n      })\n  }\n}\n","<h1 class=\"visually-hidden\" i18n>Videos</h1>\n\n<my-videos-list\n  #videosList\n\n  *ngIf=\"videoChannel\"\n\n  [getVideosObservableFunction]=\"getVideosObservableFunction\"\n  [getSyndicationItemsFunction]=\"getSyndicationItemsFunction\"\n\n  [defaultSort]=\"defaultSort\"\n\n  displayFilters=\"true\"\n  displayBy=\"false\"\n  [displayAsRow]=\"displayAsRow()\"\n\n  hideScopeFilter=\"true\"\n\n  loadUserVideoPreferences=\"true\"\n\n  highlightLives=\"true\"\n\n  [disabled]=\"disabled\"\n\n  (videosLoaded)=\"onVideosLoaded($event)\"\n>\n</my-videos-list>\n","import { CommonModule } from '@angular/common'\nimport { AfterViewInit, Component, OnDestroy, OnInit, inject, viewChild } from '@angular/core'\nimport { ComponentPaginationLight, DisableForReuseHook, HooksService, ScreenService } from '@app/core'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\nimport { VideoChannelService } from '@app/shared/shared-main/channel/video-channel.service'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { VideoFilters } from '@app/shared/shared-video-miniature/video-filters.model'\nimport { Video, VideoSortField } from '@peertube/peertube-models'\nimport { Subscription } from 'rxjs'\nimport { VideosListComponent } from '../../shared/shared-video-miniature/videos-list.component'\n\n@Component({\n  selector: 'my-video-channel-videos',\n  templateUrl: './video-channel-videos.component.html',\n  imports: [ CommonModule, VideosListComponent ]\n})\nexport class VideoChannelVideosComponent implements OnInit, AfterViewInit, OnDestroy, DisableForReuseHook {\n  private screenService = inject(ScreenService)\n  private videoChannelService = inject(VideoChannelService)\n  private videoService = inject(VideoService)\n  private hooks = inject(HooksService)\n\n  readonly videosList = viewChild<VideosListComponent>('videosList')\n\n  getVideosObservableFunction = this.getVideosObservable.bind(this)\n  getSyndicationItemsFunction = this.getSyndicationItems.bind(this)\n\n  defaultSort = '-publishedAt' as VideoSortField\n\n  videoChannel: VideoChannel\n  disabled = false\n\n  private videoChannelSub: Subscription\n  private alreadyLoaded = false\n\n  ngOnInit () {\n    // Parent get the video channel for us\n    this.videoChannelSub = this.videoChannelService.videoChannelLoaded\n      .subscribe(videoChannel => {\n        if (this.videoChannel?.id === videoChannel.id) return\n\n        this.videoChannel = videoChannel\n        if (this.alreadyLoaded) this.videosList().reloadVideos()\n\n        this.hooks.runAction('action:video-channel-videos.video-channel.loaded', 'video-channel', { videoChannel })\n\n        this.alreadyLoaded = true\n      })\n  }\n\n  ngAfterViewInit () {\n    this.hooks.runAction('action:video-channel-videos.init', 'video-channel')\n  }\n\n  ngOnDestroy () {\n    if (this.videoChannelSub) this.videoChannelSub.unsubscribe()\n  }\n\n  getVideosObservable (pagination: ComponentPaginationLight, filters: VideoFilters) {\n    const params = {\n      ...filters.toVideosAPIObject(),\n\n      videoPagination: pagination,\n      videoChannel: this.videoChannel,\n      skipCount: true\n    }\n\n    return this.videoService.listChannelVideos(params)\n  }\n\n  getSyndicationItems () {\n    return this.videoService.getVideoChannelFeedUrls(this.videoChannel.id)\n  }\n\n  displayAsRow () {\n    return this.screenService.isInMobileView()\n  }\n\n  disableForReuse () {\n    this.disabled = true\n  }\n\n  enabledForReuse () {\n    this.disabled = false\n  }\n\n  onVideosLoaded (videos: Video[]) {\n    this.hooks.runAction('action:video-channel-videos.videos.loaded', 'video-channel', { videos })\n  }\n}\n","<div class=\"root\" *ngIf=\"videoChannel\">\n  <div class=\"margin-content\">\n    <div class=\"banner mb-4\" *ngIf=\"videoChannel.bannerUrl\">\n      <img [src]=\"videoChannel.bannerUrl\" alt=\"Channel banner\">\n    </div>\n  </div>\n\n  <div class=\"margin-content channel-info\">\n\n    <ng-template #buttonsTemplate>\n      <a *ngIf=\"isManageable()\" [routerLink]=\"[ '/manage/update', videoChannel.nameWithHost  ]\" class=\"peertube-button-link primary-button\" i18n>\n        Manage channel\n      </a>\n\n      <my-subscribe-button *ngIf=\"!isOwner()\" #subscribeButton [videoChannels]=\"[videoChannel]\"></my-subscribe-button>\n\n      <button *ngIf=\"videoChannel.support\" (click)=\"showSupportModal()\" class=\"support-button peertube-button tertiary-button\">\n        <my-global-icon iconName=\"support\" aria-hidden=\"true\"></my-global-icon>\n        <span class=\"icon-text\" i18n>Support</span>\n      </button>\n    </ng-template>\n\n    <ng-template #ownerTemplate>\n      <div class=\"owner-block\">\n        <div class=\"section-label\" i18n>OWNER ACCOUNT</div>\n\n        <div class=\"avatar-row\">\n          <my-actor-avatar\n            class=\"account-avatar\" [size]=\"getAccountAvatarSize()\"\n            [actor]=\"ownerAccount\" actorType=\"account\" [internalHref]=\"getAccountUrl()\"\n          ></my-actor-avatar>\n\n          <div class=\"actor-info\">\n            <h4>\n              <a class=\"text-decoration-none\" [routerLink]=\"getAccountUrl()\" title=\"View account\" i18n-title>{{ ownerAccount.displayName }}</a>\n            </h4>\n\n            <div class=\"actor-handle\">&#64;{{ videoChannel.ownerBy }}</div>\n\n            <my-account-block-badges [account]=\"ownerAccount\"></my-account-block-badges>\n          </div>\n        </div>\n\n        <div class=\"owner-description\">\n          <div class=\"description-html\" [innerHTML]=\"ownerDescriptionHTML\"></div>\n        </div>\n\n        <a class=\"view-account peertube-button-link primary-button short mt-3\" [routerLink]=\"getAccountUrl()\" i18n>\n          View account\n        </a>\n\n        <a class=\"view-account link-primary complete\" [routerLink]=\"getAccountUrl()\" i18n>\n          View owner account\n        </a>\n      </div>\n    </ng-template>\n\n    <div class=\"channel-avatar-row\">\n      <my-actor-avatar [size]=\"getChannelAvatarSize()\" [actor]=\"videoChannel\" actorType=\"channel\"></my-actor-avatar>\n\n      <div>\n        <div class=\"section-label\" i18n>VIDEO CHANNEL</div>\n\n        <div class=\"actor-info\">\n          <div>\n            <div class=\"actor-display-name\">\n              <h1>{{ videoChannel.displayName }}</h1>\n            </div>\n\n            <div class=\"actor-handle\">\n              <span>&#64;{{ videoChannel.nameWithHost }}</span>\n\n              <my-copy-button\n                [value]=\"videoChannel.nameWithHostForced\" i18n-notification notification=\"Handle copied\"\n                title=\"Copy channel handle\" i18n-title\n              ></my-copy-button>\n            </div>\n\n            <div class=\"actor-counters\">\n              <span i18n>{videoChannel.followersCount, plural, =0 {No subscribers} =1 {1 subscriber} other {{{ videoChannel.followersCount }} subscribers}}</span>\n\n              <span class=\"videos-count\" *ngIf=\"channelVideosCount !== undefined\" i18n>\n                {channelVideosCount, plural, =0 {No videos} =1 {1 video} other {{{ channelVideosCount }} videos}}\n              </span>\n            </div>\n          </div>\n\n          <div class=\"channel-buttons right\">\n            <ng-template *ngTemplateOutlet=\"buttonsTemplate\"></ng-template>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"channel-description\" [ngClass]=\"{ expanded: channelDescriptionExpanded }\">\n      <div class=\"description-html\" [innerHTML]=\"channelDescriptionHTML\"></div>\n    </div>\n\n    <button *ngIf=\"hasShowMoreDescription()\" class=\"show-more peertube-button-like-link\"\n      (click)=\"channelDescriptionExpanded = !channelDescriptionExpanded\"\n      title=\"Show the complete description\" i18n-title i18n\n    >\n      Show more...\n    </button>\n\n    <div class=\"channel-buttons bottom\">\n      <ng-template *ngTemplateOutlet=\"buttonsTemplate\"></ng-template>\n    </div>\n\n    <div class=\"owner-card\">\n      <ng-template *ngTemplateOutlet=\"ownerTemplate\"></ng-template>\n    </div>\n  </div>\n\n  <div class=\"margin-content bottom-owner\">\n    <ng-template *ngTemplateOutlet=\"ownerTemplate\"></ng-template>\n  </div>\n\n  <div class=\"margin-content mb-3\">\n    <my-horizontal-menu [menuEntries]=\"links\"></my-horizontal-menu>\n  </div>\n\n  <router-outlet></router-outlet>\n</div>\n\n<my-support-modal #supportModal [name]=\"videoChannel?.displayName\" [content]=\"videoChannel?.support\"></my-support-modal>\n","import { NgClass, NgIf, NgTemplateOutlet } from '@angular/common'\nimport { Component, OnDestroy, OnInit, inject, viewChild } from '@angular/core'\nimport { ActivatedRoute, RouterLink, RouterOutlet } from '@angular/router'\nimport { AuthService, Hotkey, HotkeysService, MarkdownService, MetaService, RestExtractor, ScreenService, ServerService } from '@app/core'\nimport { getOriginUrl } from '@app/helpers'\nimport { Account } from '@app/shared/shared-main/account/account.model'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\nimport { VideoChannelService } from '@app/shared/shared-main/channel/video-channel.service'\nimport { HorizontalMenuComponent, HorizontalMenuEntry } from '@app/shared/shared-main/menu/horizontal-menu.component'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { BlocklistService } from '@app/shared/shared-moderation/blocklist.service'\nimport { SupportModalComponent } from '@app/shared/shared-support-modal/support-modal.component'\nimport { SubscribeButtonComponent } from '@app/shared/shared-user-subscription/subscribe-button.component'\nimport { getChannelRSSFeeds } from '@peertube/peertube-core-utils'\nimport { HttpStatusCode, UserRight } from '@peertube/peertube-models'\nimport { Subscription } from 'rxjs'\nimport { catchError, distinctUntilChanged, map, switchMap } from 'rxjs/operators'\nimport { ActorAvatarComponent } from '../shared/shared-actor-image/actor-avatar.component'\nimport { GlobalIconComponent } from '../shared/shared-icons/global-icon.component'\nimport { CopyButtonComponent } from '../shared/shared-main/buttons/copy-button.component'\nimport { AccountBlockBadgesComponent } from '../shared/shared-moderation/account-block-badges.component'\n\n@Component({\n  templateUrl: './video-channels.component.html',\n  styleUrls: [ './video-channels.component.scss' ],\n  imports: [\n    NgIf,\n    RouterLink,\n    SubscribeButtonComponent,\n    GlobalIconComponent,\n    ActorAvatarComponent,\n    AccountBlockBadgesComponent,\n    CopyButtonComponent,\n    NgTemplateOutlet,\n    NgClass,\n    HorizontalMenuComponent,\n    RouterOutlet,\n    SupportModalComponent\n  ]\n})\nexport class VideoChannelsComponent implements OnInit, OnDestroy {\n  private route = inject(ActivatedRoute)\n  private authService = inject(AuthService)\n  private videoChannelService = inject(VideoChannelService)\n  private videoService = inject(VideoService)\n  private restExtractor = inject(RestExtractor)\n  private hotkeysService = inject(HotkeysService)\n  private screenService = inject(ScreenService)\n  private markdown = inject(MarkdownService)\n  private blocklist = inject(BlocklistService)\n  private metaService = inject(MetaService)\n  private server = inject(ServerService)\n\n  readonly subscribeButton = viewChild<SubscribeButtonComponent>('subscribeButton')\n  readonly supportModal = viewChild<SupportModalComponent>('supportModal')\n\n  videoChannel: VideoChannel\n  ownerAccount: Account\n  hotkeys: Hotkey[]\n  links: HorizontalMenuEntry[] = []\n  isChannelManageable = false\n\n  channelVideosCount: number\n  ownerDescriptionHTML = ''\n  channelDescriptionHTML = ''\n  channelDescriptionExpanded = false\n\n  private routeSub: Subscription\n\n  ngOnInit () {\n    this.routeSub = this.route.params\n      .pipe(\n        map(params => params['videoChannelName']),\n        distinctUntilChanged(),\n        switchMap(videoChannelName => this.videoChannelService.getVideoChannel(videoChannelName)),\n        catchError(err =>\n          this.restExtractor.redirectTo404IfNotFound(err, 'other', [\n            HttpStatusCode.BAD_REQUEST_400,\n            HttpStatusCode.NOT_FOUND_404\n          ])\n        )\n      )\n      .subscribe(async videoChannel => {\n        this.metaService.setTitle(videoChannel.displayName)\n        this.metaService.setRSSFeeds(getChannelRSSFeeds(getOriginUrl(), this.server.getHTMLConfig().instance.name, videoChannel))\n\n        this.channelDescriptionHTML = await this.markdown.textMarkdownToHTML({\n          markdown: videoChannel.description,\n          withEmoji: true,\n          withHtml: true\n        })\n\n        this.ownerDescriptionHTML = await this.markdown.textMarkdownToHTML({\n          markdown: videoChannel.ownerAccount.description,\n          withEmoji: true,\n          withHtml: true\n        })\n\n        // After the markdown renderer to avoid layout changes\n        this.videoChannel = videoChannel\n        this.ownerAccount = new Account(this.videoChannel.ownerAccount)\n\n        this.loadChannelVideosCount()\n        this.loadOwnerBlockStatus()\n      })\n\n    this.hotkeys = [\n      new Hotkey('Shift+s', () => {\n        const subscribeButton = this.subscribeButton()\n        if (subscribeButton.isSubscribedToAll()) subscribeButton.unsubscribe()\n        else subscribeButton.subscribe()\n\n        return false\n      }, $localize`Subscribe to the account`)\n    ]\n    if (this.isUserLoggedIn()) this.hotkeysService.add(this.hotkeys)\n\n    this.links = [\n      { label: $localize`Videos`, routerLink: 'videos' },\n      { label: $localize`Playlists`, routerLink: 'video-playlists' }\n    ]\n  }\n\n  ngOnDestroy () {\n    if (this.routeSub) this.routeSub.unsubscribe()\n\n    // Unbind hotkeys\n    if (this.isUserLoggedIn()) this.hotkeysService.remove(this.hotkeys)\n\n    this.metaService.revertMetaTags()\n  }\n\n  isInSmallView () {\n    return this.screenService.isInSmallView()\n  }\n\n  getAccountAvatarSize () {\n    if (this.isInSmallView()) return 64\n\n    return 48\n  }\n\n  getChannelAvatarSize () {\n    if (this.isInSmallView()) return 80\n\n    return 120\n  }\n\n  isUserLoggedIn () {\n    return this.authService.isLoggedIn()\n  }\n\n  isOwner () {\n    if (!this.isUserLoggedIn()) return false\n\n    return this.videoChannel?.ownerAccount.userId === this.authService.getUser().id\n  }\n\n  isManageable () {\n    if (!this.videoChannel.isLocal) return false\n    if (!this.isUserLoggedIn()) return false\n\n    return this.isOwner() || this.authService.getUser().hasRight(UserRight.MANAGE_ANY_VIDEO_CHANNEL)\n  }\n\n  hasShowMoreDescription () {\n    return !this.channelDescriptionExpanded && this.channelDescriptionHTML.length > 100\n  }\n\n  showSupportModal () {\n    this.supportModal().show()\n  }\n\n  getAccountUrl () {\n    return [ '/a', this.videoChannel.ownerBy ]\n  }\n\n  private loadChannelVideosCount () {\n    this.videoService.listChannelVideos({\n      videoChannel: this.videoChannel,\n      videoPagination: {\n        currentPage: 1,\n        itemsPerPage: 0\n      },\n      sort: '-publishedAt'\n    }).subscribe(res => this.channelVideosCount = res.total)\n  }\n\n  private loadOwnerBlockStatus () {\n    this.blocklist.getStatus({ accounts: [ this.ownerAccount.nameWithHostForced ], hosts: [ this.ownerAccount.host ] })\n      .subscribe(status => this.ownerAccount.updateBlockStatus(status))\n  }\n}\n","import { Routes } from '@angular/router'\nimport { VideoChannelPlaylistsComponent } from './video-channel-playlists/video-channel-playlists.component'\nimport { VideoChannelVideosComponent } from './video-channel-videos/video-channel-videos.component'\nimport { VideoChannelsComponent } from './video-channels.component'\nimport { AbuseService } from '@app/shared/shared-moderation/abuse.service'\nimport { BlocklistService } from '@app/shared/shared-moderation/blocklist.service'\nimport { BulkService } from '@app/shared/shared-moderation/bulk.service'\nimport { VideoBlockService } from '@app/shared/shared-moderation/video-block.service'\nimport { UserSubscriptionService } from '@app/shared/shared-user-subscription/user-subscription.service'\nimport { VideoPlaylistService } from '@app/shared/shared-video-playlist/video-playlist.service'\n\nexport default [\n  {\n    path: ':videoChannelName',\n    component: VideoChannelsComponent,\n    providers: [\n      VideoPlaylistService,\n      UserSubscriptionService,\n      BlocklistService,\n      BulkService,\n      AbuseService,\n      VideoBlockService\n    ],\n    children: [\n      {\n        path: '',\n        redirectTo: 'videos',\n        pathMatch: 'full'\n      },\n      {\n        path: 'videos',\n        component: VideoChannelVideosComponent,\n        data: {\n          reuse: {\n            enabled: true,\n            key: 'video-channel-videos-list'\n          }\n        }\n      },\n      {\n        path: 'video-playlists',\n        component: VideoChannelPlaylistsComponent\n      }\n    ]\n  }\n] satisfies Routes\n"]}