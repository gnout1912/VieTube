{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵlistener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","onVideoUpdated","ɵɵelementEnd","VideoManageComponent","route","inject","ActivatedRoute","serverService","ServerService","notifier","Notifier","manageController","VideoManageController","isUpdatingVideo","loaded","ngOnInit","__async","data","snapshot","resolverData","video","userChannels","captions","chapters","videoSource","live","videoPasswords","userQuota","privacies","videoEdit","VideoEdit","createFromAPI","getHTMLConfig","map","p","password","setStore","setConfig","manageType","serverConfig","ngOnDestroy","cancelUploadIfNeeded","success","onUnload","event","text","canDeactivate","returnValue","hasPendingChanges","$localize","n","selectors","hostBindings","rf","ctx","$event","ɵɵresolveWindow","features","O","decls","vars","consts","template","ɵɵtemplate","VideoManageComponent_my_video_manage_container_1_Template","e","ɵɵadvance","ɵɵproperty","dependencies","CommonModule","NgIf","FormsModule","ReactiveFormsModule","VideoManageContainerComponent","encapsulation","_VideoManageComponent","VideoManageResolver","videoService","VideoService","liveVideoService","LiveVideoService","authService","AuthService","videoCaptionService","VideoCaptionService","videoChapterService","VideoChapterService","videoPasswordService","VideoPasswordService","userService","UserService","resolve","uuid","params","getVideo","videoId","pipe","switchMap","forkJoin","buildObservables","of","getSource","id","listUserChannelsForSelect","listCaptions","result","getChapters","isLive","getVideoLive","undefined","privacy","VideoPrivacy","PASSWORD_PROTECTED","getVideoPasswords","videoUUID","getMyVideoQuotaUsed","getVideoPrivacies","factory","ɵfac","_VideoManageResolver","routes_default","path","component","canActivate","LoginGuard","CanDeactivateGuard","providers","I18nPrimengCalendarService","VideoUploadService","VideoStudioService","VideoStateMessageService","children","manageRoutes","Je","default"],"ignoreList":[],"sources":["src/app/+videos-publish-manage/+video-manage/video-manage.component.html","src/app/+videos-publish-manage/+video-manage/video-manage.component.ts","src/app/+videos-publish-manage/+video-manage/video-manage.resolver.ts","src/app/+videos-publish-manage/+video-manage/routes.ts"],"sourcesContent":["<div class=\"margin-content\">\n  <my-video-manage-container\n    *ngIf=\"loaded\"\n    canUpdate=\"true\" canWatch=\"true\" cancelLink=\"/my-library/videos\" (videoUpdated)=\"onVideoUpdated()\"\n  ></my-video-manage-container>\n</div>\n","import { CommonModule } from '@angular/common'\nimport { Component, HostListener, inject, OnDestroy, OnInit } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { CanComponentDeactivate, Notifier, ServerService } from '@app/core'\nimport { VideoEdit } from '../shared-manage/common/video-edit.model'\nimport { VideoManageContainerComponent } from '../shared-manage/video-manage-container.component'\nimport { VideoManageController } from '../shared-manage/video-manage-controller.service'\nimport { VideoManageResolverData } from './video-manage.resolver'\n\n@Component({\n  selector: 'my-video-manage',\n  templateUrl: './video-manage.component.html',\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    VideoManageContainerComponent\n  ],\n  providers: [ VideoManageController ]\n})\nexport class VideoManageComponent implements OnInit, OnDestroy, CanComponentDeactivate {\n  private route = inject(ActivatedRoute)\n  private serverService = inject(ServerService)\n  private notifier = inject(Notifier)\n\n  private manageController = inject(VideoManageController)\n\n  isUpdatingVideo = false\n  loaded = false\n\n  async ngOnInit () {\n    const data = this.route.snapshot.data.resolverData as VideoManageResolverData\n    const { video, userChannels, captions, chapters, videoSource, live, videoPasswords, userQuota, privacies } = data\n\n    const videoEdit = await VideoEdit.createFromAPI(this.serverService.getHTMLConfig(), {\n      video,\n      captions,\n      chapters,\n      live,\n      videoSource,\n      videoPasswords: videoPasswords.map(p => p.password)\n    })\n\n    this.manageController.setStore({\n      videoEdit,\n      userQuota,\n      userChannels,\n      privacies\n    })\n\n    this.manageController.setConfig({ manageType: 'update', serverConfig: this.serverService.getHTMLConfig() })\n\n    this.loaded = true\n  }\n\n  ngOnDestroy () {\n    this.manageController.cancelUploadIfNeeded()\n  }\n\n  onVideoUpdated () {\n    this.notifier.success($localize`Video updated.`)\n  }\n\n  @HostListener('window:beforeunload', [ '$event' ])\n  onUnload (event: any) {\n    const { text, canDeactivate } = this.canDeactivate()\n\n    if (canDeactivate) return\n\n    event.returnValue = text\n    return text\n  }\n\n  canDeactivate (): { canDeactivate: boolean, text?: string } {\n    return {\n      canDeactivate: !this.manageController.hasPendingChanges(),\n      text: $localize`You have unsaved changes. Are you sure you want to leave?`\n    }\n  }\n}\n","import { Injectable, inject } from '@angular/core'\nimport { ActivatedRouteSnapshot } from '@angular/router'\nimport { AuthService, ServerService, UserService } from '@app/core'\nimport { listUserChannelsForSelect } from '@app/helpers'\nimport { VideoCaptionService } from '@app/shared/shared-main/video-caption/video-caption.service'\nimport { VideoChapterService } from '@app/shared/shared-main/video/video-chapter.service'\nimport { VideoDetails } from '@app/shared/shared-main/video/video-details.model'\nimport { VideoPasswordService } from '@app/shared/shared-main/video/video-password.service'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { LiveVideoService } from '@app/shared/shared-video-live/live-video.service'\nimport {\n  LiveVideo,\n  UserVideoQuota,\n  VideoCaption,\n  VideoChapter,\n  VideoConstant,\n  VideoPassword,\n  VideoPrivacy,\n  VideoPrivacyType,\n  VideoSource\n} from '@peertube/peertube-models'\nimport { forkJoin, of } from 'rxjs'\nimport { map, switchMap } from 'rxjs/operators'\nimport { SelectChannelItem } from '../../../types'\n\nexport type VideoManageResolverData = {\n  video: VideoDetails\n  videoSource: VideoSource\n  userChannels: SelectChannelItem[]\n  captions: VideoCaption[]\n  chapters: VideoChapter[]\n  live: LiveVideo\n  videoPasswords: VideoPassword[]\n  userQuota: UserVideoQuota\n  privacies: VideoConstant<VideoPrivacyType>[]\n}\n\n@Injectable()\nexport class VideoManageResolver {\n  private videoService = inject(VideoService)\n  private liveVideoService = inject(LiveVideoService)\n  private authService = inject(AuthService)\n  private videoCaptionService = inject(VideoCaptionService)\n  private videoChapterService = inject(VideoChapterService)\n  private videoPasswordService = inject(VideoPasswordService)\n  private userService = inject(UserService)\n  private serverService = inject(ServerService)\n\n  resolve (route: ActivatedRouteSnapshot) {\n    const uuid: string = route.params['uuid']\n\n    return this.videoService.getVideo({ videoId: uuid })\n      .pipe(\n        switchMap(video => forkJoin(this.buildObservables(video))),\n        map(([ video, videoSource, userChannels, captions, chapters, live, videoPasswords, userQuota, privacies ]) =>\n          ({\n            video,\n            userChannels,\n            captions,\n            chapters,\n            videoSource,\n            live,\n            videoPasswords,\n            userQuota,\n            privacies\n          }) as VideoManageResolverData\n        )\n      )\n  }\n\n  private buildObservables (video: VideoDetails) {\n    return [\n      of(video),\n\n      this.videoService.getSource(video.id),\n\n      listUserChannelsForSelect(this.authService),\n\n      this.videoCaptionService\n        .listCaptions(video.uuid)\n        .pipe(\n          map(result => result.data)\n        ),\n\n      this.videoChapterService\n        .getChapters({ videoId: video.uuid })\n        .pipe(\n          map(({ chapters }) => chapters)\n        ),\n\n      video.isLive\n        ? this.liveVideoService.getVideoLive(video.id)\n        : of(undefined),\n\n      video.privacy.id === VideoPrivacy.PASSWORD_PROTECTED\n        ? this.videoPasswordService.getVideoPasswords({ videoUUID: video.uuid })\n        : of([]),\n\n      this.userService.getMyVideoQuotaUsed(),\n\n      this.serverService.getVideoPrivacies()\n    ]\n  }\n}\n","import { Routes } from '@angular/router'\nimport { CanDeactivateGuard, LoginGuard } from '@app/core'\nimport { LiveVideoService } from '@app/shared/shared-video-live/live-video.service'\nimport { VideoStateMessageService } from '@app/shared/shared-video/video-state-message.service'\nimport { I18nPrimengCalendarService } from '../shared-manage/common/i18n-primeng-calendar.service'\nimport { VideoUploadService } from '../shared-manage/common/video-upload.service'\nimport { manageRoutes } from '../shared-manage/routes'\nimport { VideoStudioService } from '../shared-manage/studio/video-studio.service'\nimport { VideoManageComponent } from './video-manage.component'\nimport { VideoManageResolver } from './video-manage.resolver'\n\nexport default [\n  {\n    path: '',\n    component: VideoManageComponent,\n    canActivate: [ LoginGuard ],\n    canDeactivate: [ CanDeactivateGuard ],\n    providers: [\n      VideoManageResolver,\n      LiveVideoService,\n      I18nPrimengCalendarService,\n      VideoUploadService,\n      VideoStudioService,\n      VideoStateMessageService\n    ],\n    resolve: {\n      resolverData: VideoManageResolver\n    },\n    children: manageRoutes\n  }\n] satisfies Routes\n"]}