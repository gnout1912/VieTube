{"version":3,"mappings":"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","names":["import_debug","re","oe","ae","i","le","se","ce","r","l","v","ɵɵelementStart","ɵɵlistener","filter_r3","ɵɵrestoreView","_r2","$implicit","ctx_r3","ɵɵnextContext","ɵɵresetView","onFilterClick","ɵɵelement","ɵɵtext","ɵɵelementEnd","e","S","ɵɵadvance","ɵɵproperty","ɵɵpureFunction1","_c2","isFilterEnabled","ɵɵtextInterpolate1","label","ue","ɵɵelementContainerStart","ɵɵtemplate","AdvancedInputFilterComponent_ng_container_1_ng_container_3_button_3_Template","O","ɵɵtextInterpolate","group_r5","title","children","pe","AdvancedInputFilterComponent_ng_container_1_ng_container_3_Template","filters","he","_r6","onSearchClick","debugLogger","debug","AdvancedInputFilterComponent","route","inject","ActivatedRoute","restService","RestService","router","Router","input","emitOnInit","transform","booleanAttribute","icon","placeholder","inputId","search","output","searchValue","enabledFilters","Set","searchStream","viewInitialized","emitSearchAfterViewInit","ngOnInit","initSearchStream","listenToRouteSearchChange","ngAfterViewInit","emitSearch","onInputSearch","event","scheduleSearchUpdate","target","value","onResetTableFilter","immediateSearchUpdate","hasFilters","length","filter","has","newSearch","removeFilterToSearch","addFilterToSearch","setQueryParams","next","parseFilters","queryParams","subscribe","params","Subject","pipe","debounceTime","distinctUntilChanged","emit","searchParams","trim","navigate","relativeTo","__spreadValues","snapshot","removedFilter","replace","newFilter","filterTokens","tokenizeString","tokensToAdd","searchTokens","filterToken","prefix","split","shift","t","startsWith","push","concat","join","group","every","includes","add","F","selectors","inputs","outputs","decls","vars","consts","i18n_0","$localize","AdvancedInputFilterComponent_ng_container_1_Template","AdvancedInputFilterComponent_button_2_Template","ɵɵtwoWayListener","$event","i0","_r1","ɵɵtwoWayBindingSet","ctx","input_r7","ɵɵreference","focus","_c0","_c1","ɵɵtwoWayProperty","dependencies","NgbDropdown","NgIf","NgbDropdownToggle","NgbDropdownMenu","NgFor","GlobalIconComponent","NgClass","FormsModule","DefaultValueAccessor","NgControlStatus","NgModel","styles","_AdvancedInputFilterComponent","Pe","a"],"ignoreList":[],"sources":["src/app/shared/shared-forms/advanced-input-filter.component.ts","src/app/shared/shared-forms/advanced-input-filter.component.html"],"sourcesContent":["import { NgClass, NgFor, NgIf } from '@angular/common'\nimport { AfterViewInit, Component, OnInit, booleanAttribute, inject, input, output } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { RestService } from '@app/core'\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle } from '@ng-bootstrap/ng-bootstrap'\nimport debug from 'debug'\nimport { Subject } from 'rxjs'\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\n\nexport type AdvancedInputFilter = {\n  title: string\n\n  children: AdvancedInputFilterChild[]\n}\n\nexport type AdvancedInputFilterChild = {\n  label: string\n  value: string\n}\n\nconst debugLogger = debug('peertube:AdvancedInputFilterComponent')\n\n@Component({\n  selector: 'my-advanced-input-filter',\n  templateUrl: './advanced-input-filter.component.html',\n  styleUrls: [ './advanced-input-filter.component.scss' ],\n  imports: [ NgbDropdown, NgIf, NgbDropdownToggle, NgbDropdownMenu, NgFor, GlobalIconComponent, NgClass, FormsModule ]\n})\nexport class AdvancedInputFilterComponent implements OnInit, AfterViewInit {\n  private route = inject(ActivatedRoute)\n  private restService = inject(RestService)\n  private router = inject(Router)\n\n  readonly filters = input<AdvancedInputFilter[]>([])\n  readonly emitOnInit = input(true, { transform: booleanAttribute })\n  readonly icon = input(false, { transform: booleanAttribute })\n  readonly placeholder = input($localize`Filter...`)\n  readonly inputId = input('table-filter')\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  readonly search = output<string>()\n\n  searchValue: string\n\n  private enabledFilters = new Set<string>()\n\n  private searchStream: Subject<string>\n\n  private viewInitialized = false\n  private emitSearchAfterViewInit = false\n\n  ngOnInit () {\n    this.initSearchStream()\n    this.listenToRouteSearchChange()\n  }\n\n  ngAfterViewInit () {\n    this.viewInitialized = true\n\n    // Init after view init to not send an event too early\n    if (this.emitOnInit() && this.emitSearchAfterViewInit) this.emitSearch()\n  }\n\n  onInputSearch (event: Event) {\n    this.scheduleSearchUpdate((event.target as HTMLInputElement).value)\n  }\n\n  onSearchClick () {\n    this.scheduleSearchUpdate(this.searchValue)\n  }\n\n  onResetTableFilter () {\n    this.immediateSearchUpdate('')\n  }\n\n  hasFilters () {\n    const filters = this.filters()\n    return filters && filters.length !== 0\n  }\n\n  isFilterEnabled (filter: AdvancedInputFilterChild) {\n    return this.enabledFilters.has(filter.value)\n  }\n\n  onFilterClick (filter: AdvancedInputFilterChild) {\n    const newSearch = this.isFilterEnabled(filter)\n      ? this.removeFilterToSearch(this.searchValue, filter)\n      : this.addFilterToSearch(this.searchValue, filter)\n\n    this.setQueryParams(newSearch)\n  }\n\n  private scheduleSearchUpdate (value: string) {\n    this.searchValue = value\n    this.searchStream.next(this.searchValue)\n  }\n\n  private immediateSearchUpdate (value: string) {\n    this.searchValue = value\n\n    this.setQueryParams(this.searchValue)\n    this.parseFilters(this.searchValue)\n    this.emitSearch()\n  }\n\n  private listenToRouteSearchChange () {\n    this.route.queryParams\n      .subscribe(params => {\n        const search = params.search || ''\n\n        debugLogger('On route search change \"%s\".', search)\n\n        if (this.searchValue === search) return\n\n        this.searchValue = search\n\n        this.parseFilters(this.searchValue)\n\n        this.emitSearch()\n      })\n  }\n\n  private initSearchStream () {\n    this.searchStream = new Subject()\n\n    this.searchStream\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged()\n      )\n      .subscribe(() => {\n        this.setQueryParams(this.searchValue)\n        this.parseFilters(this.searchValue)\n\n        this.emitSearch()\n      })\n  }\n\n  private emitSearch () {\n    if (!this.viewInitialized) {\n      this.emitSearchAfterViewInit = true\n      return\n    }\n\n    debugLogger('On search \"%s\".', this.searchValue)\n\n    this.search.emit(this.searchValue)\n  }\n\n  private setQueryParams (search: string) {\n    const searchParams = search\n      ? { search: search.trim() }\n      : {}\n\n    this.router.navigate([ '.' ], { relativeTo: this.route, queryParams: { ...this.route.snapshot.queryParams, ...searchParams } })\n  }\n\n  private removeFilterToSearch (search: string, removedFilter: AdvancedInputFilterChild) {\n    return search.replace(removedFilter.value, '')\n  }\n\n  private addFilterToSearch (search: string, newFilter: AdvancedInputFilterChild) {\n    const filterTokens = this.restService.tokenizeString(newFilter.value)\n\n    const tokensToAdd: string[] = []\n    let searchTokens = this.restService.tokenizeString(search)\n\n    for (const filterToken of filterTokens) {\n      const prefix = filterToken.split(':').shift()\n\n      // Tokenize search and remove a potential existing filter\n      searchTokens = searchTokens.filter(t => !t.startsWith(prefix))\n      tokensToAdd.push(filterToken)\n    }\n\n    return searchTokens.concat(tokensToAdd).join(' ')\n  }\n\n  private parseFilters (search: string) {\n    const searchTokens = this.restService.tokenizeString(search)\n\n    this.enabledFilters = new Set()\n\n    for (const group of this.filters()) {\n      for (const filter of group.children) {\n        const filterTokens = this.restService.tokenizeString(filter.value)\n\n        if (filterTokens.every(filterToken => searchTokens.includes(filterToken))) {\n          this.enabledFilters.add(filter.value)\n        }\n      }\n    }\n  }\n}\n","<div class=\"input-group has-clear flex-nowrap\" [ngClass]=\"{ 'has-icon': icon() }\" ngbDropdown placement=\"bottom-left auto\" container=\"body\">\n\n  <ng-container *ngIf=\"hasFilters()\">\n    <button class=\"input-group-text c-hand\" title=\"Open quick filters\" i18n-title ngbDropdownToggle>\n    </button>\n\n    <div role=\"menu\" ngbDropdownMenu>\n      <ng-container *ngFor=\"let group of filters()\">\n        <h6 class=\"dropdown-header\">{{ group.title }}</h6>\n\n        <button *ngFor=\"let filter of group.children\" (click)=\"onFilterClick(filter)\" class=\"dropdown-item\">\n          <my-global-icon [ngClass]=\"{ 'no-visible': !isFilterEnabled(filter) }\" iconName=\"tick\"></my-global-icon>\n\n          {{ filter.label }}\n        </button>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <button *ngIf=\"icon()\" class=\"button-unstyle search-button\" title=\"Search\" i18n-title (click)=\"onSearchClick()\">\n    <my-global-icon iconName=\"search\"></my-global-icon>\n  </button>\n\n  <input\n    type=\"text\" [name]=\"inputId()\" [id]=\"inputId()\" [placeholder]=\"placeholder()\"\n    class=\"last-in-group\"\n    [ngClass]=\"{ 'first-in-group': !hasFilters() }\"\n    [(ngModel)]=\"searchValue\"\n    (keyup)=\"onInputSearch($event)\"\n    #input\n  >\n\n  <button class=\"p-0 border-0 form-control-clear\" title=\"Clear filter\" i18n-title (click)=\"onResetTableFilter(); input.focus()\">\n    <my-global-icon iconName=\"cross\" ></my-global-icon>\n  </button>\n</div>\n"]}