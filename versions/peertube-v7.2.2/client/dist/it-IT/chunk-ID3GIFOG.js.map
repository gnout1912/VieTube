{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵtext","ɵɵelementEnd","i","e","r","ɵɵproperty","ctx_r0","inputId","ɵɵpureFunction1","_c1","labelSecondary","ɵɵadvance","ɵɵtextInterpolate","label","ie","n","S","ɵɵtwoWayListener","$event","ɵɵrestoreView","_r2","ɵɵnextContext","i0","ɵɵtwoWayBindingSet","value","ɵɵresetView","ɵɵlistener","update","ɵɵi18n","$implicit","t","getRadioId","item_r3","id","ɵɵtwoWayProperty","w","ɵɵi18nExp","M","ne","ɵɵrepeaterCreate","SelectRadioComponent_Conditional_3_For_2_Template","_forTrack0","ɵɵpureFunction2","_c2","isInMobileView","ɵɵrepeater","items","oe","ɵɵtextInterpolate1","item_r5","description","ae","_r4","ɵɵtemplate","SelectRadioComponent_Conditional_4_For_1_div_4_Template","re","SelectRadioComponent_Conditional_4_For_1_Template","SelectRadioComponent","input","required","isGroup","transform","booleanAttribute","screenService","inject","ScreenService","model","disabled","wroteValue","propagateChange","_","writeValue","set","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","item","g","selectors","inputs","outputs","features","ɵɵProvidersFeature","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ngContentSelectors","_c0","decls","vars","consts","i18n_0","o","template","l","P","SelectRadioComponent_label_1_Template","ɵɵprojection","SelectRadioComponent_Conditional_3_Template","SelectRadioComponent_Conditional_4_Template","ctx","ɵɵconditional","dependencies","FormsModule","DefaultValueAccessor","RadioControlValueAccessor","NgControlStatus","NgModel","CommonModule","NgClass","NgIf","styles","_SelectRadioComponent","ge","a"],"ignoreList":[],"sources":["src/app/shared/shared-forms/select/select-radio.component.html","src/app/shared/shared-forms/select/select-radio.component.ts"],"sourcesContent":["<div role=\"radiogroup\">\n  <label *ngIf=\"label()\" [for]=\"inputId()\" [ngClass]=\"{ 'label-secondary': labelSecondary() }\">{{ label() }}</label>\n\n  <ng-content></ng-content>\n\n  @if (isGroup()) {\n    <div [ngClass]=\"{ 'btn-group': !isInMobileView(), 'btn-group-vertical': isInMobileView() }\" role=\"group\">\n      @for (item of items(); track item.id) {\n        <input\n          type=\"radio\" [name]=\"inputId()\" [id]=\"getRadioId(item)\" [value]=\"item.id\"\n          class=\"btn-check\"\n          autocomplete=\"off\" [(ngModel)]=\"value\" (ngModelChange)=\"update()\"\n        />\n\n        <label class=\"btn btn-outline-primary\" [for]=\"getRadioId(item)\" [attr.data-label]=\"item.label\" i18n>{{ item.label }}</label>\n      }\n    </div>\n  } @else {\n    @for (item of items(); track item.id) {\n      <div class=\"peertube-radio-container\">\n        <input\n          type=\"radio\" [name]=\"inputId()\" [id]=\"getRadioId(item)\" [value]=\"item.id\"\n          autocomplete=\"off\" [(ngModel)]=\"value\" (ngModelChange)=\"update()\"\n        />\n\n        <label [for]=\"getRadioId(item)\" i18n>{{ item.label }}</label>\n\n        <div *ngIf=\"item.description\" class=\"form-group-description\">\n          {{ item.description}}\n        </div>\n      </div>\n    }\n  }\n</div>\n","import { CommonModule } from '@angular/common'\nimport { booleanAttribute, Component, forwardRef, inject, input, model } from '@angular/core'\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms'\nimport { ScreenService } from '@app/core'\nimport { SelectRadioItem } from 'src/types'\n\n@Component({\n  selector: 'my-select-radio',\n\n  templateUrl: './select-radio.component.html',\n  styleUrls: [ './select-radio.component.scss' ],\n\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectRadioComponent),\n      multi: true\n    }\n  ],\n  imports: [ FormsModule, CommonModule ]\n})\nexport class SelectRadioComponent implements ControlValueAccessor {\n  readonly items = input.required<SelectRadioItem[]>()\n  readonly inputId = input.required<string>()\n\n  readonly label = input<string>()\n  readonly isGroup = input(false, { transform: booleanAttribute })\n  readonly labelSecondary = input(false, { transform: booleanAttribute })\n\n  private readonly screenService = inject(ScreenService)\n\n  readonly value = model('')\n\n  disabled = false\n\n  wroteValue: number | string\n\n  propagateChange = (_: any) => {\n    // empty\n  }\n\n  writeValue (value: string) {\n    this.value.set(value)\n  }\n\n  registerOnChange (fn: (_: any) => void) {\n    this.propagateChange = fn\n  }\n\n  registerOnTouched () {\n    // Unused\n  }\n\n  setDisabledState (isDisabled: boolean) {\n    this.disabled = isDisabled\n  }\n\n  update () {\n    this.propagateChange(this.value())\n  }\n\n  getRadioId (item: SelectRadioItem) {\n    return this.inputId() + '-' + item.id\n  }\n\n  isInMobileView () {\n    return this.screenService.isInMobileView()\n  }\n}\n"]}