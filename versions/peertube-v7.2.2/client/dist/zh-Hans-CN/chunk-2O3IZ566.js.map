{"version":3,"sources":["node_modules/@angular/cdk/fesm2022/element-x4z00URv.mjs","node_modules/@angular/cdk/fesm2022/observers.mjs","src/app/shared/shared-main/buttons/button.component.ts","src/app/shared/shared-main/buttons/button.component.html"],"sourcesContent":["import { ElementRef } from '@angular/core';\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n  if (_isNumberValue(value)) {\n    return Number(value);\n  }\n  return arguments.length === 2 ? fallbackValue : 0;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\nexport { _isNumberValue as _, coerceElement as a, coerceNumberProperty as c };\n","import * as i0 from '@angular/core';\nimport { Injectable, inject, NgZone, ElementRef, EventEmitter, booleanAttribute, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { map, filter, debounceTime } from 'rxjs/operators';\nimport { c as coerceNumberProperty, a as coerceElement } from './element-x4z00URv.mjs';\n\n// Angular may add, remove, or edit comment nodes during change detection. We don't care about\n// these changes because they don't affect the user-preceived content, and worse it can cause\n// infinite change detection cycles where the change detection updates a comment, triggering the\n// MutationObserver, triggering another change detection and kicking the cycle off again.\nfunction shouldIgnoreRecord(record) {\n  // Ignore changes to comment text.\n  if (record.type === 'characterData' && record.target instanceof Comment) {\n    return true;\n  }\n  // Ignore addition / removal of comments.\n  if (record.type === 'childList') {\n    for (let i = 0; i < record.addedNodes.length; i++) {\n      if (!(record.addedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    for (let i = 0; i < record.removedNodes.length; i++) {\n      if (!(record.removedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // Observe everything else.\n  return false;\n}\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nlet MutationObserverFactory = /*#__PURE__*/(() => {\n  class MutationObserverFactory {\n    create(callback) {\n      return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n    static ɵfac = function MutationObserverFactory_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MutationObserverFactory)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MutationObserverFactory,\n      factory: MutationObserverFactory.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MutationObserverFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** An injectable service that allows watching elements for changes to their content. */\nlet ContentObserver = /*#__PURE__*/(() => {\n  class ContentObserver {\n    _mutationObserverFactory = inject(MutationObserverFactory);\n    /** Keeps track of the existing MutationObservers so they can be reused. */\n    _observedElements = new Map();\n    _ngZone = inject(NgZone);\n    constructor() {}\n    ngOnDestroy() {\n      this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n      const element = coerceElement(elementOrRef);\n      return new Observable(observer => {\n        const stream = this._observeElement(element);\n        const subscription = stream.pipe(map(records => records.filter(record => !shouldIgnoreRecord(record))), filter(records => !!records.length)).subscribe(records => {\n          this._ngZone.run(() => {\n            observer.next(records);\n          });\n        });\n        return () => {\n          subscription.unsubscribe();\n          this._unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n      return this._ngZone.runOutsideAngular(() => {\n        if (!this._observedElements.has(element)) {\n          const stream = new Subject();\n          const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n          if (observer) {\n            observer.observe(element, {\n              characterData: true,\n              childList: true,\n              subtree: true\n            });\n          }\n          this._observedElements.set(element, {\n            observer,\n            stream,\n            count: 1\n          });\n        } else {\n          this._observedElements.get(element).count++;\n        }\n        return this._observedElements.get(element).stream;\n      });\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n      if (this._observedElements.has(element)) {\n        this._observedElements.get(element).count--;\n        if (!this._observedElements.get(element).count) {\n          this._cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n      if (this._observedElements.has(element)) {\n        const {\n          observer,\n          stream\n        } = this._observedElements.get(element);\n        if (observer) {\n          observer.disconnect();\n        }\n        stream.complete();\n        this._observedElements.delete(element);\n      }\n    }\n    static ɵfac = function ContentObserver_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ContentObserver)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ContentObserver,\n      factory: ContentObserver.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContentObserver;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nlet CdkObserveContent = /*#__PURE__*/(() => {\n  class CdkObserveContent {\n    _contentObserver = inject(ContentObserver);\n    _elementRef = inject(ElementRef);\n    /** Event emitted for each change in the element's content. */\n    event = new EventEmitter();\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n      this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    _disabled = false;\n    /** Debounce interval for emitting the changes. */\n    get debounce() {\n      return this._debounce;\n    }\n    set debounce(value) {\n      this._debounce = coerceNumberProperty(value);\n      this._subscribe();\n    }\n    _debounce;\n    _currentSubscription = null;\n    constructor() {}\n    ngAfterContentInit() {\n      if (!this._currentSubscription && !this.disabled) {\n        this._subscribe();\n      }\n    }\n    ngOnDestroy() {\n      this._unsubscribe();\n    }\n    _subscribe() {\n      this._unsubscribe();\n      const stream = this._contentObserver.observe(this._elementRef);\n      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    }\n    _unsubscribe() {\n      this._currentSubscription?.unsubscribe();\n    }\n    static ɵfac = function CdkObserveContent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkObserveContent)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkObserveContent,\n      selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n      inputs: {\n        disabled: [2, \"cdkObserveContentDisabled\", \"disabled\", booleanAttribute],\n        debounce: \"debounce\"\n      },\n      outputs: {\n        event: \"cdkObserveContent\"\n      },\n      exportAs: [\"cdkObserveContent\"]\n    });\n  }\n  return CdkObserveContent;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ObserversModule = /*#__PURE__*/(() => {\n  class ObserversModule {\n    static ɵfac = function ObserversModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ObserversModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ObserversModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MutationObserverFactory]\n    });\n  }\n  return ObserversModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\n","import { ObserversModule } from '@angular/cdk/observers'\nimport { NgClass, NgIf, NgTemplateOutlet } from '@angular/common'\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnChanges,\n  booleanAttribute,\n  inject,\n  input,\n  viewChild\n} from '@angular/core'\nimport { Params, QueryParamsHandling, RouterLink, RouterLinkActive } from '@angular/router'\nimport { GlobalIconName } from '@app/shared/shared-icons/global-icon.component'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport debug from 'debug'\nimport { GlobalIconComponent } from '../../shared-icons/global-icon.component'\nimport { LoaderComponent } from '../common/loader.component'\n\nconst debugLogger = debug('peertube:button')\n\n@Component({\n  selector: 'my-button',\n  styleUrls: [ './button.component.scss' ],\n  templateUrl: './button.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    NgIf,\n    NgClass,\n    NgbTooltip,\n    NgTemplateOutlet,\n    RouterLink,\n    LoaderComponent,\n    GlobalIconComponent,\n    ObserversModule,\n    RouterLinkActive\n  ]\n})\nexport class ButtonComponent implements OnChanges, AfterViewInit {\n  private cd = inject(ChangeDetectorRef)\n\n  readonly label = input('')\n  readonly theme = input<'primary' | 'secondary' | 'tertiary'>('secondary')\n  readonly icon = input<GlobalIconName>(undefined)\n\n  readonly href = input<string>(undefined)\n  readonly ptRouterLink = input<string[] | string>(undefined)\n  readonly ptQueryParams = input<Params>(undefined)\n  readonly ptQueryParamsHandling = input<QueryParamsHandling>(undefined)\n  readonly ptRouterLinkActive = input('')\n\n  readonly title = input<string>(undefined)\n  readonly tooltip = input<string>(undefined)\n  readonly active = input(false, { transform: booleanAttribute })\n\n  readonly loading = input(false, { transform: booleanAttribute })\n  readonly disabled = input(false, { transform: booleanAttribute })\n  readonly responsiveLabel = input(false, { transform: booleanAttribute })\n  readonly autoFontSize = input(false, { transform: booleanAttribute })\n  readonly rounded = input(false, { transform: booleanAttribute })\n  readonly small = input(false, { transform: booleanAttribute })\n  readonly show = input(false, { transform: booleanAttribute })\n\n  readonly labelContent = viewChild<ElementRef>('labelContent')\n\n  classes: { [id: string]: boolean } = {}\n\n  ngOnChanges () {\n    this.buildClasses()\n  }\n\n  ngAfterViewInit () {\n    this.buildClasses()\n  }\n\n  @HostListener('touchend', [ '$event' ])\n  onTouchEnd (event: TouchEvent): void {\n    if (this.disabled()) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n  }\n\n  @HostBinding('style.pointer-events')\n  get pointerEvents (): string {\n    return this.disabled() ? 'none' : 'auto'\n  }\n\n  private buildClasses () {\n    const isButtonLink = !!this.ptRouterLink() || !!this.href()\n    const label = this.getLabel() || ''\n\n    this.classes = {\n      'active': this.active(),\n      'peertube-button': !isButtonLink,\n      'peertube-button-link': isButtonLink,\n      'primary-button': this.theme() === 'primary',\n      'secondary-button': this.theme() === 'secondary',\n      'tertiary-button': this.theme() === 'tertiary',\n      'has-icon': !!this.icon(),\n      'rounded-icon-button': !!this.rounded(),\n      'icon-only': !label,\n      'label-xl': this.autoFontSize() && label.length > 10,\n      'responsive-label': this.responsiveLabel(),\n      'small-button': this.small(),\n      'show': this.show()\n    }\n\n    debugLogger('Built button classes', { classes: this.classes, label, labelContent: this.labelContent() })\n\n    this.cd.markForCheck()\n  }\n\n  private getLabel () {\n    return this.label() || (this.labelContent()?.nativeElement as HTMLElement)?.innerText\n  }\n}\n","@if (ptRouterLink() || ptQueryParams()) {\n  <a\n    class=\"action-button ellipsis\"\n    [ngClass]=\"classes\" [ngbTooltip]=\"tooltip()\" [attr.title]=\"title()\"\n    [routerLink]=\"ptRouterLink()\" [queryParams]=\"ptQueryParams()\" [queryParamsHandling]=\"ptQueryParamsHandling()\" [routerLinkActive]=\"ptRouterLinkActive()\"\n  >\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </a>\n} @else if (href()) {\n  <a\n    class=\"action-button ellipsis\"\n    [ngClass]=\"classes\" [ngbTooltip]=\"tooltip()\" [attr.title]=\"title()\"\n    [href]=\"href()\" target=\"_blank\"\n  >\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </a>\n} @else {\n  <button type=\"button\" class=\"action-button ellipsis\" [ngClass]=\"classes\" [disabled]=\"disabled()\" [ngbTooltip]=\"tooltip()\" [attr.title]=\"title()\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </button>\n}\n\n<ng-template #content>\n  <my-loader size=\"sm\" [ngClass]=\"{ displayed: loading() }\" [loading]=\"loading()\"></my-loader>\n  <my-global-icon *ngIf=\"icon() && !loading()\" [iconName]=\"icon()\"></my-global-icon>\n\n  <span class=\"button-label\" #labelContent (cdkObserveContent)=\"ngOnChanges()\">\n    @if (label()) {\n      {{ label() }}\n    } @else {\n      <ng-content></ng-content>\n    }\n  </span>\n</ng-template>\n"],"mappings":"2lBACA,SAASA,GAAqBC,EAAOC,EAAgB,EAAG,CACtD,OAAIC,GAAeF,CAAK,EACf,OAAOA,CAAK,EAEd,UAAU,SAAW,EAAIC,EAAgB,CAClD,CAKA,SAASC,GAAeF,EAAO,CAI7B,MAAO,CAAC,MAAM,WAAWA,CAAK,CAAC,GAAK,CAAC,MAAM,OAAOA,CAAK,CAAC,CAC1D,CAMA,SAASG,GAAcC,EAAc,CACnC,OAAOA,aAAwBC,EAAaD,EAAa,cAAgBA,CAC3E,CCdA,SAASE,GAAmBC,EAAQ,CAElC,GAAIA,EAAO,OAAS,iBAAmBA,EAAO,kBAAkB,QAC9D,MAAO,GAGT,GAAIA,EAAO,OAAS,YAAa,CAC/B,QAASC,EAAI,EAAGA,EAAID,EAAO,WAAW,OAAQC,IAC5C,GAAI,EAAED,EAAO,WAAWC,CAAC,YAAa,SACpC,MAAO,GAGX,QAASA,EAAI,EAAGA,EAAID,EAAO,aAAa,OAAQC,IAC9C,GAAI,EAAED,EAAO,aAAaC,CAAC,YAAa,SACtC,MAAO,GAGX,MAAO,EACT,CAEA,MAAO,EACT,CAKA,IAAIC,IAAwC,IAAM,CAChD,IAAMC,EAAN,MAAMA,CAAwB,CAC5B,OAAOC,EAAU,CACf,OAAO,OAAO,iBAAqB,IAAc,KAAO,IAAI,iBAAiBA,CAAQ,CACvF,CASF,EAREC,EAJIF,EAIG,YAAO,SAAyCG,EAAmB,CACxE,OAAO,IAAKA,GAAqBH,EACnC,GACAE,EAPIF,EAOG,aAA0BI,EAAmB,CAClD,MAAOJ,EACP,QAASA,EAAwB,UACjC,WAAY,MACd,CAAC,GAXH,IAAMD,EAANC,EAaA,OAAOD,CACT,GAAG,EAKCM,IAAgC,IAAM,CACxC,IAAMC,EAAN,MAAMA,CAAgB,CACpB,yBAA2BC,EAAOR,EAAuB,EAEzD,kBAAoB,IAAI,IACxB,QAAUQ,EAAOC,CAAM,EACvB,aAAc,CAAC,CACf,aAAc,CACZ,KAAK,kBAAkB,QAAQ,CAACC,EAAGC,IAAY,KAAK,iBAAiBA,CAAO,CAAC,CAC/E,CACA,QAAQC,EAAc,CACpB,IAAMD,EAAUE,GAAcD,CAAY,EAC1C,OAAO,IAAIE,EAAWC,GAAY,CAEhC,IAAMC,EADS,KAAK,gBAAgBL,CAAO,EACf,KAAKM,EAAIC,GAAWA,EAAQ,OAAOpB,IAAU,CAACD,GAAmBC,EAAM,CAAC,CAAC,EAAGqB,EAAOD,GAAW,CAAC,CAACA,EAAQ,MAAM,CAAC,EAAE,UAAUA,GAAW,CAChK,KAAK,QAAQ,IAAI,IAAM,CACrBH,EAAS,KAAKG,CAAO,CACvB,CAAC,CACH,CAAC,EACD,MAAO,IAAM,CACXF,EAAa,YAAY,EACzB,KAAK,kBAAkBL,CAAO,CAChC,CACF,CAAC,CACH,CAKA,gBAAgBA,EAAS,CACvB,OAAO,KAAK,QAAQ,kBAAkB,IAAM,CAC1C,GAAK,KAAK,kBAAkB,IAAIA,CAAO,EAgBrC,KAAK,kBAAkB,IAAIA,CAAO,EAAE,YAhBI,CACxC,IAAMS,EAAS,IAAIC,EACbN,EAAW,KAAK,yBAAyB,OAAOO,GAAaF,EAAO,KAAKE,CAAS,CAAC,EACrFP,GACFA,EAAS,QAAQJ,EAAS,CACxB,cAAe,GACf,UAAW,GACX,QAAS,EACX,CAAC,EAEH,KAAK,kBAAkB,IAAIA,EAAS,CAClC,SAAAI,EACA,OAAAK,EACA,MAAO,CACT,CAAC,CACH,CAGA,OAAO,KAAK,kBAAkB,IAAIT,CAAO,EAAE,MAC7C,CAAC,CACH,CAKA,kBAAkBA,EAAS,CACrB,KAAK,kBAAkB,IAAIA,CAAO,IACpC,KAAK,kBAAkB,IAAIA,CAAO,EAAE,QAC/B,KAAK,kBAAkB,IAAIA,CAAO,EAAE,OACvC,KAAK,iBAAiBA,CAAO,EAGnC,CAEA,iBAAiBA,EAAS,CACxB,GAAI,KAAK,kBAAkB,IAAIA,CAAO,EAAG,CACvC,GAAM,CACJ,SAAAI,EACA,OAAAK,CACF,EAAI,KAAK,kBAAkB,IAAIT,CAAO,EAClCI,GACFA,EAAS,WAAW,EAEtBK,EAAO,SAAS,EAChB,KAAK,kBAAkB,OAAOT,CAAO,CACvC,CACF,CASF,EARER,EA7EII,EA6EG,YAAO,SAAiCH,EAAmB,CAChE,OAAO,IAAKA,GAAqBG,EACnC,GACAJ,EAhFII,EAgFG,aAA0BF,EAAmB,CAClD,MAAOE,EACP,QAASA,EAAgB,UACzB,WAAY,MACd,CAAC,GApFH,IAAMD,EAANC,EAsFA,OAAOD,CACT,GAAG,EAQCiB,IAAkC,IAAM,CAC1C,IAAMC,EAAN,MAAMA,CAAkB,CACtB,iBAAmBhB,EAAOF,EAAe,EACzC,YAAcE,EAAOiB,CAAU,EAE/B,MAAQ,IAAIC,EAKZ,IAAI,UAAW,CACb,OAAO,KAAK,SACd,CACA,IAAI,SAASC,EAAO,CAClB,KAAK,UAAYA,EACjB,KAAK,UAAY,KAAK,aAAa,EAAI,KAAK,WAAW,CACzD,CACA,UAAY,GAEZ,IAAI,UAAW,CACb,OAAO,KAAK,SACd,CACA,IAAI,SAASA,EAAO,CAClB,KAAK,UAAYC,GAAqBD,CAAK,EAC3C,KAAK,WAAW,CAClB,CACA,UACA,qBAAuB,KACvB,aAAc,CAAC,CACf,oBAAqB,CACf,CAAC,KAAK,sBAAwB,CAAC,KAAK,UACtC,KAAK,WAAW,CAEpB,CACA,aAAc,CACZ,KAAK,aAAa,CACpB,CACA,YAAa,CACX,KAAK,aAAa,EAClB,IAAMP,EAAS,KAAK,iBAAiB,QAAQ,KAAK,WAAW,EAC7D,KAAK,sBAAwB,KAAK,SAAWA,EAAO,KAAKS,EAAa,KAAK,QAAQ,CAAC,EAAIT,GAAQ,UAAU,KAAK,KAAK,CACtH,CACA,cAAe,CACb,KAAK,sBAAsB,YAAY,CACzC,CAgBF,EAfEjB,EA5CIqB,EA4CG,YAAO,SAAmCpB,EAAmB,CAClE,OAAO,IAAKA,GAAqBoB,EACnC,GACArB,EA/CIqB,EA+CG,YAAyBM,EAAkB,CAChD,KAAMN,EACN,UAAW,CAAC,CAAC,GAAI,oBAAqB,EAAE,CAAC,EACzC,OAAQ,CACN,SAAU,CAAC,EAAG,4BAA6B,WAAYO,CAAgB,EACvE,SAAU,UACZ,EACA,QAAS,CACP,MAAO,mBACT,EACA,SAAU,CAAC,mBAAmB,CAChC,CAAC,GA1DH,IAAMR,EAANC,EA4DA,OAAOD,CACT,GAAG,EAICS,IAAgC,IAAM,CACxC,IAAMC,EAAN,MAAMA,CAAgB,CAUtB,EATE9B,EADI8B,EACG,YAAO,SAAiC7B,EAAmB,CAChE,OAAO,IAAKA,GAAqB6B,EACnC,GACA9B,EAJI8B,EAIG,YAAyBC,EAAiB,CAC/C,KAAMD,CACR,CAAC,GACD9B,EAPI8B,EAOG,YAAyBE,EAAiB,CAC/C,UAAW,CAACnC,EAAuB,CACrC,CAAC,GATH,IAAMgC,EAANC,EAWA,OAAOD,CACT,GAAG,ECpNH,IAAAI,GAAkB,sFCbdC,EAAA,CAAA,4BALFC,EAAA,EAAA,IAAA,CAAA,EAKEC,EAAA,EAAAC,GAAA,EAAA,EAAA,eAAA,CAAA,EACFC,EAAA,yBAJEC,EAAA,UAAAC,EAAAC,OAAA,EAAmB,aAAAD,EAAAE,QAAA,CAAA,EAAyB,aAAAF,EAAAG,aAAA,CAAA,EACf,cAAAH,EAAAI,cAAA,CAAA,EAAgC,sBAAAJ,EAAAK,sBAAA,CAAA,EAAgD,mBAAAL,EAAAM,mBAAA,CAAA,uBAE9FC,EAAA,EAAAR,EAAA,mBAAAS,CAAA,yBAQfd,EAAA,CAAA,4BALFC,EAAA,EAAA,IAAA,CAAA,EAKEC,EAAA,EAAAa,GAAA,EAAA,EAAA,eAAA,CAAA,EACFX,EAAA,yBAJEC,EAAA,UAAAC,EAAAC,OAAA,EAAmB,aAAAD,EAAAE,QAAA,CAAA,EAAyB,OAAAF,EAAAU,KAAA,EAAAC,CAAA,uBAG7BJ,EAAA,EAAAR,EAAA,mBAAAS,CAAA,yBAIfd,EAAA,CAAA,4BADFC,EAAA,EAAA,SAAA,CAAA,EACEC,EAAA,EAAAgB,GAAA,EAAA,EAAA,eAAA,CAAA,EACFd,EAAA,yBAFqDC,EAAA,UAAAC,EAAAC,OAAA,EAAmB,WAAAD,EAAAa,SAAA,CAAA,EAAwB,aAAAb,EAAAE,QAAA,CAAA,uBAC/EK,EAAA,EAAAR,EAAA,mBAAAS,CAAA,4BAMjBM,EAAA,EAAA,iBAAA,CAAA,kBAA6Cf,EAAA,WAAAC,EAAAe,KAAA,CAAA,4BAIzCC,EAAA,CAAA,kBAAAC,EAAA,IAAAjB,EAAAkB,MAAA,EAAA,GAAA,yBAEAC,EAAA,CAAA,qCAPJL,EAAA,EAAA,YAAA,CAAA,EACAlB,EAAA,EAAAwB,GAAA,EAAA,EAAA,iBAAA,CAAA,EAEAzB,EAAA,EAAA,OAAA,EAAA,CAAA,EAAyC0B,EAAA,oBAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAvB,EAAAwB,EAAA,EAAA,OAAAC,EAAqBzB,EAAA0B,YAAA,CAAa,CAAA,CAAA,EACzE9B,EAAA,EAAA+B,GAAA,EAAA,CAAA,EAAe,EAAAC,GAAA,EAAA,CAAA,EAKjB9B,EAAA,oBATqBC,EAAA,UAAA8B,EAAA,EAAAC,GAAA9B,EAAA+B,QAAA,CAAA,CAAA,EAAoC,UAAA/B,EAAA+B,QAAA,CAAA,EACxCxB,EAAA,EAAAR,EAAA,OAAAC,EAAAe,KAAA,GAAA,CAAAf,EAAA+B,QAAA,CAAA,EAGfxB,EAAA,CAAA,EAAAyB,EAAAhC,EAAAkB,MAAA,EAAA,EAAA,CAAA,GDJJ,IAAMe,MAAcC,GAAAA,SAAM,iBAAiB,EAmB9BC,IAAe,IAAA,CAAtB,IAAOA,EAAP,MAAOA,CAAe,CAClBC,GAAKC,EAAOC,CAAiB,EAE5BpB,MAAQqB,EAAM,EAAE,EAChBC,MAAQD,EAA4C,WAAW,EAC/DxB,KAAOwB,EAAsBE,MAAS,EAEtC/B,KAAO6B,EAAcE,MAAS,EAC9BtC,aAAeoC,EAAyBE,MAAS,EACjDrC,cAAgBmC,EAAcE,MAAS,EACvCpC,sBAAwBkC,EAA2BE,MAAS,EAC5DnC,mBAAqBiC,EAAM,EAAE,EAE7BG,MAAQH,EAAcE,MAAS,EAC/BvC,QAAUqC,EAAcE,MAAS,EACjCE,OAASJ,EAAM,GAAO,CAAEK,UAAWC,CAAgB,CAAE,EAErDd,QAAUQ,EAAM,GAAO,CAAEK,UAAWC,CAAgB,CAAE,EACtDhC,SAAW0B,EAAM,GAAO,CAAEK,UAAWC,CAAgB,CAAE,EACvDC,gBAAkBP,EAAM,GAAO,CAAEK,UAAWC,CAAgB,CAAE,EAC9DE,aAAeR,EAAM,GAAO,CAAEK,UAAWC,CAAgB,CAAE,EAC3DG,QAAUT,EAAM,GAAO,CAAEK,UAAWC,CAAgB,CAAE,EACtDI,MAAQV,EAAM,GAAO,CAAEK,UAAWC,CAAgB,CAAE,EACpDK,KAAOX,EAAM,GAAO,CAAEK,UAAWC,CAAgB,CAAE,EAEnDM,aAAeC,EAAsB,cAAc,EAE5DnD,QAAqC,CAAA,EAErCyB,aAAW,CACT,KAAK2B,aAAY,CACnB,CAEAC,iBAAe,CACb,KAAKD,aAAY,CACnB,CAGAE,WAAYC,EAAiB,CACvB,KAAK3C,SAAQ,IACf2C,EAAMC,eAAc,EACpBD,EAAME,gBAAe,EAEzB,CAEA,IACIC,eAAa,CACf,OAAO,KAAK9C,SAAQ,EAAK,OAAS,MACpC,CAEQwC,cAAY,CAClB,IAAMO,EAAe,CAAC,CAAC,KAAKzD,aAAY,GAAM,CAAC,CAAC,KAAKO,KAAI,EACnDQ,EAAQ,KAAK2C,SAAQ,GAAM,GAEjC,KAAK5D,QAAU,CACb,OAAU,KAAK0C,OAAM,EACrB,kBAAmB,CAACiB,EACpB,uBAAwBA,EACxB,iBAAkB,KAAKpB,MAAK,IAAO,UACnC,mBAAoB,KAAKA,MAAK,IAAO,YACrC,kBAAmB,KAAKA,MAAK,IAAO,WACpC,WAAY,CAAC,CAAC,KAAKzB,KAAI,EACvB,sBAAuB,CAAC,CAAC,KAAKiC,QAAO,EACrC,YAAa,CAAC9B,EACd,WAAY,KAAK6B,aAAY,GAAM7B,EAAM4C,OAAS,GAClD,mBAAoB,KAAKhB,gBAAe,EACxC,eAAgB,KAAKG,MAAK,EAC1B,KAAQ,KAAKC,KAAI,GAGnBjB,GAAY,uBAAwB,CAAEhC,QAAS,KAAKA,QAASiB,MAAAA,EAAOiC,aAAc,KAAKA,aAAY,CAAE,CAAE,EAEvG,KAAKf,GAAG2B,aAAY,CACtB,CAEQF,UAAQ,CACd,OAAO,KAAK3C,MAAK,GAAO,KAAKiC,aAAY,GAAIa,eAA+BC,SAC9E,KA7EW9B,wCAAAA,EAAe,KAAfA,sBAAAA,EAAe+B,UAAA,CAAA,CAAA,WAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,+EAAf/C,EAAA,WAAA,SAAAiD,EAAA,CAAA,OAAAD,EAAAd,WAAAe,CAAA,CAAkB,CAAA,OAAlBC,EAAA,iBAAAF,EAAAV,aAAA,kgCC1Cb/D,EAAA,EAAA4E,GAAA,EAAA,EAAA,IAAA,CAAA,EAAyC,EAAAC,GAAA,EAAA,EAAA,IAAA,CAAA,EAQpB,EAAAC,GAAA,EAAA,EAAA,SAAA,CAAA,EAQZ,EAAAC,GAAA,EAAA,EAAA,cAAA,KAAA,EAAAC,CAAA,QAhBT5C,EAAAqC,EAAAlE,aAAA,GAAAkE,EAAAjE,cAAA,EAAA,EAAAiE,EAAA3D,KAAA,EAAA,EAAA,CAAA,iBD+BImE,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAAeC,GACfC,EAAgB,EAAAC,OAAA,CAAA;0DAAA,EAAAC,gBAAA,CAAA,CAAA,GAGd,IAAOrD,EAAPsD,SAAOtD,CAAe,GAAA","names":["coerceNumberProperty","value","fallbackValue","_isNumberValue","coerceElement","elementOrRef","ElementRef","shouldIgnoreRecord","record","i","MutationObserverFactory","_MutationObserverFactory","callback","__publicField","__ngFactoryType__","ɵɵdefineInjectable","ContentObserver","_ContentObserver","inject","NgZone","_","element","elementOrRef","coerceElement","Observable","observer","subscription","map","records","filter","stream","Subject","mutations","CdkObserveContent","_CdkObserveContent","ElementRef","EventEmitter","value","coerceNumberProperty","debounceTime","ɵɵdefineDirective","booleanAttribute","ObserversModule","_ObserversModule","ɵɵdefineNgModule","ɵɵdefineInjector","import_debug","ɵɵelementContainer","ɵɵelementStart","ɵɵtemplate","ButtonComponent_Conditional_0_ng_container_1_Template","ɵɵelementEnd","ɵɵproperty","ctx_r0","classes","tooltip","ptRouterLink","ptQueryParams","ptQueryParamsHandling","ptRouterLinkActive","ɵɵadvance","content_r2","ButtonComponent_Conditional_1_ng_container_1_Template","href","ɵɵsanitizeUrl","ButtonComponent_Conditional_2_ng_container_1_Template","disabled","ɵɵelement","icon","ɵɵtext","ɵɵtextInterpolate1","label","ɵɵprojection","ButtonComponent_ng_template_3_my_global_icon_1_Template","ɵɵlistener","ɵɵrestoreView","_r3","ɵɵnextContext","ɵɵresetView","ngOnChanges","ButtonComponent_ng_template_3_Conditional_4_Template","ButtonComponent_ng_template_3_Conditional_5_Template","ɵɵpureFunction1","_c2","loading","ɵɵconditional","debugLogger","debug","ButtonComponent","cd","inject","ChangeDetectorRef","input","theme","undefined","title","active","transform","booleanAttribute","responsiveLabel","autoFontSize","rounded","small","show","labelContent","viewChild","buildClasses","ngAfterViewInit","onTouchEnd","event","preventDefault","stopPropagation","pointerEvents","isButtonLink","getLabel","length","markForCheck","nativeElement","innerText","selectors","viewQuery","rf","ctx","$event","ɵɵstyleProp","ButtonComponent_Conditional_0_Template","ButtonComponent_Conditional_1_Template","ButtonComponent_Conditional_2_Template","ButtonComponent_ng_template_3_Template","ɵɵtemplateRefExtractor","NgIf","NgClass","NgbTooltip","NgTemplateOutlet","RouterLink","LoaderComponent","GlobalIconComponent","ObserversModule","CdkObserveContent","RouterLinkActive","styles","changeDetection","_ButtonComponent"],"x_google_ignoreList":[0,1]}