{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵi18nStart","ɵɵelement","ɵɵi18nEnd","ɵɵelementEnd","ne","r","_","oe","n","$","ɵɵi18n","ɵɵlistener","hide_r2","ɵɵrestoreView","_r1","close","ɵɵresetView","ɵɵtemplate","AccountSetupWarningModalComponent_ng_template_0_li_13_Template","AccountSetupWarningModalComponent_ng_template_0_li_14_Template","ɵɵtwoWayListener","$event","ctx_r2","ɵɵnextContext","i0","ɵɵtwoWayBindingSet","stopDisplayModal","C","ɵɵadvance","ɵɵi18nExp","instanceName","G","ɵɵproperty","hasAccountAvatar","user","hasAccountDescription","ɵɵtwoWayProperty","AccountSetupWarningModalComponent","userService","inject","UserService","modalService","NgbModal","notifier","Notifier","serverService","ServerService","modal","viewChild","created","output","ref","LS_KEYS","NO_ACCOUNT_SETUP_WARNING_MODAL","ngOnInit","emit","getHTMLConfig","instance","name","account","avatars","length","description","shouldOpen","hasOpenModals","noAccountSetupWarningModal","peertubeLocalStorage","getItem","hasSignupInThisSession","show","open","centered","backdrop","keyboard","size","result","finally","doNotOpenAgain","setItem","updateMyProfile","subscribe","next","logger","info","error","err","message","T","selectors","viewQuery","rf","ctx","U","a","ee","t","W","outputs","decls","vars","consts","e","$localize","E","P","L","f","F","D","template","AccountSetupWarningModalComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","dependencies","CommonModule","NgIf","GlobalIconComponent","PeertubeCheckboxComponent","FormsModule","NgControlStatus","NgModel","RouterLink","styles","_AccountSetupWarningModalComponent","Te"],"ignoreList":[],"sources":["src/app/modal/account-setup-warning-modal.component.html","src/app/modal/account-setup-warning-modal.component.ts"],"sourcesContent":["<ng-template #modal let-hide=\"close\">\n  <div class=\"modal-header\">\n    <h4 i18n class=\"modal-title\">Welcome to {{ instanceName }}, dear user!</h4>\n    <button class=\"border-0 p-0\" title=\"Close this modal\" i18n-title (click)=\"hide()\">\n      <my-global-icon iconName=\"cross\"></my-global-icon>\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n    <img class=\"mascot\" src=\"/client/assets/images/mascot/happy.svg\" alt=\"\">\n\n    <div i18n class=\"subtitle\">It's time to set up your account profile!</div>\n\n    <p i18n>Help moderators and other users to know <strong>who you are</strong> by:</p>\n\n    <ul>\n      <li *ngIf=\"!hasAccountAvatar(user)\" i18n>Uploading an <strong>avatar</strong></li>\n      <li *ngIf=\"!hasAccountDescription(user)\" i18n>Writing a <strong>description</strong></li>\n    </ul>\n  </div>\n\n  <div class=\"modal-footer inputs\">\n    <my-peertube-checkbox\n      inputName=\"stopDisplayModal\" [(ngModel)]=\"stopDisplayModal\"\n      i18n-labelText labelText=\"Don't show me this anymore\"\n    >\n    </my-peertube-checkbox>\n\n    <input\n      type=\"button\" role=\"button\" i18n-value value=\"Close\" class=\"peertube-button secondary-button\"\n      (click)=\"hide()\" (key.enter)=\"hide()\"\n    >\n\n    <a i18n (click)=\"hide()\" (key.enter)=\"hide()\"\n       class=\"peertube-button-link primary-button\" routerLink=\"/my-account\"\n       rel=\"noopener noreferrer\" ngbAutofocus>\n      Set up\n    </a>\n  </div>\n\n</ng-template>\n","import { CommonModule } from '@angular/common'\nimport { Component, ElementRef, OnInit, inject, output, viewChild } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { RouterLink } from '@angular/router'\nimport { Notifier, ServerService, User, UserService } from '@app/core'\nimport { PeertubeCheckboxComponent } from '@app/shared/shared-forms/peertube-checkbox.component'\nimport { GlobalIconComponent } from '@app/shared/shared-icons/global-icon.component'\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { logger } from '@root-helpers/logger'\nimport { peertubeLocalStorage } from '@root-helpers/peertube-web-storage'\n\n@Component({\n  selector: 'my-account-setup-warning-modal',\n  templateUrl: './account-setup-warning-modal.component.html',\n  styleUrls: [ './account-setup-warning-modal.component.scss' ],\n  imports: [ CommonModule, GlobalIconComponent, PeertubeCheckboxComponent, FormsModule, RouterLink ]\n})\nexport class AccountSetupWarningModalComponent implements OnInit {\n  private userService = inject(UserService)\n  private modalService = inject(NgbModal)\n  private notifier = inject(Notifier)\n  private serverService = inject(ServerService)\n\n  readonly modal = viewChild<ElementRef>('modal')\n\n  readonly created = output()\n\n  stopDisplayModal = false\n  ref: NgbModalRef\n\n  user: User\n\n  private LS_KEYS = {\n    NO_ACCOUNT_SETUP_WARNING_MODAL: 'no_account_setup_warning_modal'\n  }\n\n  ngOnInit (): void {\n    this.created.emit()\n  }\n\n  get instanceName () {\n    return this.serverService.getHTMLConfig().instance.name\n  }\n\n  hasAccountAvatar (user: User) {\n    return user.account.avatars.length !== 0\n  }\n\n  hasAccountDescription (user: User) {\n    return !!user.account.description\n  }\n\n  shouldOpen (user: User) {\n    if (this.modalService.hasOpenModals()) return false\n    if (user.noAccountSetupWarningModal === true) return false\n    if (peertubeLocalStorage.getItem(this.LS_KEYS.NO_ACCOUNT_SETUP_WARNING_MODAL) === 'true') return false\n\n    if (this.hasAccountAvatar(user) && this.hasAccountDescription(user)) return false\n    if (this.userService.hasSignupInThisSession()) return false\n\n    return true\n  }\n\n  show (user: User) {\n    this.user = user\n\n    if (this.ref) return\n\n    this.ref = this.modalService.open(this.modal(), {\n      centered: true,\n      backdrop: 'static',\n      keyboard: false,\n      size: 'md'\n    })\n\n    this.ref.result.finally(() => {\n      if (this.stopDisplayModal === true) this.doNotOpenAgain()\n    })\n  }\n\n  private doNotOpenAgain () {\n    peertubeLocalStorage.setItem(this.LS_KEYS.NO_ACCOUNT_SETUP_WARNING_MODAL, 'true')\n\n    this.userService.updateMyProfile({ noAccountSetupWarningModal: true })\n      .subscribe({\n        next: () => logger.info('We will not open the account setup modal again.'),\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n}\n"]}