{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵtext","ɵɵelementEnd","e","l","m","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","helpTitle","V","o","ɵɵelement","ɵɵproperty","markdownHTML","ɵɵsanitizeHtml","j","ɵɵtemplate","HelpComponent_ng_template_0_strong_0_Template","HelpComponent_ng_template_0_p_1_Template","ɵɵprojection","HelpComponent","input","helpType","iconName","supportRelMe","transform","booleanAttribute","title","tooltipPlacement","autoClose","container","undefined","isPopoverOpened","ngOnInit","init","ngOnChanges","onPopoverHidden","onPopoverShown","formatMarkdownSupport","TEXT_RULES","ENHANCED_RULES","rules","str","$localize","createMarkdownList","rulesToText","emphasis","link","newline","list","image","map","r","filter","text","join","c","selectors","inputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","t","C","y","HelpComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","ɵɵlistener","i0","ɵɵrestoreView","_r1","ɵɵresetView","n","x","tooltipTemplate_r3","T","i","dependencies","NgIf","NgbPopover","GlobalIconComponent","styles","_HelpComponent","q","a"],"ignoreList":[],"sources":["src/app/shared/shared-main/buttons/help.component.html","src/app/shared/shared-main/buttons/help.component.ts"],"sourcesContent":["<ng-template #tooltipTemplate>\n  <strong class=\"help-title\" *ngIf=\"helpTitle()\">{{ helpTitle() }}</strong>\n\n  <p *ngIf=\"markdownHTML\" [innerHTML]=\"markdownHTML\"></p>\n\n  <ng-content></ng-content>\n</ng-template>\n\n<button\n  class=\"help-tooltip-button p-0 border-0 mx-1\"\n  [title]=\"title()\"\n  popoverClass=\"help-popover\"\n  [attr.aria-pressed]=\"isPopoverOpened\"\n  [ngbPopover]=\"tooltipTemplate\"\n  [placement]=\"tooltipPlacement()\"\n  [autoClose]=\"autoClose()\"\n  (onHidden)=\"onPopoverHidden()\"\n  (onShown)=\"onPopoverShown()\"\n  [container]=\"container()\"\n  type=\"button\"\n>\n  <my-global-icon [iconName]=\"iconName()\"></my-global-icon>\n</button>\n","import { NgIf } from '@angular/common'\nimport { booleanAttribute, Component, input, OnChanges, OnInit } from '@angular/core'\nimport { GlobalIconName } from '@app/shared/shared-icons/global-icon.component'\nimport { NgbPopover } from '@ng-bootstrap/ng-bootstrap'\nimport { ENHANCED_RULES, TEXT_RULES } from '@peertube/peertube-core-utils'\nimport { GlobalIconComponent } from '../../shared-icons/global-icon.component'\n\n@Component({\n  selector: 'my-help',\n  styleUrls: [ './help.component.scss' ],\n  templateUrl: './help.component.html',\n  imports: [ NgIf, NgbPopover, GlobalIconComponent ]\n})\nexport class HelpComponent implements OnInit, OnChanges {\n  readonly helpTitle = input('')\n  readonly helpType = input<'custom' | 'markdownText' | 'markdownEnhanced'>('custom')\n  readonly iconName = input<GlobalIconName>('help')\n  readonly supportRelMe = input(false, { transform: booleanAttribute })\n\n  readonly title = input($localize`Get help`)\n\n  readonly tooltipPlacement = input('right auto')\n  readonly autoClose = input('outside')\n  readonly container = input<'body'>(undefined)\n\n  isPopoverOpened = false\n  markdownHTML = ''\n\n  ngOnInit () {\n    this.init()\n  }\n\n  ngOnChanges () {\n    this.init()\n  }\n\n  onPopoverHidden () {\n    this.isPopoverOpened = false\n  }\n\n  onPopoverShown () {\n    this.isPopoverOpened = true\n  }\n\n  private init () {\n    const helpType = this.helpType()\n    if (helpType === 'markdownText') {\n      this.markdownHTML = this.formatMarkdownSupport(TEXT_RULES)\n      return\n    }\n\n    if (helpType === 'markdownEnhanced') {\n      this.markdownHTML = this.formatMarkdownSupport(ENHANCED_RULES)\n      return\n    }\n  }\n\n  private formatMarkdownSupport (rules: string[]) {\n    let str =\n      // eslint-disable-next-line max-len\n      $localize`<a href=\"https://en.wikipedia.org/wiki/Markdown#Example\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown</a> compatible that supports:` +\n      this.createMarkdownList(rules)\n\n    if (this.supportRelMe()) {\n      str +=\n        // eslint-disable-next-line max-len\n        $localize`<a href=\"https://docs.joinmastodon.org/user/profile/#verification\" target=\"_blank\" rel=\"noopener noreferrer\">Mastodon verification link</a> is also supported.`\n    }\n\n    return str\n  }\n\n  private createMarkdownList (rules: string[]) {\n    const rulesToText: { [id: string]: string } = {\n      emphasis: $localize`Emphasis`,\n      link: $localize`Links`,\n      newline: $localize`New lines`,\n      list: $localize`Lists`,\n      image: $localize`Images`\n    }\n\n    const bullets = rules.map(r => rulesToText[r])\n      .filter(text => text)\n      .map(text => '<li>' + text + '</li>')\n      .join('')\n\n    return '<ul>' + bullets + '</ul>'\n  }\n}\n"]}