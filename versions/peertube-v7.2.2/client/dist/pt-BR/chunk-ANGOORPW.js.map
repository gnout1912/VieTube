{
  "version": 3,
  "sources": ["src/app/shared/shared-main/account/account.service.ts", "src/app/shared/shared-main/channel/video-channel.service.ts"],
  "sourcesContent": ["import { Observable, ReplaySubject } from 'rxjs'\nimport { catchError, map, tap } from 'rxjs/operators'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor } from '@app/core'\nimport { Account as ServerAccount } from '@peertube/peertube-models'\nimport { environment } from '../../../../environments/environment'\nimport { Account } from './account.model'\n\n@Injectable()\nexport class AccountService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n\n  static BASE_ACCOUNT_URL = environment.apiUrl + '/api/v1/accounts/'\n\n  accountLoaded = new ReplaySubject<Account>(1)\n\n  getAccount (id: number | string): Observable<Account> {\n    return this.authHttp.get<ServerAccount>(AccountService.BASE_ACCOUNT_URL + id)\n      .pipe(\n        map(accountHash => new Account(accountHash)),\n        tap(account => this.accountLoaded.next(account)),\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n}\n", "import { Observable, ReplaySubject } from 'rxjs'\nimport { catchError, map, tap } from 'rxjs/operators'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { ComponentPaginationLight, RestExtractor, RestService, ServerService } from '@app/core'\nimport {\n  ActorImage,\n  ResultList,\n  VideoChannel as VideoChannelServer,\n  VideoChannelCreate,\n  VideoChannelUpdate,\n  VideosImportInChannelCreate\n} from '@peertube/peertube-models'\nimport { environment } from '../../../../environments/environment'\nimport { AccountService } from '../account/account.service'\nimport { VideoChannel } from './video-channel.model'\nimport { Account } from '../account/account.model'\n\n@Injectable({ providedIn: 'root' })\nexport class VideoChannelService {\n  private authHttp = inject(HttpClient)\n  private restService = inject(RestService)\n  private restExtractor = inject(RestExtractor)\n  private serverService = inject(ServerService)\n\n  static BASE_VIDEO_CHANNEL_URL = environment.apiUrl + '/api/v1/video-channels/'\n\n  videoChannelLoaded = new ReplaySubject<VideoChannel>(1)\n\n  static extractVideoChannels (result: ResultList<VideoChannelServer>) {\n    const videoChannels: VideoChannel[] = []\n\n    for (const videoChannelJSON of result.data) {\n      videoChannels.push(new VideoChannel(videoChannelJSON))\n    }\n\n    return { data: videoChannels, total: result.total }\n  }\n\n  getVideoChannel (videoChannelName: string) {\n    return this.authHttp.get<VideoChannel>(VideoChannelService.BASE_VIDEO_CHANNEL_URL + videoChannelName)\n      .pipe(\n        map(videoChannelHash => new VideoChannel(videoChannelHash)),\n        tap(videoChannel => this.videoChannelLoaded.next(videoChannel)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  listAccountVideoChannels (options: {\n    account: Account\n    componentPagination?: ComponentPaginationLight\n    withStats?: boolean\n    sort?: string\n    search?: string\n  }): Observable<ResultList<VideoChannel>> {\n    const { account, componentPagination, withStats = false, sort, search } = options\n\n    const defaultCount = Math.min(this.serverService.getHTMLConfig().videoChannels.maxPerUser, 100) // 100 is the max count on server side\n\n    const pagination = componentPagination\n      ? this.restService.componentToRestPagination(componentPagination)\n      : { start: 0, count: defaultCount }\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n    params = params.set('withStats', withStats + '')\n\n    if (search) params = params.set('search', search)\n\n    const url = AccountService.BASE_ACCOUNT_URL + account.nameWithHost + '/video-channels'\n    return this.authHttp.get<ResultList<VideoChannelServer>>(url, { params })\n      .pipe(\n        map(res => VideoChannelService.extractVideoChannels(res)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  createVideoChannel (videoChannel: VideoChannelCreate) {\n    return this.authHttp.post(VideoChannelService.BASE_VIDEO_CHANNEL_URL, videoChannel)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  updateVideoChannel (videoChannelName: string, videoChannel: VideoChannelUpdate) {\n    return this.authHttp.put(VideoChannelService.BASE_VIDEO_CHANNEL_URL + videoChannelName, videoChannel)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  changeVideoChannelImage (videoChannelName: string, avatarForm: FormData, type: 'avatar' | 'banner') {\n    const url = VideoChannelService.BASE_VIDEO_CHANNEL_URL + videoChannelName + '/' + type + '/pick'\n\n    return this.authHttp.post<{ avatars?: ActorImage[], banners?: ActorImage[] }>(url, avatarForm)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  deleteVideoChannelImage (videoChannelName: string, type: 'avatar' | 'banner') {\n    const url = VideoChannelService.BASE_VIDEO_CHANNEL_URL + videoChannelName + '/' + type\n\n    return this.authHttp.delete(url)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  removeVideoChannel (videoChannel: VideoChannel) {\n    return this.authHttp.delete(VideoChannelService.BASE_VIDEO_CHANNEL_URL + videoChannel.nameWithHost)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  importVideos (videoChannelName: string, externalChannelUrl: string, syncId?: number) {\n    const path = VideoChannelService.BASE_VIDEO_CHANNEL_URL + videoChannelName + '/import-videos'\n\n    const body: VideosImportInChannelCreate = {\n      externalChannelUrl,\n      videoChannelSyncId: syncId\n    }\n\n    return this.authHttp.post(path, body)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n}\n"],
  "mappings": "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",
  "names": ["AccountService", "authHttp", "inject", "HttpClient", "restExtractor", "RestExtractor", "accountLoaded", "ReplaySubject", "getAccount", "id", "get", "BASE_ACCOUNT_URL", "pipe", "map", "accountHash", "Account", "tap", "account", "next", "catchError", "res", "handleError", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "_AccountService", "VideoChannelService", "authHttp", "inject", "HttpClient", "restService", "RestService", "restExtractor", "RestExtractor", "serverService", "ServerService", "videoChannelLoaded", "ReplaySubject", "extractVideoChannels", "result", "videoChannels", "videoChannelJSON", "data", "push", "VideoChannel", "total", "getVideoChannel", "videoChannelName", "get", "BASE_VIDEO_CHANNEL_URL", "pipe", "map", "videoChannelHash", "tap", "videoChannel", "next", "catchError", "err", "handleError", "listAccountVideoChannels", "options", "account", "componentPagination", "withStats", "sort", "search", "defaultCount", "Math", "min", "getHTMLConfig", "maxPerUser", "pagination", "componentToRestPagination", "start", "count", "params", "HttpParams", "addRestGetParams", "set", "url", "AccountService", "BASE_ACCOUNT_URL", "nameWithHost", "res", "createVideoChannel", "post", "updateVideoChannel", "put", "changeVideoChannelImage", "avatarForm", "type", "deleteVideoChannelImage", "delete", "removeVideoChannel", "importVideos", "externalChannelUrl", "syncId", "path", "body", "videoChannelSyncId", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "providedIn", "_VideoChannelService"]
}
