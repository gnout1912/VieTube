{"version":3,"mappings":"43CAgBA,GAAaA,IAA+B,KAAtC,GAAOA,GAAP,KAAOA,EAA+B,CAClCC,YAAcC,EAAOC,CAAW,EAChCC,iBAAmBF,EAAOG,CAAuB,EACjDC,MAAQJ,EAAOK,CAAY,EAC3BC,aAAeN,EAAOO,CAAY,EAClCC,oBAAsBR,EAAOS,CAAmB,EAExDC,4BAA8B,KAAKC,oBAAoBC,KAAK,IAAI,EAChEC,4BAA8B,KAAKC,oBAAoBF,KAAK,IAAI,EAEhEG,YAAc,eAEdC,QAAU,CACR,CACEC,WAAY,4BACZC,oEAAOC,CACPC,SAAU,MACX,EAGHC,SAAW,GAEHC,UAERX,oBAAqBY,EAAsCC,EAAqB,CAC9E,GAAMC,GAASC,EAAAC,EAAA,GACVH,EAAQI,kBAAiB,GADf,CAGbC,gBAAiBN,EACjBO,UAAW,KAGb,MAAO,MAAK1B,MAAM2B,WAChB,KAAK7B,iBAAiB8B,0BAA0BpB,KAAK,KAAKV,gBAAgB,EAC1EuB,EACA,SACA,0DACA,yDAAyD,CAE7D,EAEAX,qBAAmB,CACjB,MAAO,MAAKmB,cAAa,EACtBC,KAAK,IAAK,CACT,GAAMC,GAAO,KAAKpC,YAAYqC,QAAO,EAErC,MAAO,MAAK9B,aAAa+B,6BAA6BF,EAAKG,QAAQC,GAAI,KAAKjB,SAAS,CACvF,EAAC,CACL,EAEAkB,iBAAe,CACb,KAAKnB,SAAW,EAClB,EAEAoB,iBAAe,CACb,KAAKpB,SAAW,EAClB,EAEQY,eAAa,CACnB,GAAI,KAAKX,UAAW,MAAOoB,SAAQC,QAAQ,KAAKrB,SAAS,EAEzD,GAAMsB,GAAM,KAAK7C,YAAY8C,sBAC1BC,KACCC,EAAU,IAAM,KAAKvC,oBAAoBwC,gBAAe,CAAE,EAC1DC,EAAIC,GAAU,KAAK5B,UAAY4B,EAAO5B,SAAS,CAAC,EAGpD,MAAO6B,GAAeP,CAAG,CAC3B,IAAAQ,CAAA,CApEWtD,4CAA+B,IAAAsD,CAAA,CAA/BtD,wBAA+BuD,UAAA,mCAAAC,MAAA,EAAAC,KAAA,EAAAC,WAAA,IAAAC,4HChBXtC,6QAAjCuC,EAAA,UAAAC,EAAA,KAA+DC,EAAA,EAE/DC,EAAA,uBAAAC,CAAA,KACEC,EAAA,GAAAC,EAAA,8BAAAC,EAAAvD,2BAAA,EAA2D,8BAAAuD,EAAApD,2BAAA,EACA,cAAAoD,EAAAlD,WAAA,EAEhC,WAAAkD,EAAA5C,QAAA,EASN,gBAAA4C,EAAAjD,OAAA,KAAAkD,YAAA,EDDVC,CAAmB,EAAAC,cAAA,KAE1B,GAAOtE,GAAPuE,QAAOvE,EAA+B,MEJ5C,GAAAwE,IAAe,CACb,CACEC,KAAM,GACNC,UAAW,CACTC,EACAtE,EACAuE,EACAC,EACAC,EACAC,CAAY,EAEdC,SAAU,CACR,CACEP,KAAM,WACNQ,UAAWC,EACXC,KAAM,CACJC,KAAM,CACJC,qEAAOhE,EAETiE,MAAO,CACLC,QAAS,GACTC,IAAK,qBAQX,CACEf,KAAM,aACNgB,WAAY,sCAEd,CACEhB,KAAM,WACNgB,WAAYA,IAGH,gCAFiBvF,EAAOwF,CAAe,EAEWC,uBAAsB,GAGnF,CACElB,KAAM,iBACNgB,WAAY,4CAEd,CACEhB,KAAM,QACNgB,WAAY,wCAKd,CACEhB,KAAM,SAENQ,UAAWW,EACXT,KAAM,CACJG,MAAO,CACLC,QAAS,GACTC,IAAK,iBAKX,CACEf,KAAM,gBACNoB,YAAa,CAAEC,CAAU,EACzBb,UAAWjF,EACXmF,KAAM,CACJC,KAAM,CACJC,wDAAOhE,EAETiE,MAAO,CACLC,QAAS,GACTC,IAAK,6BAGV,EAEJ,SAAAO,EAAA,IAAAC,OAAA","names":["VideoUserSubscriptionsComponent","authService","inject","AuthService","userSubscription","UserSubscriptionService","hooks","HooksService","videoService","VideoService","scopedTokensService","ScopedTokensService","getVideosObservableFunction","getVideosObservable","bind","getSyndicationItemsFunction","getSyndicationItems","defaultSort","actions","routerLink","label","$localize","iconName","disabled","feedToken","pagination","filters","params","__spreadProps","__spreadValues","toVideosAPIObject","videoPagination","skipCount","wrapObsFun","getUserSubscriptionVideos","loadFeedToken","then","user","getUser","getVideoSubscriptionFeedUrls","account","id","disableForReuse","enabledForReuse","Promise","resolve","obs","userInformationLoaded","pipe","switchMap","getScopedTokens","tap","tokens","firstValueFrom","d","selectors","decls","vars","consts","i18n_0","ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","ɵɵelement","i","ɵɵadvance","ɵɵproperty","ctx","dependencies","VideosListComponent","encapsulation","_VideoUserSubscriptionsComponent","routes_default","path","providers","OverviewService","VideoPlaylistService","BlocklistService","VideoBlockService","AbuseService","children","component","VideoOverviewComponent","data","meta","title","reuse","enabled","key","redirectTo","RedirectService","getDefaultTrendingSort","VideosListAllComponent","canActivate","LoginGuard","te","default"],"ignoreList":[],"sources":["src/app/+video-list/video-user-subscriptions.component.ts","src/app/+video-list/video-user-subscriptions.component.html","src/app/+video-list/routes.ts"],"sourcesContent":["import { Component, inject } from '@angular/core'\nimport { AuthService, ComponentPaginationLight, DisableForReuseHook, ScopedTokensService } from '@app/core'\nimport { HooksService } from '@app/core/plugins/hooks.service'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { UserSubscriptionService } from '@app/shared/shared-user-subscription/user-subscription.service'\nimport { VideoFilters } from '@app/shared/shared-video-miniature/video-filters.model'\nimport { VideosListComponent } from '@app/shared/shared-video-miniature/videos-list.component'\nimport { VideoSortField } from '@peertube/peertube-models'\nimport { firstValueFrom } from 'rxjs'\nimport { switchMap, tap } from 'rxjs/operators'\n\n@Component({\n  selector: 'my-videos-user-subscriptions',\n  templateUrl: './video-user-subscriptions.component.html',\n  imports: [ VideosListComponent ]\n})\nexport class VideoUserSubscriptionsComponent implements DisableForReuseHook {\n  private authService = inject(AuthService)\n  private userSubscription = inject(UserSubscriptionService)\n  private hooks = inject(HooksService)\n  private videoService = inject(VideoService)\n  private scopedTokensService = inject(ScopedTokensService)\n\n  getVideosObservableFunction = this.getVideosObservable.bind(this)\n  getSyndicationItemsFunction = this.getSyndicationItems.bind(this)\n\n  defaultSort = '-publishedAt' as VideoSortField\n\n  actions = [\n    {\n      routerLink: '/my-library/subscriptions',\n      label: $localize`Manage`,\n      iconName: 'cog' as 'cog'\n    }\n  ]\n\n  disabled = false\n\n  private feedToken: string\n\n  getVideosObservable (pagination: ComponentPaginationLight, filters: VideoFilters) {\n    const params = {\n      ...filters.toVideosAPIObject(),\n\n      videoPagination: pagination,\n      skipCount: true\n    }\n\n    return this.hooks.wrapObsFun(\n      this.userSubscription.getUserSubscriptionVideos.bind(this.userSubscription),\n      params,\n      'common',\n      'filter:api.user-subscriptions-videos.videos.list.params',\n      'filter:api.user-subscriptions-videos.videos.list.result'\n    )\n  }\n\n  getSyndicationItems () {\n    return this.loadFeedToken()\n      .then(() => {\n        const user = this.authService.getUser()\n\n        return this.videoService.getVideoSubscriptionFeedUrls(user.account.id, this.feedToken)\n      })\n  }\n\n  disableForReuse () {\n    this.disabled = true\n  }\n\n  enabledForReuse () {\n    this.disabled = false\n  }\n\n  private loadFeedToken () {\n    if (this.feedToken) return Promise.resolve(this.feedToken)\n\n    const obs = this.authService.userInformationLoaded\n      .pipe(\n        switchMap(() => this.scopedTokensService.getScopedTokens()),\n        tap(tokens => this.feedToken = tokens.feedToken)\n      )\n\n    return firstValueFrom(obs)\n  }\n}\n","<h1 class=\"visually-hidden\" i18n>Videos from your subscriptions</h1>\n\n<my-videos-list\n  [getVideosObservableFunction]=\"getVideosObservableFunction\"\n  [getSyndicationItemsFunction]=\"getSyndicationItemsFunction\"\n\n  [defaultSort]=\"defaultSort\"\n\n  displayFilters=\"false\"\n\n  loadUserVideoPreferences=\"false\"\n  groupByDate=\"true\"\n\n  highlightLives=\"false\"\n\n  [disabled]=\"disabled\"\n\n  [headerActions]=\"actions\"\n>\n</my-videos-list>\n","import { inject } from '@angular/core'\nimport { Routes } from '@angular/router'\nimport { LoginGuard, RedirectService } from '@app/core'\nimport { AbuseService } from '@app/shared/shared-moderation/abuse.service'\nimport { BlocklistService } from '@app/shared/shared-moderation/blocklist.service'\nimport { VideoBlockService } from '@app/shared/shared-moderation/video-block.service'\nimport { UserSubscriptionService } from '@app/shared/shared-user-subscription/user-subscription.service'\nimport { VideoPlaylistService } from '@app/shared/shared-video-playlist/video-playlist.service'\nimport { OverviewService, VideosListAllComponent } from '.'\nimport { VideoOverviewComponent } from './overview/video-overview.component'\nimport { VideoUserSubscriptionsComponent } from './video-user-subscriptions.component'\n\nexport default [\n  {\n    path: '',\n    providers: [\n      OverviewService,\n      UserSubscriptionService,\n      VideoPlaylistService,\n      BlocklistService,\n      VideoBlockService,\n      AbuseService\n    ],\n    children: [\n      {\n        path: 'overview',\n        component: VideoOverviewComponent,\n        data: {\n          meta: {\n            title: $localize`Discover videos`\n          },\n          reuse: {\n            enabled: true,\n            key: 'videos-discover'\n          }\n        }\n      },\n\n      // ---------------------------------------------------------------------------\n      // Old URL redirections\n      // ---------------------------------------------------------------------------\n      {\n        path: 'most-liked',\n        redirectTo: 'browse?scope=federated&sort=-likes'\n      },\n      {\n        path: 'trending',\n        redirectTo: () => {\n          const redirectService = inject(RedirectService)\n\n          return 'browse?scope=federated&sort=-' + redirectService.getDefaultTrendingSort()\n        }\n      },\n      {\n        path: 'recently-added',\n        redirectTo: 'browse?scope=federated&sort=-publishedAt'\n      },\n      {\n        path: 'local',\n        redirectTo: 'browse?scope=local&sort=-publishedAt'\n      },\n\n      // ---------------------------------------------------------------------------\n\n      {\n        path: 'browse',\n\n        component: VideosListAllComponent,\n        data: {\n          reuse: {\n            enabled: true,\n            key: 'videos-list'\n          }\n        }\n      },\n\n      {\n        path: 'subscriptions',\n        canActivate: [ LoginGuard ],\n        component: VideoUserSubscriptionsComponent,\n        data: {\n          meta: {\n            title: $localize`Subscriptions`\n          },\n          reuse: {\n            enabled: true,\n            key: 'subscription-videos-list'\n          }\n        }\n      }\n    ]\n  }\n] satisfies Routes\n"]}