{"version":3,"mappings":"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","names":["AccountBlock","byAccount","blockedAccount","createdAt","constructor","block","Account","BlocklistComponentType","Instance","BlocklistService","authHttp","inject","HttpClient","restExtractor","RestExtractor","restService","RestService","getStatus","options","accounts","hosts","params","HttpParams","addArrayParams","get","BASE_BLOCKLIST_URL","pipe","catchError","err","handleError","getUserAccountBlocklist","pagination","sort","search","addRestGetParams","append","BASE_USER_BLOCKLIST_URL","map","res","applyToResultListData","formatAccountBlock","bind","blockAccountByUser","account","body","accountName","nameWithHost","post","unblockAccountByUser","path","delete","getUserServerBlocklist","blockServerByUser","host","unblockServerByUser","getInstanceAccountBlocklist","BASE_SERVER_BLOCKLIST_URL","blockAccountByInstance","accountsArg","arrayify","from","concatMap","a","toArray","unblockAccountByInstance","getInstanceServerBlocklist","blockServerByInstance","unblockServerByInstance","accountBlock","__publicField","environment","apiUrl","m","factory","ɵfac","_BlocklistService","AbuseService","getAdminAbuses","url","BASE_ABUSE_URL","buildParamsFromSearch","getUserAbuses","BASE_MY_ABUSE_URL","reportVideo","parameters","omit","updateAbuse","abuse","abuseUpdate","id","put","removeAbuse","addAbuseMessage","message","listAbuseMessages","deleteAbuseMessage","abuseMessage","getPrefefinedReasons","type","reasons","label","$localize","help","concat","filters","parseQueryStringFilter","prefix","state","handler","v","AbuseState","ACCEPTED","PENDING","REJECTED","videoIs","searchReporter","searchReportee","predefinedReason","addObjectParams","_AbuseService","VideoBlockService","listBlocks","VideoBlacklistType","MANUAL","AUTO_BEFORE_PUBLISHED","toString","BASE_VIDEOS_URL","unblockVideo","videoIdArgs","videoIds","observableFrom","blockVideo","videoId","unfederate","reason","_VideoBlockService","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","n","t","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","Vt","i","ɵɵelement","Ft","zt","$implicit","ɵɵproperty","action_r3","iconName","Wt","ownerOrModeratorPrivilege","Gt","description","qt","ɵɵtemplate","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_ng_template_1_my_global_icon_0_Template","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_ng_template_1_my_global_icon_4_Template","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_ng_template_1_small_5_Template","ɵɵtextInterpolate1","Kt","ɵɵelementContainer","jt","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Conditional_3_Conditional_0_ng_container_1_Template","M","e","o","ɵɵpureFunction1","_c1","action_r5","linkBuilder","entry","getQueryParams","title","templateActionLabel_r4","_c2","Xt","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Conditional_3_Conditional_0_Template","ɵɵconditional","isHeader","Qt","Yt","V","ɵɵlistener","ɵɵrestoreView","_r6","ɵɵnextContext","ɵɵresetView","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Conditional_4_Conditional_0_ng_container_1_Template","Jt","Zt","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Conditional_4_Conditional_1_ng_container_1_Template","te","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Conditional_4_Conditional_0_Template","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Conditional_4_Conditional_1_Template","areActionsDisplayed","actions_r7","ee","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_ng_template_1_Template","ɵɵtemplateRefExtractor","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Conditional_3_Template","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Conditional_4_Template","class","ne","ɵɵelementContainerStart","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_div_1_Template","O","isBlockDisplayed","ie","oe","ActionDropdownComponent_div_0_ng_container_6_ng_container_1_Template","ActionDropdownComponent_div_0_ng_container_6_div_2_Template","re","$event","_r1","openChange","emit","ActionDropdownComponent_div_0_Conditional_2_Template","ActionDropdownComponent_div_0_Conditional_3_Template","ActionDropdownComponent_div_0_Conditional_4_Template","ActionDropdownComponent_div_0_ng_container_6_Template","placement","container","ɵɵpureFunction4","_c0","buttonSize","buttonStyled","theme","buttonDirection","getActions","ActionDropdownComponent","actions","input","undefined","output","length","Array","isArray","action","queryParamsBuilder","some","isDisplayed","allActions","selectors","inputs","outputs","decls","vars","consts","i18n_0","ActionDropdownComponent_div_0_Template","ctx","dependencies","NgIf","NgbTooltip","NgbDropdown","NgbDropdownToggle","NgClass","GlobalIconComponent","NgbDropdownMenu","NgFor","RouterLink","NgTemplateOutlet","styles","changeDetection","_ActionDropdownComponent","ae","le","ce","se","pe","de","_e","me","VideoThumbnailComponent_Conditional_0_ng_container_1_Template","ctx_r0","ariaLabel","videoHref","ɵɵsanitizeUrl","videoTarget","aContent_r2","ue","ge","VideoThumbnailComponent_Conditional_1_ng_container_1_Template","getVideoRouterLink","queryParams","he","fe","Ce","_r3","onWatchLaterClick","VideoThumbnailComponent_ng_template_2_div_1_Conditional_3_Template","VideoThumbnailComponent_ng_template_2_div_1_Conditional_4_Template","getWatchIconText","lt","inWatchLaterPlaylist","removeFromWatchLaterText","addToWatchLaterText","ve","ɵɵi18n","be","ye","xe","VideoThumbnailComponent_ng_template_2_Conditional_6_Conditional_1_Template","VideoThumbnailComponent_ng_template_2_Conditional_6_Conditional_2_Template","VideoThumbnailComponent_ng_template_2_Conditional_6_Conditional_3_Template","ɵɵpureFunction2","_c4","isLiveStreaming","isEndedLive","Ee","getDurationOverlayLabel","getDurationLabel","Se","Ae","_c5","getProgressPercent","ɵɵi18nExp","bt","Te","VideoThumbnailComponent_ng_template_2_div_1_Template","ɵɵprojection","VideoThumbnailComponent_ng_template_2_Conditional_6_Template","VideoThumbnailComponent_ng_template_2_Conditional_7_Template","VideoThumbnailComponent_ng_template_2_div_8_Template","VideoThumbnailComponent_ng_template_2_div_9_Template","_c3","blur","getImageUrl","at","displayWatchLaterPlaylist","video","isLive","playOverlay","tmp_7_0","userHistory","currentTime","VideoThumbnailComponent","screenService","ScreenService","required","videoRouterLink","transform","booleanAttribute","watchLaterTooltip","viewChild","watchLaterClick","durationLabel","ngOnChanges","duration","Video","buildDurationLabel","VideoState","PUBLISHED","LIVE_ENDED","isInMobileView","previewUrl","getAPIUrl","previewPath","thumbnailUrl","thumbnailPath","Math","round","buildWatchUrl","event","stopPropagation","close","viewQuery","rf","xt","r","Et","features","ft","ngContentSelectors","l","template","yt","VideoThumbnailComponent_Conditional_0_Template","VideoThumbnailComponent_Conditional_1_Template","VideoThumbnailComponent_ng_template_2_Template","CommonModule","NgStyle","_VideoThumbnailComponent","ABUSE_REASON_VALIDATOR","VALIDATORS","Validators","minLength","maxLength","MESSAGES","minlength","maxlength","ABUSE_MODERATION_COMMENT_VALIDATOR","ABUSE_MESSAGE_VALIDATOR"],"ignoreList":[],"sources":["src/app/shared/shared-moderation/account-block.model.ts","src/app/shared/shared-moderation/blocklist.service.ts","src/app/shared/shared-moderation/abuse.service.ts","src/app/shared/shared-moderation/video-block.service.ts","src/app/shared/shared-main/buttons/action-dropdown.component.html","src/app/shared/shared-main/buttons/action-dropdown.component.ts","src/app/shared/shared-thumbnail/video-thumbnail.component.html","src/app/shared/shared-thumbnail/video-thumbnail.component.ts","src/app/shared/form-validators/abuse-validators.ts"],"sourcesContent":["import { AccountBlock as AccountBlockServer } from '@peertube/peertube-models'\nimport { Account } from '../shared-main/account/account.model'\n\nexport class AccountBlock implements AccountBlockServer {\n  byAccount: Account\n  blockedAccount: Account\n  createdAt: Date | string\n\n  constructor (block: AccountBlockServer) {\n    this.byAccount = new Account(block.byAccount)\n    this.blockedAccount = new Account(block.blockedAccount)\n    this.createdAt = block.createdAt\n  }\n}\n","import { SortMeta } from 'primeng/api'\nimport { from } from 'rxjs'\nimport { catchError, concatMap, map, toArray } from 'rxjs/operators'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, RestPagination, RestService } from '@app/core'\nimport { arrayify } from '@peertube/peertube-core-utils'\nimport { AccountBlock as AccountBlockServer, BlockStatus, ResultList, ServerBlock } from '@peertube/peertube-models'\nimport { environment } from '../../../environments/environment'\nimport { Account } from '../shared-main/account/account.model'\nimport { AccountBlock } from './account-block.model'\n\nexport enum BlocklistComponentType {\n  Account,\n  Instance\n}\n\n@Injectable()\nexport class BlocklistService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n  private restService = inject(RestService)\n\n  static BASE_BLOCKLIST_URL = environment.apiUrl + '/api/v1/blocklist'\n  static BASE_USER_BLOCKLIST_URL = environment.apiUrl + '/api/v1/users/me/blocklist'\n  static BASE_SERVER_BLOCKLIST_URL = environment.apiUrl + '/api/v1/server/blocklist'\n\n  /** ********************* Blocklist status ***********************/\n\n  getStatus (options: {\n    accounts?: string[]\n    hosts?: string[]\n  }) {\n    const { accounts, hosts } = options\n\n    let params = new HttpParams()\n\n    if (accounts) params = this.restService.addArrayParams(params, 'accounts', accounts)\n    if (hosts) params = this.restService.addArrayParams(params, 'hosts', hosts)\n\n    return this.authHttp.get<BlockStatus>(BlocklistService.BASE_BLOCKLIST_URL + '/status', { params })\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  /** ********************* User -> Account blocklist ***********************/\n\n  getUserAccountBlocklist (options: { pagination: RestPagination, sort: SortMeta, search?: string }) {\n    const { pagination, sort, search } = options\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) params = params.append('search', search)\n\n    return this.authHttp.get<ResultList<AccountBlock>>(BlocklistService.BASE_USER_BLOCKLIST_URL + '/accounts', { params })\n      .pipe(\n        map(res => this.restExtractor.applyToResultListData(res, this.formatAccountBlock.bind(this))),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  blockAccountByUser (account: Pick<Account, 'nameWithHost'>) {\n    const body = { accountName: account.nameWithHost }\n\n    return this.authHttp.post(BlocklistService.BASE_USER_BLOCKLIST_URL + '/accounts', body)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  unblockAccountByUser (account: Pick<Account, 'nameWithHost'>) {\n    const path = BlocklistService.BASE_USER_BLOCKLIST_URL + '/accounts/' + account.nameWithHost\n\n    return this.authHttp.delete(path)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  /** ********************* User -> Server blocklist ***********************/\n\n  getUserServerBlocklist (options: { pagination: RestPagination, sort: SortMeta, search?: string }) {\n    const { pagination, sort, search } = options\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) params = params.append('search', search)\n\n    return this.authHttp.get<ResultList<ServerBlock>>(BlocklistService.BASE_USER_BLOCKLIST_URL + '/servers', { params })\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  blockServerByUser (host: string) {\n    const body = { host }\n\n    return this.authHttp.post(BlocklistService.BASE_USER_BLOCKLIST_URL + '/servers', body)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  unblockServerByUser (host: string) {\n    const path = BlocklistService.BASE_USER_BLOCKLIST_URL + '/servers/' + host\n\n    return this.authHttp.delete(path)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  /** ********************* Instance -> Account blocklist ***********************/\n\n  getInstanceAccountBlocklist (options: { pagination: RestPagination, sort: SortMeta, search?: string }) {\n    const { pagination, sort, search } = options\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) params = params.append('search', search)\n\n    return this.authHttp.get<ResultList<AccountBlock>>(BlocklistService.BASE_SERVER_BLOCKLIST_URL + '/accounts', { params })\n      .pipe(\n        map(res => this.restExtractor.applyToResultListData(res, this.formatAccountBlock.bind(this))),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  blockAccountByInstance (accountsArg: Pick<Account, 'nameWithHost'> | Pick<Account, 'nameWithHost'>[]) {\n    const accounts = arrayify(accountsArg)\n\n    return from(accounts)\n      .pipe(\n        concatMap(a => this.authHttp.post(BlocklistService.BASE_SERVER_BLOCKLIST_URL + '/accounts', { accountName: a.nameWithHost })),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  unblockAccountByInstance (account: Pick<Account, 'nameWithHost'>) {\n    const path = BlocklistService.BASE_SERVER_BLOCKLIST_URL + '/accounts/' + account.nameWithHost\n\n    return this.authHttp.delete(path)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  /** ********************* Instance -> Server blocklist ***********************/\n\n  getInstanceServerBlocklist (options: { pagination: RestPagination, sort: SortMeta, search?: string }) {\n    const { pagination, sort, search } = options\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) params = params.append('search', search)\n\n    return this.authHttp.get<ResultList<ServerBlock>>(BlocklistService.BASE_SERVER_BLOCKLIST_URL + '/servers', { params })\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  blockServerByInstance (host: string) {\n    const body = { host }\n\n    return this.authHttp.post(BlocklistService.BASE_SERVER_BLOCKLIST_URL + '/servers', body)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  unblockServerByInstance (host: string) {\n    const path = BlocklistService.BASE_SERVER_BLOCKLIST_URL + '/servers/' + host\n\n    return this.authHttp.delete(path)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  private formatAccountBlock (accountBlock: AccountBlockServer) {\n    return new AccountBlock(accountBlock)\n  }\n}\n","import { omit } from 'lodash-es'\nimport { SortMeta } from 'primeng/api'\nimport { Observable } from 'rxjs'\nimport { catchError } from 'rxjs/operators'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, RestPagination, RestService } from '@app/core'\nimport {\n  AbuseCreate,\n  AbuseFilter,\n  AbuseMessage,\n  AbusePredefinedReasonsString,\n  AbuseState,\n  AbuseUpdate,\n  AdminAbuse,\n  ResultList,\n  UserAbuse\n} from '@peertube/peertube-models'\nimport { environment } from '../../../environments/environment'\n\n@Injectable()\nexport class AbuseService {\n  private authHttp = inject(HttpClient)\n  private restService = inject(RestService)\n  private restExtractor = inject(RestExtractor)\n\n  private static BASE_ABUSE_URL = environment.apiUrl + '/api/v1/abuses'\n  private static BASE_MY_ABUSE_URL = environment.apiUrl + '/api/v1/users/me/abuses'\n\n  getAdminAbuses (options: {\n    pagination: RestPagination\n    sort: SortMeta\n    search?: string\n  }): Observable<ResultList<AdminAbuse>> {\n    const { pagination, sort, search } = options\n    const url = AbuseService.BASE_ABUSE_URL\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      params = this.buildParamsFromSearch(search, params)\n    }\n\n    return this.authHttp.get<ResultList<AdminAbuse>>(url, { params })\n      .pipe(\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  getUserAbuses (options: {\n    pagination: RestPagination\n    sort: SortMeta\n    search?: string\n  }): Observable<ResultList<UserAbuse>> {\n    const { pagination, sort, search } = options\n    const url = AbuseService.BASE_MY_ABUSE_URL\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      params = this.buildParamsFromSearch(search, params)\n    }\n\n    return this.authHttp.get<ResultList<UserAbuse>>(url, { params })\n      .pipe(\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  reportVideo (parameters: AbuseCreate) {\n    const url = AbuseService.BASE_ABUSE_URL\n\n    const body = omit(parameters, [ 'id' ])\n\n    return this.authHttp.post(url, body)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  updateAbuse (abuse: AdminAbuse, abuseUpdate: AbuseUpdate) {\n    const url = AbuseService.BASE_ABUSE_URL + '/' + abuse.id\n\n    return this.authHttp.put(url, abuseUpdate)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  removeAbuse (abuse: AdminAbuse) {\n    const url = AbuseService.BASE_ABUSE_URL + '/' + abuse.id\n\n    return this.authHttp.delete(url)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  addAbuseMessage (abuse: UserAbuse, message: string) {\n    const url = AbuseService.BASE_ABUSE_URL + '/' + abuse.id + '/messages'\n\n    return this.authHttp.post(url, { message })\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  listAbuseMessages (abuse: UserAbuse) {\n    const url = AbuseService.BASE_ABUSE_URL + '/' + abuse.id + '/messages'\n\n    return this.authHttp.get<ResultList<AbuseMessage>>(url)\n      .pipe(\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  deleteAbuseMessage (abuse: UserAbuse, abuseMessage: AbuseMessage) {\n    const url = AbuseService.BASE_ABUSE_URL + '/' + abuse.id + '/messages/' + abuseMessage.id\n\n    return this.authHttp.delete(url)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  getPrefefinedReasons (type: AbuseFilter) {\n    let reasons: { id: AbusePredefinedReasonsString, label: string, description?: string, help?: string }[] = [\n      {\n        id: 'violentOrRepulsive',\n        label: $localize`Violent or repulsive`,\n        help: $localize`Contains offensive, violent, or coarse language or iconography.`\n      },\n      {\n        id: 'hatefulOrAbusive',\n        label: $localize`Hateful or abusive`,\n        help: $localize`Contains abusive, racist or sexist language or iconography.`\n      },\n      {\n        id: 'spamOrMisleading',\n        label: $localize`Spam, ad or false news`,\n        help:\n          // eslint-disable-next-line max-len\n          $localize`Contains marketing, spam, purposefully deceitful news, or otherwise misleading thumbnail/text/tags. Please provide reputable sources to report hoaxes.`\n      },\n      {\n        id: 'privacy',\n        label: $localize`Privacy breach or doxxing`,\n        help:\n          // eslint-disable-next-line max-len\n          $localize`Contains personal information that could be used to track, identify, contact or impersonate someone (e.g. name, address, phone number, email, or credit card details).`\n      },\n      {\n        id: 'rights',\n        label: $localize`Copyright`,\n        help: $localize`Infringes your copyright wrt. the regional laws with which the server must comply.`\n      },\n      {\n        id: 'serverRules',\n        label: $localize`Breaks server rules`,\n        help:\n          // eslint-disable-next-line max-len\n          $localize`Anything not included in the above that breaks the terms of service, code of conduct, or general rules in place on the server.`\n      }\n    ]\n\n    if (type === 'video') {\n      reasons = reasons.concat([\n        {\n          id: 'thumbnails',\n          label: $localize`Thumbnails`,\n          help: $localize`The above can only be seen in thumbnails.`\n        },\n        {\n          id: 'captions',\n          label: $localize`Captions`,\n          help: $localize`The above can only be seen in captions (please describe which).`\n        }\n      ])\n    }\n\n    return reasons\n  }\n\n  private buildParamsFromSearch (search: string, params: HttpParams) {\n    const filters = this.restService.parseQueryStringFilter(search, {\n      id: { prefix: '#' },\n      state: {\n        prefix: 'state:',\n        handler: v => {\n          if (v === 'accepted') return AbuseState.ACCEPTED\n          if (v === 'pending') return AbuseState.PENDING\n          if (v === 'rejected') return AbuseState.REJECTED\n\n          return undefined\n        }\n      },\n      videoIs: {\n        prefix: 'videoIs:',\n        handler: v => {\n          if (v === 'deleted') return v\n          if (v === 'blacklisted') return v\n\n          return undefined\n        }\n      },\n      searchReporter: { prefix: 'reporter:' },\n      searchReportee: { prefix: 'reportee:' },\n      predefinedReason: { prefix: 'tag:' }\n    })\n\n    return this.restService.addObjectParams(params, filters)\n  }\n}\n","import { SortMeta } from 'primeng/api'\nimport { from as observableFrom, Observable } from 'rxjs'\nimport { catchError, concatMap, toArray } from 'rxjs/operators'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, RestPagination, RestService } from '@app/core'\nimport { arrayify } from '@peertube/peertube-core-utils'\nimport { ResultList, VideoBlacklist, VideoBlacklistType, VideoBlacklistType_Type } from '@peertube/peertube-models'\nimport { environment } from '../../../environments/environment'\n\n@Injectable()\nexport class VideoBlockService {\n  private authHttp = inject(HttpClient)\n  private restService = inject(RestService)\n  private restExtractor = inject(RestExtractor)\n\n  private static BASE_VIDEOS_URL = environment.apiUrl + '/api/v1/videos/'\n\n  listBlocks (options: {\n    pagination: RestPagination\n    sort: SortMeta\n    search?: string\n    type?: VideoBlacklistType_Type\n  }): Observable<ResultList<VideoBlacklist>> {\n    const { pagination, sort, search, type } = options\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      const filters = this.restService.parseQueryStringFilter(search, {\n        type: {\n          prefix: 'type:',\n          handler: v => {\n            if (v === 'manual') return VideoBlacklistType.MANUAL\n            if (v === 'auto') return VideoBlacklistType.AUTO_BEFORE_PUBLISHED\n\n            return undefined\n          }\n        }\n      })\n\n      params = this.restService.addObjectParams(params, filters)\n    }\n    if (type) params = params.append('type', type.toString())\n\n    return this.authHttp.get<ResultList<VideoBlacklist>>(VideoBlockService.BASE_VIDEOS_URL + 'blacklist', { params })\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  unblockVideo (videoIdArgs: number | number[]) {\n    const videoIds = arrayify(videoIdArgs)\n\n    return observableFrom(videoIds)\n      .pipe(\n        concatMap(id => this.authHttp.delete(VideoBlockService.BASE_VIDEOS_URL + id + '/blacklist')),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  blockVideo (options: {\n    videoId: number\n    reason?: string\n    unfederate: boolean\n  }[]) {\n    return observableFrom(options)\n      .pipe(\n        concatMap(({ videoId, unfederate, reason }) => {\n          const body = { unfederate, reason }\n\n          return this.authHttp.post(VideoBlockService.BASE_VIDEOS_URL + videoId + '/blacklist', body)\n        }),\n        toArray(),\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n}\n","<div\n  *ngIf=\"areActionsDisplayed(actions(), entry())\" class=\"dropdown-root\"\n  ngbDropdown (openChange)=\"openChange.emit($event)\" [placement]=\"placement()\" [container]=\"container()\"\n>\n  <button\n    class=\"action-button peertube-button border-0\"\n    [ngClass]=\"{ 'icon-only': !label(), 'peertube-button-small': buttonSize() === 'small', 'secondary-button': buttonStyled() && theme() === 'secondary', 'primary-button': buttonStyled() && theme() === 'primary' }\"\n    ngbDropdownToggle aria-label=\"Open actions\" i18n-aria-label\n  >\n    @if (label()) {\n      <span class=\"dropdown-toggle\">{{ label() }}</span>\n    } @else if (buttonDirection() === 'horizontal') {\n      <my-global-icon class=\"more-icon\" iconName=\"more-horizontal\"></my-global-icon>\n    } @else if (buttonDirection() === 'vertical') {\n      <my-global-icon class=\"more-icon\" iconName=\"more-vertical\"></my-global-icon>\n    }\n  </button>\n\n  <div ngbDropdownMenu class=\"dropdown-menu\">\n    <ng-container *ngFor=\"let actions of getActions()\">\n\n      <ng-container *ngFor=\"let action of actions\">\n        <div [ngClass]=\"action.class\" *ngIf=\"isBlockDisplayed(actions, action, entry())\">\n\n          <ng-template #templateActionLabel let-action>\n            <my-global-icon *ngIf=\"action.iconName\" [iconName]=\"action.iconName\" [ngClass]=\"'icon-' + action.iconName\" aria-hidden=\"true\"></my-global-icon>\n\n            <div class=\"item-label\">\n              <span>\n                {{ action.label }}\n\n                <my-global-icon\n                  *ngIf=\"action.ownerOrModeratorPrivilege && action.ownerOrModeratorPrivilege()\" iconName=\"shield\"\n                  class=\"owner-moderator-privilege\"\n                  [ngbTooltip]=\"action.ownerOrModeratorPrivilege()\"\n                ></my-global-icon>\n              </span>\n\n              <small class=\"muted\" *ngIf=\"action.description\">{{ action.description }}</small>\n            </div>\n          </ng-template>\n\n          @if (action.linkBuilder) {\n            @if (!action.isHeader) {\n              <a\n                [ngClass]=\"{ 'with-icon': !!action.iconName }\"\n                class=\"dropdown-item\"  [routerLink]=\"action.linkBuilder(entry())\" [queryParams]=\"getQueryParams(action, entry())\" [title]=\"action.title || ''\"\n              >\n                <ng-container *ngTemplateOutlet=\"templateActionLabel; context:{ $implicit: action }\"></ng-container>\n              </a>\n            }\n          } @else {\n            @if (!action.isHeader) {\n              <span\n                [ngClass]=\"{ 'with-icon': !!action.iconName }\"\n                class=\"custom-action dropdown-item\" tabindex=\"0\" role=\"button\" [title]=\"action.title || ''\"\n                (click)=\"action.handler(entry())\" (keyup.enter)=\"action.handler(entry())\"\n              >\n                <ng-container *ngTemplateOutlet=\"templateActionLabel; context:{ $implicit: action }\"></ng-container>\n              </span>\n            } @else if (areActionsDisplayed(actions, entry())) {\n              <h6 [ngClass]=\"{ 'with-icon': !!action.iconName }\" class=\"dropdown-header\" [title]=\"action.title || ''\">\n                <ng-container *ngTemplateOutlet=\"templateActionLabel; context:{ $implicit: action }\"></ng-container>\n              </h6>\n            }\n          }\n        </div>\n      </ng-container>\n\n      <div *ngIf=\"areActionsDisplayed(actions, entry())\" class=\"dropdown-divider\"></div>\n\n    </ng-container>\n  </div>\n</div>\n","import { ChangeDetectionStrategy, Component, input, output } from '@angular/core'\nimport { Params, RouterLink } from '@angular/router'\nimport { GlobalIconName } from '@app/shared/shared-icons/global-icon.component'\nimport { GlobalIconComponent } from '../../shared-icons/global-icon.component'\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { NgIf, NgClass, NgFor, NgTemplateOutlet } from '@angular/common'\n\nexport type DropdownAction<T> = {\n  label?: string\n  iconName?: GlobalIconName\n  description?: string\n  title?: string\n  handler?: (a: T) => any\n\n  linkBuilder?: (a: T) => (string | number)[]\n  queryParamsBuilder?: (a: T) => Params\n\n  isDisplayed?: (a: T) => boolean\n\n  class?: string[]\n  isHeader?: boolean\n\n  ownerOrModeratorPrivilege?: () => string\n}\n\nexport type DropdownButtonSize = 'normal' | 'small'\nexport type DropdownTheme = 'primary' | 'secondary'\nexport type DropdownDirection = 'horizontal' | 'vertical'\n\n@Component({\n  selector: 'my-action-dropdown',\n  styleUrls: [ './action-dropdown.component.scss' ],\n  templateUrl: './action-dropdown.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    NgIf,\n    NgbTooltip,\n    NgbDropdown,\n    NgbDropdownToggle,\n    NgClass,\n    GlobalIconComponent,\n    NgbDropdownMenu,\n    NgFor,\n    RouterLink,\n    NgTemplateOutlet\n  ]\n})\nexport class ActionDropdownComponent<T> {\n  readonly actions = input<DropdownAction<T>[] | DropdownAction<T>[][]>([])\n  readonly entry = input<T>(undefined)\n\n  readonly placement = input('bottom-left auto')\n  readonly container = input<null | 'body'>(undefined)\n\n  readonly buttonSize = input<DropdownButtonSize>('normal')\n  readonly buttonDirection = input<DropdownDirection>('horizontal')\n  readonly buttonStyled = input(true)\n\n  readonly label = input<string>(undefined)\n  readonly theme = input<DropdownTheme>('secondary')\n\n  readonly openChange = output<boolean>()\n\n  getActions (): DropdownAction<T>[][] {\n    const actions = this.actions()\n    if (actions.length !== 0 && Array.isArray(actions[0])) return actions as DropdownAction<T>[][]\n\n    return [ actions as DropdownAction<T>[] ]\n  }\n\n  getQueryParams (action: DropdownAction<T>, entry: T) {\n    if (action.queryParamsBuilder) return action.queryParamsBuilder(entry)\n\n    return {}\n  }\n\n  areActionsDisplayed (actions: (DropdownAction<T> | DropdownAction<T>[])[], entry: T): boolean {\n    return actions.some(a => {\n      if (Array.isArray(a)) return this.areActionsDisplayed(a, entry)\n\n      return a.isHeader !== true && (a.isDisplayed === undefined || a.isDisplayed(entry))\n    })\n  }\n\n  isBlockDisplayed (allActions: (DropdownAction<T> | DropdownAction<T>[])[], action: DropdownAction<T>, entry: T) {\n    // Do not display only the header\n    if (action.isHeader && !this.areActionsDisplayed(allActions, entry)) return false\n\n    return action.isDisplayed === undefined || action.isDisplayed(entry) === true\n  }\n}\n","@if (videoHref()) {\n  <a [ariaLabel]=\"ariaLabel()\" [href]=\"videoHref()\" [target]=\"videoTarget()\" class=\"video-thumbnail\" tabindex=\"-1\">\n    <ng-container *ngTemplateOutlet=\"aContent\"></ng-container>\n  </a>\n} @else {\n  <a [ariaLabel]=\"ariaLabel()\" [routerLink]=\"getVideoRouterLink()\" [queryParams]=\"queryParams()\" class=\"video-thumbnail\" tabindex=\"-1\">\n    <ng-container *ngTemplateOutlet=\"aContent\"></ng-container>\n  </a>\n}\n\n<ng-template #aContent>\n  <img alt=\"\" [attr.src]=\"getImageUrl()\" [ngClass]=\"{ 'blur-filter': blur() }\"  />\n\n  <div *ngIf=\"displayWatchLaterPlaylist()\" class=\"actions-overlay\">\n    <button\n      class=\"watch-icon-overlay button-unstyle\"\n      placement=\"left\" [ngbTooltip]=\"getWatchIconText()\" container=\"body\" #watchLaterTooltip=\"ngbTooltip\"\n      (click)=\"onWatchLaterClick($event)\" [attr.aria-label]=\"inWatchLaterPlaylist() ? removeFromWatchLaterText : addToWatchLaterText\"\n    >\n      @if (inWatchLaterPlaylist()) {\n        <my-global-icon iconName=\"tick\"></my-global-icon>\n      } @else {\n        <my-global-icon iconName=\"clock\"></my-global-icon>\n      }\n    </button>\n  </div>\n\n  <div class=\"label-overlay pt-badge badge-warning\"><ng-content select=\"label-warning\"></ng-content></div>\n  <div class=\"label-overlay pt-badge badge-danger\"><ng-content select=\"label-danger\"></ng-content></div>\n\n  @if (video().isLive) {\n    <div  class=\"live-overlay\" [ngClass]=\"{ 'live-streaming': isLiveStreaming(), 'ended-live': isEndedLive() }\">\n      @if (isLiveStreaming()) {\n        <ng-container i18n>LIVE</ng-container>\n      } @else if (isEndedLive()) {\n        <ng-container i18n>LIVE ENDED</ng-container>\n      } @else {\n        <ng-container i18n>WAIT LIVE</ng-container>\n      }\n    </div>\n  } @else if (getDurationLabel()) {\n    <div class=\"duration-overlay\" [ariaLabel]=\"getDurationOverlayLabel()\">{{ getDurationLabel() }}</div>\n  }\n\n  <div *ngIf=\"playOverlay()\" class=\"play-overlay\">\n    <div class=\"icon\"></div>\n  </div>\n\n  <div class=\"progress-bar\" *ngIf=\"!video().isLive && video().userHistory?.currentTime\">\n    <div [ngStyle]=\"{ 'width.%': getProgressPercent() }\">\n      <span class=\"visually-hidden\" i18n>You watched {{ getProgressPercent() }}% of this video</span>\n    </div>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common'\nimport { booleanAttribute, Component, inject, input, OnChanges, output, viewChild } from '@angular/core'\nimport { RouterLink } from '@angular/router'\nimport { ScreenService } from '@app/core'\nimport { getAPIUrl } from '@app/helpers'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { Video as VideoServerModel, VideoState } from '@peertube/peertube-models'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { Video } from '../shared-main/video/video.model'\n\nexport type VideoThumbnailInput = Pick<\n  VideoServerModel,\n  | 'duration'\n  | 'id'\n  | 'uuid'\n  | 'shortUUID'\n  | 'isLive'\n  | 'state'\n  | 'previewPath'\n  | 'previewUrl'\n  | 'thumbnailPath'\n  | 'thumbnailUrl'\n  | 'userHistory'\n>\n\n@Component({\n  selector: 'my-video-thumbnail',\n  styleUrls: [ './video-thumbnail.component.scss' ],\n  templateUrl: './video-thumbnail.component.html',\n  imports: [ CommonModule, RouterLink, NgbTooltip, GlobalIconComponent ]\n})\nexport class VideoThumbnailComponent implements OnChanges {\n  private screenService = inject(ScreenService)\n\n  readonly video = input.required<VideoThumbnailInput>()\n\n  readonly videoRouterLink = input<string | any[]>(undefined)\n  readonly queryParams = input<{\n    [p: string]: any\n  }>(undefined)\n  readonly videoHref = input<string>(undefined)\n  readonly videoTarget = input<string>(undefined)\n\n  readonly displayWatchLaterPlaylist = input<boolean, boolean | string>(false, { transform: booleanAttribute })\n  readonly inWatchLaterPlaylist = input<boolean, boolean | string>(false, { transform: booleanAttribute })\n  readonly playOverlay = input<boolean, boolean | string>(true, { transform: booleanAttribute })\n\n  readonly ariaLabel = input.required<string>()\n  readonly blur = input.required({ transform: booleanAttribute })\n\n  readonly watchLaterTooltip = viewChild<NgbTooltip>('watchLaterTooltip')\n  readonly watchLaterClick = output<boolean>()\n\n  addToWatchLaterText: string\n  removeFromWatchLaterText: string\n\n  durationLabel: string\n\n  constructor () {\n    this.addToWatchLaterText = $localize`Add to watch later`\n    this.removeFromWatchLaterText = $localize`Remove from watch later`\n  }\n\n  ngOnChanges () {\n    this.durationLabel = this.video().duration\n      ? Video.buildDurationLabel(this.video())\n      : undefined\n  }\n\n  getWatchIconText () {\n    if (this.inWatchLaterPlaylist()) return this.removeFromWatchLaterText\n\n    return this.addToWatchLaterText\n  }\n\n  isLiveStreaming () {\n    // In non moderator mode we only display published live\n    // If in moderator mode, the server adds the state info to the object\n    const video = this.video()\n    if (!video.isLive) return false\n\n    return !video.state || video.state?.id === VideoState.PUBLISHED\n  }\n\n  isEndedLive () {\n    return this.video().state?.id === VideoState.LIVE_ENDED\n  }\n\n  getImageUrl () {\n    const video = this.video()\n    if (!video) return ''\n\n    if (this.screenService.isInMobileView()) {\n      return video.previewUrl || getAPIUrl() + video.previewPath\n    }\n\n    return video.thumbnailUrl || getAPIUrl() + video.thumbnailPath\n  }\n\n  getProgressPercent () {\n    const video = this.video()\n    if (!video.userHistory) return 0\n\n    const currentTime = video.userHistory.currentTime\n\n    return Math.round(currentTime / video.duration * 100)\n  }\n\n  getDurationOverlayLabel () {\n    return $localize`Video duration is ${this.getDurationLabel()}`\n  }\n\n  getVideoRouterLink () {\n    const videoRouterLink = this.videoRouterLink()\n    if (videoRouterLink) return videoRouterLink\n\n    return Video.buildWatchUrl(this.video())\n  }\n\n  onWatchLaterClick (event: Event) {\n    this.watchLaterClick.emit(this.inWatchLaterPlaylist())\n\n    event.stopPropagation()\n    this.watchLaterTooltip().close()\n\n    return false\n  }\n\n  getDurationLabel () {\n    return this.durationLabel\n  }\n}\n","import { Validators } from '@angular/forms'\nimport { BuildFormValidator } from './form-validator.model'\n\nexport const ABUSE_REASON_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, Validators.minLength(2), Validators.maxLength(3000) ],\n  MESSAGES: {\n    required: $localize`Report reason is required.`,\n    minlength: $localize`Report reason must be at least 2 characters long.`,\n    maxlength: $localize`Report reason cannot be more than 3000 characters long.`\n  }\n}\n\nexport const ABUSE_MODERATION_COMMENT_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, Validators.minLength(2), Validators.maxLength(3000) ],\n  MESSAGES: {\n    required: $localize`Moderation comment is required.`,\n    minlength: $localize`Moderation comment must be at least 2 characters long.`,\n    maxlength: $localize`Moderation comment cannot be more than 3000 characters long.`\n  }\n}\n\nexport const ABUSE_MESSAGE_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, Validators.minLength(2), Validators.maxLength(3000) ],\n  MESSAGES: {\n    required: $localize`Abuse message is required.`,\n    minlength: $localize`Abuse message must be at least 2 characters long.`,\n    maxlength: $localize`Abuse message cannot be more than 3000 characters long.`\n  }\n}\n"]}