{
  "version": 3,
  "sources": ["src/app/shared/shared-main/instance/instance.service.ts"],
  "sourcesContent": ["import { forkJoin } from 'rxjs'\nimport { catchError, map } from 'rxjs/operators'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { MarkdownService, RestExtractor, ServerService } from '@app/core'\nimport { objectKeysTyped, peertubeTranslate } from '@peertube/peertube-core-utils'\nimport { About } from '@peertube/peertube-models'\nimport { environment } from '../../../../environments/environment'\nimport { logger } from '@root-helpers/logger'\n\nexport type AboutHTML = Pick<\n  About['instance'],\n  | 'terms'\n  | 'codeOfConduct'\n  | 'moderationInformation'\n  | 'administrator'\n  | 'creationReason'\n  | 'maintenanceLifetime'\n  | 'businessModel'\n  | 'hardwareInformation'\n>\n\n@Injectable()\nexport class InstanceService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n  private markdownService = inject(MarkdownService)\n  private serverService = inject(ServerService)\n\n  private static BASE_CONFIG_URL = environment.apiUrl + '/api/v1/config'\n  private static BASE_SERVER_URL = environment.apiUrl + '/api/v1/server'\n\n  getAbout () {\n    return this.authHttp.get<About>(InstanceService.BASE_CONFIG_URL + '/about')\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  // ---------------------------------------------------------------------------\n\n  updateInstanceBanner (formData: FormData) {\n    const url = InstanceService.BASE_CONFIG_URL + '/instance-banner/pick'\n\n    return this.authHttp.post(url, formData)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  deleteInstanceBanner () {\n    const url = InstanceService.BASE_CONFIG_URL + '/instance-banner'\n\n    return this.authHttp.delete(url)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  // ---------------------------------------------------------------------------\n\n  updateInstanceAvatar (formData: FormData) {\n    const url = InstanceService.BASE_CONFIG_URL + '/instance-avatar/pick'\n\n    return this.authHttp.post(url, formData)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  deleteInstanceAvatar () {\n    const url = InstanceService.BASE_CONFIG_URL + '/instance-avatar'\n\n    return this.authHttp.delete(url)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  // ---------------------------------------------------------------------------\n\n  contactAdministrator (fromEmail: string, fromName: string, subject: string, message: string) {\n    const body = {\n      fromEmail,\n      fromName,\n      subject,\n      body: message\n    }\n\n    return this.authHttp.post(InstanceService.BASE_SERVER_URL + '/contact', body)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  async buildHtml (about: About) {\n    const html: AboutHTML = {\n      terms: '',\n      codeOfConduct: '',\n      moderationInformation: '',\n      administrator: '',\n      creationReason: '',\n      maintenanceLifetime: '',\n      businessModel: '',\n      hardwareInformation: ''\n    }\n\n    for (const key of objectKeysTyped(html)) {\n      html[key] = await this.markdownService.enhancedMarkdownToHTML({ markdown: about.instance[key] })\n    }\n\n    return html\n  }\n\n  buildTranslatedLanguages (about: About) {\n    return forkJoin([\n      this.serverService.getVideoLanguages(),\n      this.serverService.getServerLocale()\n    ]).pipe(\n      map(([ languagesArray, translations ]) => {\n        return about.instance.languages\n          .map(l => {\n            const languageObj = languagesArray.find(la => la.id === l)\n            if (!languageObj) {\n              logger.error(`Cannot find language ${l} in available languages`)\n              return ''\n            }\n\n            return peertubeTranslate(languageObj.label, translations)\n          })\n      })\n    )\n  }\n\n  buildTranslatedCategories (about: About) {\n    return forkJoin([\n      this.serverService.getVideoCategories(),\n      this.serverService.getServerLocale()\n    ]).pipe(\n      map(([ categoriesArray, translations ]) => {\n        return about.instance.categories\n          .map(c => {\n            const categoryObj = categoriesArray.find(ca => ca.id === c)\n            if (!categoryObj) {\n              logger.error(`Cannot find instance category ${c} in available categories`)\n              return ''\n            }\n\n            return peertubeTranslate(categoryObj.label, translations)\n          })\n      })\n    )\n  }\n}\n"],
  "mappings": "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",
  "names": ["InstanceService", "authHttp", "inject", "HttpClient", "restExtractor", "RestExtractor", "markdownService", "MarkdownService", "serverService", "ServerService", "getAbout", "get", "BASE_CONFIG_URL", "pipe", "catchError", "res", "handleError", "updateInstanceBanner", "formData", "url", "post", "err", "deleteInstanceBanner", "delete", "updateInstanceAvatar", "deleteInstanceAvatar", "contactAdministrator", "fromEmail", "fromName", "subject", "message", "body", "BASE_SERVER_URL", "buildHtml", "about", "__async", "html", "terms", "codeOfConduct", "moderationInformation", "administrator", "creationReason", "maintenanceLifetime", "businessModel", "hardwareInformation", "key", "objectKeysTyped", "enhancedMarkdownToHTML", "markdown", "instance", "buildTranslatedLanguages", "forkJoin", "getVideoLanguages", "getServerLocale", "map", "languagesArray", "translations", "languages", "l", "languageObj", "find", "la", "id", "peertubeTranslate", "label", "logger", "error", "buildTranslatedCategories", "getVideoCategories", "categoriesArray", "categories", "c", "categoryObj", "ca", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "_InstanceService"]
}
