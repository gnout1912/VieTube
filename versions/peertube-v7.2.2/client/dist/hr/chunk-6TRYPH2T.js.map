{"version":3,"mappings":"oZACEA,EAAA,aAAAC,CAAA,QAAAC,CAAA,CAAAC,CAAA,IAAsCC,EAAA,UAAAC,EAAAC,OAAA,EAAmB,MAAAD,EAAAE,aAAA,GAAAF,EAAAG,WAAAH,EAAAI,iBAAAC,CAAA,aAAAC,EAAAV,CAAA,CAAAW,CAAA,KAAAX,CAAA,KAEzDY,EAAA,aAAiE,UACzDC,EAAA,GAAuBC,EAAA,EAAO,GAAAd,CAAA,QAAAC,CAAA,CAAAC,CAAA,IADOC,EAAA,UAAAC,EAAAC,OAAA,EACrCU,EAAA,GAAAC,EAAAZ,EAAAa,gBAAA,cAAAC,EAAAlB,CAAA,CAAAW,CAAA,KAAAX,CAAA,IAGRD,EAAA,aAAAC,CAAA,QAAAC,CAAA,CAAAC,CAAA,IAA4CC,EAAA,UAAAC,EAAAC,OAAA,aAAAc,EAAAnB,CAAA,CAAAW,CAAA,KAAAX,CAAA,IAN5CoB,EAAA,EAAAC,EAAA,aAA2H,EAAAC,EAAA,aAE1D,EAAAC,EAAA,aAAAvB,CAAA,QAAAC,CAAA,CAAAC,CAAA,GAFjDC,EAAA,OAAAC,EAAAoB,aAAA,GAEAT,EAAA,EAAAZ,EAAA,OAAAC,EAAAqB,oBAAA,GAIAV,EAAA,EAAAZ,EAAA,OAAAC,EAAAsB,mBAAA,cAAAC,EAAA3B,CAAA,CAAAW,CAAA,YAAAiB,EAAA5B,CAAA,CAAAW,CAAA,EAAAX,CAAA,IAIhBoB,EAAA,EAAAS,EAAA,6BAAAC,EAAA9B,CAAA,CAAAW,CAAA,KAAAX,CAAA,KADFY,EAAA,SACEQ,EAAA,EAAAW,EAAA,aACFjB,EAAA,GAAAd,CAAA,QAAAC,CAAA,CAAAC,CAAA,GAAA8B,CAAA,CAAAC,CAAA,IAF6B9B,EAAA,OAAAC,EAAA8B,KAAA,EAAAzB,CAAA,EAAe,QAAAL,EAAA+B,SAAA,GAC5BpB,EAAA,EAAAZ,EAAA,mBAAAiC,CAAA,aAAAC,EAAArC,CAAA,CAAAW,CAAA,YAAA2B,EAAAtC,CAAA,CAAAW,CAAA,EAAAX,CAAA,IAIdoB,EAAA,EAAAmB,EAAA,6BAAAC,EAAAxC,CAAA,CAAAW,CAAA,KAAAX,CAAA,KADFY,EAAA,UACEQ,EAAA,EAAAqB,EAAA,aACF3B,EAAA,GAAAd,CAAA,QAAAC,CAAA,CAAAC,CAAA,GAAA8B,CAAA,CAAAC,CAAA,IAFqC9B,EAAA,aAAAC,EAAAsC,aAAA,GAA6B,QAAAtC,EAAA+B,SAAA,GAClDpB,EAAA,EAAAZ,EAAA,mBAAAiC,CAAA,aAAAO,EAAA3C,CAAA,CAAAW,CAAA,YAAAiC,EAAA5C,CAAA,CAAAW,CAAA,EAAAX,CAAA,IAIdoB,EAAA,EAAAyB,EAAA,6BAAAC,EAAA9C,CAAA,CAAAW,CAAA,KAAAX,CAAA,KADF+C,EAAA,GACE3B,EAAA,EAAA4B,EAAA,aAAAC,CAAA,IAAAjD,CAAA,IAAAE,CAAA,OAAAD,CAAA,CAAAgC,CAAA,IAAclB,EAAA,EAAAZ,EAAA,mBAAAiC,CAAA,ICAhB,GAAac,KAAoB,KAA3B,GAAOA,GAAP,KAAOA,EAAoB,CACvBC,GAAKC,EAAOC,CAAU,EAErBC,SAAWC,EAAsB,UAAU,EAE3CC,MAAQC,EAAwBC,MAAS,EACzCC,UAAYF,EAAuDC,MAAS,EAE5EpD,aAAemD,EAAcC,MAAS,EAEtCE,KAAOH,EAAM,IAAK,CAAEI,UAAWC,CAAe,CAAE,EAChDC,aAAeN,EAAM,GAAO,CAAEI,UAAWG,CAAgB,CAAE,EAG3D9B,KAAOuB,EAAcC,MAAS,EAE9BhB,aAAee,EAAsBC,MAAS,EAE9CO,MAAQR,EAAK,EAEtBtB,UAAQ,CACN,MAAI,MAAK8B,MAAK,EAAW,KAAKA,MAAK,EAC/B,KAAKC,UAAS,KAAuB,KAAKV,MAAK,EAAGW,IAAI,2BACtD,KAAKC,UAAS,KAAuB,KAAKZ,MAAK,EAAGW,IAAI,sBACtD,KAAKE,WAAU,KAAuB,KAAKb,MAAK,EAAGW,IAAI,wBAEpD,EACT,EAEA9D,QAAoB,GACpBG,iBACAD,UAEA+D,UAAQ,CACN,KAAKC,sBAAqB,EAE1B,KAAKC,eAAc,EACnB,KAAKC,aAAY,CACnB,EAEAC,aAAW,CACT,KAAKF,eAAc,EACnB,KAAKC,aAAY,CACnB,EAEQA,cAAY,CAClB,GAAIE,GAAa,OACbC,EAAW,OAEf,KAAKvE,QAAU,CAAE,QAAQ,EAEzB,GAAMuD,GAAO,KAAKA,KAAI,EAClBA,GAAQ,CAAC,KAAKG,aAAY,IAC5BY,EAAa,GAAGf,CAAI,KAEhBA,GAAQ,GACVgB,EAAW,OACFhB,GAAQ,IACjBgB,EAAW,OACFhB,GAAQ,MACjBgB,EAAW,SAIX,KAAKR,UAAS,EAChB,KAAK/D,QAAQwE,KAAK,SAAS,EAClB,KAAKX,UAAS,EACvB,KAAK7D,QAAQwE,KAAK,SAAS,EAClB,KAAKR,WAAU,GACxB,KAAKhE,QAAQwE,KAAK,UAAU,EAI1B,KAAKpD,oBAAmB,IAC1B,KAAKpB,QAAQwE,KAAK,SAAS,EAC3B,KAAKxE,QAAQwE,KAAK,KAAKC,cAAa,CAAE,GAGxC,GAAMC,GAAW,KAAK5B,GAAG6B,cAA8BC,MACvDF,EAAQG,YAAY,mBAAoBP,CAAU,EAClDI,EAAQG,YAAY,iBAAkBN,CAAQ,CAChD,EAEQL,uBAAqB,CAG3B,KAAK/D,iBAAmB,KAAK4D,UAAS,EAClCe,EAAaC,uBAAuB,KAAKC,cAAa,CAAE,EACxDC,EAAQF,uBAAuB,KAAKC,cAAa,CAAE,CACzD,EAEQb,gBAAc,CACpB,GAAMhB,GAAQ,KAAKA,MAAK,EACxB,GAAI,CAACA,EAAO,CACV,KAAKjD,UAAY,GACjB,OACF,CAEA,GAAI,KAAK2D,UAAS,GAAM,KAAKE,UAAS,GAAM,KAAKC,WAAU,EAAI,CAC7D,KAAK9D,UAAYgF,EAAMC,qBAAqBhC,EAAO,KAAK6B,cAAa,CAAE,EACvE,OACF,CAEA,KAAK9E,UAAY,EACnB,EAEAiB,cAAY,CAEV,MADI,MAAKmC,UAAS,IAAO,YACrB,KAAKrD,aAAY,EAAW,GAEzB,CAAC,EAAE,KAAKkD,MAAK,GAAM,KAAKjD,UACjC,EAEAkB,qBAAmB,CACjB,MAAO,CAAC,KAAKD,aAAY,GAAM,KAAKgC,MAAK,GAAM,CAAC,KAAKjD,SACvD,EAEAmB,oBAAkB,CAChB,MAAO,MAAKiC,UAAS,IAAO,YAAc,CAAC,KAAKH,MAAK,CACvD,EAEAvC,iBAAe,CACb,GAAMkD,GAAO,KAAKX,MAAK,GAAIW,KAC3B,MAAKA,GAEEA,EAAKsB,MAAM,EAAG,CAAC,EAFJ,EAGpB,EAEQvB,WAAS,CACf,MAAO,MAAKP,UAAS,IAAO,SAC9B,EAEQS,WAAS,CACf,MAAO,MAAKT,UAAS,IAAO,SAC9B,EAEQU,YAAU,CAChB,MAAO,MAAKV,UAAS,IAAO,UAC9B,EAEQ0B,eAAa,CACnB,GAAMzB,GAAO,KAAKA,KAAI,EACtB,GAAIA,EAAM,MAAO,CAACA,CAGpB,EAEQkB,eAAa,CACnB,GAAMY,GAAmB,KAAKzE,gBAAe,EAAG0E,YAAW,EAGrDC,EAAS,CACb,gBAAiB,OACjBC,GAAA,CAAO,QACPC,GAAA,CAAO,SACPC,GAAA,CAAO,OACPC,GAAA,CAAO,SACPC,GAAA,CAAO,SACPC,IAAA,CAAQ,MACRC,IAAA,CAAQ,aAGJC,EAAQC,EAAgBT,CAAM,EACjCU,KAAKC,GAASA,EAAMC,SAASd,CAAgB,CAAC,EAEjD,MAAOE,GAAOQ,CAAK,GAAK,MAC1B,IAAAK,CAAA,CAtKWvD,4CAAoB,IAAAuD,CAAA,CAApBvD,wBAAoBwD,UAAA,sBAAAC,UAAA,QAAAA,CAAAC,EAAAC,EAAA,CAAAD,EAAA,GAAAE,CAAA,CAAAC,CAAA,CAAAzD,QAAA,CAAA0D,CAAA,IAAAC,CAAA,IAAAC,CAAA,KAAAC,MAAA,EAAA3D,KAAA,aAAAG,SAAA,iBAAArD,YAAA,oBAAAsD,IAAA,YAAAG,YAAA,oBAAA7B,IAAA,YAAAQ,YAAA,oBAAAuB,KAAA,cAAAmD,QAAA,EAAAC,CAAA,EAAAC,KAAA,GAAAC,IAAA,GAAAC,MAAA,8WAAAC,QAAA,SAAAA,CAAAR,CAAA,CAAAF,CAAA,EAAAE,CAAA,IDnBjC7F,EAAA,EAAAsG,EAAA,yBAAAC,CAAA,EAAkB,EAAAC,EAAA,WAU0F,EAAAC,EAAA,WAIpB,EAAAC,EAAA,sBAAAb,CAAA,KAJpFlG,EAAA,GAAAZ,EAAA,OAAA0G,EAAArD,MAAA,GAAAqD,EAAA3E,KAAA,GAIAnB,EAAA,EAAAZ,EAAA,OAAA0G,EAAArD,MAAA,GAAAqD,EAAAnE,aAAA,GAIW3B,EAAA,EAAAZ,EAAA,QAAA0G,EAAArD,MAAA,IAAAqD,EAAA3E,KAAA,IAAA2E,EAAAnE,aAAA,MAAAqF,YAAA,ECDFC,EAAMC,EAASC,EAAkBC,CAAU,EAAAC,OAAA;gEAAA,KAElD,GAAOlF,GAAPmF,QAAOnF,EAAoB,aAAAoF,EAAA,IAAA3H,CAAA","names":["ɵɵelement","t","e","p","ɵɵproperty","ctx_r0","classes","previewImage","avatarUrl","defaultAvatarUrl","ɵɵsanitizeUrl","j","a","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","getActorInitial","F","G","ɵɵtemplate","ActorAvatarComponent_ng_template_0_img_0_Template","ActorAvatarComponent_ng_template_0_div_1_Template","ActorAvatarComponent_ng_template_0_div_2_Template","displayImage","displayActorInitial","displayPlaceholder","Q","q","ActorAvatarComponent_a_2_1_ng_template_0_Template","J","ActorAvatarComponent_a_2_1_Template","n","g","href","getTitle","img_r2","K","B","ActorAvatarComponent_a_3_1_ng_template_0_Template","W","ActorAvatarComponent_a_3_1_Template","internalHref","X","Y","ActorAvatarComponent_ng_container_4_1_ng_template_0_Template","Z","ɵɵelementContainerStart","ActorAvatarComponent_ng_container_4_1_Template","x","ActorAvatarComponent","el","inject","ElementRef","avatarEl","viewChild","actor","input","undefined","actorType","size","transform","numberAttribute","responseSize","booleanAttribute","title","isAccount","name","isChannel","isInstance","ngOnInit","buildDefaultAvatarUrl","buildAvatarUrl","buildClasses","ngOnChanges","avatarSize","fontSize","push","getColorTheme","elStyle","nativeElement","style","setProperty","VideoChannel","GET_DEFAULT_AVATAR_URL","getSizeNumber","Account","Actor","GET_ACTOR_AVATAR_URL","slice","initialLowercase","toLowerCase","themes","def","ghi","jkl","mno","pqr","stvu","wxyz","theme","objectKeysTyped","find","chars","includes","_","selectors","viewQuery","rf","ctx","I","i","H","r","z","inputs","features","C","decls","vars","consts","template","ActorAvatarComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","ActorAvatarComponent_a_2_Template","ActorAvatarComponent_a_3_Template","ActorAvatarComponent_ng_container_4_Template","dependencies","NgIf","NgClass","NgTemplateOutlet","RouterLink","styles","_ActorAvatarComponent","ct"],"ignoreList":[],"sources":["src/app/shared/shared-actor-image/actor-avatar.component.html","src/app/shared/shared-actor-image/actor-avatar.component.ts"],"sourcesContent":["<ng-template #img>\n  <img #avatarEl *ngIf=\"displayImage()\" [ngClass]=\"classes\" [src]=\"previewImage() || avatarUrl || defaultAvatarUrl\" alt=\"\" />\n\n  <div #avatarEl *ngIf=\"displayActorInitial()\" [ngClass]=\"classes\">\n    <span>{{ getActorInitial() }}</span>\n  </div>\n\n  <div #avatarEl *ngIf=\"displayPlaceholder()\" [ngClass]=\"classes\"></div>\n</ng-template>\n\n<a *ngIf=\"actor() && href()\" [href]=\"href()\" target=\"_blank\" rel=\"noopener noreferrer\" [title]=\"getTitle()\">\n  <ng-template *ngTemplateOutlet=\"img\"></ng-template>\n</a>\n\n<a *ngIf=\"actor() && internalHref()\" [routerLink]=\"internalHref()\" [title]=\"getTitle()\">\n  <ng-template *ngTemplateOutlet=\"img\"></ng-template>\n</a>\n\n<ng-container *ngIf=\"!actor() || (!href() && !internalHref())\">\n  <ng-template *ngTemplateOutlet=\"img\"></ng-template>\n</ng-container>\n","import { NgClass, NgIf, NgTemplateOutlet } from '@angular/common'\nimport { Component, ElementRef, OnChanges, OnInit, booleanAttribute, inject, input, numberAttribute, viewChild } from '@angular/core'\nimport { RouterLink } from '@angular/router'\nimport { objectKeysTyped } from '@peertube/peertube-core-utils'\nimport { Account } from '../shared-main/account/account.model'\nimport { Actor } from '../shared-main/account/actor.model'\nimport { VideoChannel } from '../shared-main/channel/video-channel.model'\n\nexport type ActorAvatarInput = {\n  name: string\n  avatars: { width: number, url?: string, path: string }[]\n}\n\n@Component({\n  selector: 'my-actor-avatar',\n  styleUrls: [ './actor-avatar.component.scss' ],\n  templateUrl: './actor-avatar.component.html',\n  imports: [ NgIf, NgClass, NgTemplateOutlet, RouterLink ]\n})\nexport class ActorAvatarComponent implements OnInit, OnChanges {\n  private el = inject(ElementRef)\n\n  readonly avatarEl = viewChild<ElementRef>('avatarEl')\n\n  readonly actor = input<ActorAvatarInput>(undefined)\n  readonly actorType = input<'channel' | 'account' | 'instance' | 'unlogged'>(undefined)\n\n  readonly previewImage = input<string>(undefined)\n\n  readonly size = input(120, { transform: numberAttribute })\n  readonly responseSize = input(false, { transform: booleanAttribute })\n\n  // Use an external link\n  readonly href = input<string>(undefined)\n  // Use routerLink\n  readonly internalHref = input<string | any[]>(undefined)\n\n  readonly title = input<string>()\n\n  getTitle () {\n    if (this.title()) return this.title()\n    if (this.isAccount()) return $localize`${this.actor().name} (account page)`\n    if (this.isChannel()) return $localize`${this.actor().name} (channel page)`\n    if (this.isInstance()) return $localize`${this.actor().name} (instance page)`\n\n    return ''\n  }\n\n  classes: string[] = []\n  defaultAvatarUrl: string\n  avatarUrl: string\n\n  ngOnInit () {\n    this.buildDefaultAvatarUrl()\n\n    this.buildAvatarUrl()\n    this.buildClasses()\n  }\n\n  ngOnChanges () {\n    this.buildAvatarUrl()\n    this.buildClasses()\n  }\n\n  private buildClasses () {\n    let avatarSize = '100%'\n    let fontSize = '22px'\n\n    this.classes = [ 'avatar' ]\n\n    const size = this.size()\n    if (size && !this.responseSize()) {\n      avatarSize = `${size}px`\n\n      if (size <= 18) {\n        fontSize = '13px'\n      } else if (size >= 100) {\n        fontSize = '40px'\n      } else if (size >= 120) {\n        fontSize = '46px'\n      }\n    }\n\n    if (this.isChannel()) {\n      this.classes.push('channel')\n    } else if (this.isAccount()) {\n      this.classes.push('account')\n    } else if (this.isInstance()) {\n      this.classes.push('instance')\n    }\n\n    // No avatar, use actor name initial\n    if (this.displayActorInitial()) {\n      this.classes.push('initial')\n      this.classes.push(this.getColorTheme())\n    }\n\n    const elStyle = (this.el.nativeElement as HTMLElement).style\n    elStyle.setProperty('--co-avatar-size', avatarSize)\n    elStyle.setProperty('--co-font-size', fontSize)\n  }\n\n  private buildDefaultAvatarUrl () {\n    // TODO: have a default instance avatar\n\n    this.defaultAvatarUrl = this.isChannel()\n      ? VideoChannel.GET_DEFAULT_AVATAR_URL(this.getSizeNumber())\n      : Account.GET_DEFAULT_AVATAR_URL(this.getSizeNumber())\n  }\n\n  private buildAvatarUrl () {\n    const actor = this.actor()\n    if (!actor) {\n      this.avatarUrl = ''\n      return\n    }\n\n    if (this.isAccount() || this.isChannel() || this.isInstance()) {\n      this.avatarUrl = Actor.GET_ACTOR_AVATAR_URL(actor, this.getSizeNumber())\n      return\n    }\n\n    this.avatarUrl = ''\n  }\n\n  displayImage () {\n    if (this.actorType() === 'unlogged') return true\n    if (this.previewImage()) return true\n\n    return !!(this.actor() && this.avatarUrl)\n  }\n\n  displayActorInitial () {\n    return !this.displayImage() && this.actor() && !this.avatarUrl\n  }\n\n  displayPlaceholder () {\n    return this.actorType() !== 'unlogged' && !this.actor()\n  }\n\n  getActorInitial () {\n    const name = this.actor()?.name\n    if (!name) return ''\n\n    return name.slice(0, 1)\n  }\n\n  private isAccount () {\n    return this.actorType() === 'account'\n  }\n\n  private isChannel () {\n    return this.actorType() === 'channel'\n  }\n\n  private isInstance () {\n    return this.actorType() === 'instance'\n  }\n\n  private getSizeNumber () {\n    const size = this.size()\n    if (size) return +size\n\n    return undefined\n  }\n\n  private getColorTheme () {\n    const initialLowercase = this.getActorInitial().toLowerCase()\n\n    // Keep consistency with CSS\n    const themes = {\n      '0123456789abc': 'blue',\n      'def': 'green',\n      'ghi': 'purple',\n      'jkl': 'gray',\n      'mno': 'yellow',\n      'pqr': 'orange',\n      'stvu': 'red',\n      'wxyz': 'dark-blue'\n    }\n\n    const theme = objectKeysTyped(themes)\n      .find(chars => chars.includes(initialLowercase))\n\n    return themes[theme] || 'blue'\n  }\n}\n"]}