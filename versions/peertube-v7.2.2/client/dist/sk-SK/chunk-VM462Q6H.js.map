{
  "version": 3,
  "sources": ["src/app/shared/shared-main/common/number-formatter.pipe.ts"],
  "sourcesContent": ["import { formatNumber } from '@angular/common'\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core'\n\n// Thanks: https://github.com/danrevah/ngx-pipes/blob/master/src/ng-pipes/pipes/math/bytes.ts\n\n@Pipe({\n  name: 'myNumberFormatter',\n  standalone: true\n})\nexport class NumberFormatterPipe implements PipeTransform {\n\n  /**\n   * @param x number\n   * @param n number of decimals to get (defaults to 1, needs to be >= 1)\n   */\n  static getDecimalForNumber (x: number, n = 1) {\n    const v = x.toString().split('.')\n    const f = v[1] || ''\n    if (f.length > n) return +f.substring(0, n)\n    return +f\n  }\n\n  private dictionary: { max: number, type: string }[] = [\n    { max: 1000, type: '' },\n    { max: 1000000, type: 'K' },\n    { max: 1000000000, type: 'M' }\n  ]\n\n  constructor (@Inject(LOCALE_ID) private localeId: string) {}\n\n  transform (value: number) {\n    const format = this.dictionary.find(d => value < d.max) || this.dictionary[this.dictionary.length - 1]\n    const calc = value / (format.max / 1000)\n    const integralPart = Math.floor(calc)\n    const decimalPart = NumberFormatterPipe.getDecimalForNumber(calc)\n\n    return integralPart < 10 && decimalPart > 0\n      ? formatNumber(parseFloat(`${integralPart}.${decimalPart}`), this.localeId) + format.type\n      : `${integralPart}${format.type}`\n  }\n}\n"],
  "mappings": "yGASA,IAAaA,GAAmB,IAAA,CAA1B,IAAOA,EAAP,MAAOA,CAAmB,CAmBUC,SAbxC,OAAOC,oBAAqBC,EAAWC,EAAI,EAAC,CAE1C,IAAMC,EADIF,EAAEG,SAAQ,EAAGC,MAAM,GAAG,EACpB,CAAC,GAAK,GAClB,OAAIF,EAAEG,OAASJ,EAAU,CAACC,EAAEI,UAAU,EAAGL,CAAC,EACnC,CAACC,CACV,CAEQK,WAA8C,CACpD,CAAEC,IAAK,IAAMC,KAAM,EAAE,EACrB,CAAED,IAAK,IAASC,KAAM,GAAG,EACzB,CAAED,IAAK,IAAYC,KAAM,GAAG,CAAE,EAGhCC,YAAwCZ,EAAgB,CAAhB,KAAAA,SAAAA,CAAmB,CAE3Da,UAAWC,EAAa,CACtB,IAAMC,EAAS,KAAKN,WAAWO,KAAKC,GAAKH,EAAQG,EAAEP,GAAG,GAAK,KAAKD,WAAW,KAAKA,WAAWF,OAAS,CAAC,EAC/FW,EAAOJ,GAASC,EAAOL,IAAM,KAC7BS,EAAeC,KAAKC,MAAMH,CAAI,EAC9BI,EAAcvB,EAAoBE,oBAAoBiB,CAAI,EAEhE,OAAOC,EAAe,IAAMG,EAAc,EACtCC,EAAaC,WAAW,GAAGL,CAAY,IAAIG,CAAW,EAAE,EAAG,KAAKtB,QAAQ,EAAIe,EAAOJ,KACnF,GAAGQ,CAAY,GAAGJ,EAAOJ,IAAI,EACnC,KA9BWZ,wCAAAA,GAAmB0B,EAmBTC,EAAS,EAAA,CAAA,CAAA,KAnBnB3B,gDAAAA,EAAmB4B,KAAA,EAAA,CAAA,GAA1B,IAAO5B,EAAP6B,SAAO7B,CAAmB,GAAA",
  "names": ["NumberFormatterPipe", "localeId", "getDecimalForNumber", "x", "n", "f", "toString", "split", "length", "substring", "dictionary", "max", "type", "constructor", "transform", "value", "format", "find", "d", "calc", "integralPart", "Math", "floor", "decimalPart", "formatNumber", "parseFloat", "\u0275\u0275directiveInject", "LOCALE_ID", "pure", "_NumberFormatterPipe"]
}
