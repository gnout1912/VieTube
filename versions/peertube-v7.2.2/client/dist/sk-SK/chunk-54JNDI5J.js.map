{
  "version": 3,
  "sources": ["src/app/shared/shared-forms/dynamic-form-field.component.ts", "src/app/shared/shared-forms/dynamic-form-field.component.html"],
  "sourcesContent": ["import { Component, input } from '@angular/core'\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { RegisterClientFormFieldOptions } from '@peertube/peertube-models'\nimport { MarkdownTextareaComponent } from './markdown-textarea.component'\nimport { HelpComponent } from '../shared-main/buttons/help.component'\nimport { InputTextComponent } from './input-text.component'\nimport { PeertubeCheckboxComponent } from './peertube-checkbox.component'\nimport { NgIf, NgFor } from '@angular/common'\n\n@Component({\n  selector: 'my-dynamic-form-field',\n  templateUrl: './dynamic-form-field.component.html',\n  styleUrls: [ './dynamic-form-field.component.scss' ],\n  imports: [\n    NgIf,\n    FormsModule,\n    ReactiveFormsModule,\n    PeertubeCheckboxComponent,\n    NgFor,\n    InputTextComponent,\n    HelpComponent,\n    MarkdownTextareaComponent\n  ]\n})\nexport class DynamicFormFieldComponent {\n  readonly form = input<FormGroup>(undefined)\n  readonly formErrors = input<any>(undefined)\n  readonly setting = input<RegisterClientFormFieldOptions>(undefined)\n\n  hasDedicatedFormError () {\n    const dedicated = new Set<RegisterClientFormFieldOptions['type']>([\n      'input-checkbox',\n      'input',\n      'select',\n      'input-textarea'\n    ])\n\n    return dedicated.has(this.setting().type)\n  }\n}\n", "<div *ngIf=\"form()\" [formGroup]=\"form()\" class=\"form-group\">\n  <label *ngIf=\"setting().label && setting().type !== 'input-checkbox'\" [attr.for]=\"setting().name\" [innerHTML]=\"setting().label\"></label>\n\n  <my-peertube-checkbox\n    *ngIf=\"setting().type === 'input-checkbox'\"\n    [inputName]=\"setting().name\"\n    [formControlName]=\"setting().name\"\n    [labelInnerHTML]=\"setting().label\"\n  ></my-peertube-checkbox>\n\n  <div *ngIf=\"setting().descriptionHTML\" class=\"form-group-description\" [innerHTML]=\"setting().descriptionHTML\"></div>\n\n  @switch (setting().type) {\n    @case ('input') {\n      <input type=\"text\" [id]=\"setting().name\" [formControlName]=\"setting().name\" />\n    }\n\n    @case ('select') {\n      <div class=\"peertube-select-container\">\n        <select  [id]=\"setting().name\" [formControlName]=\"setting().name\" class=\"form-control\">\n          <option *ngFor=\"let option of setting().options\" [value]=\"option.value\">{{ option.label }}</option>\n        </select>\n      </div>\n    }\n\n    @case ('input-password') {\n      <my-input-text [formError]=\"formErrors()['settings.name']\" [formControlName]=\"setting().name\" [inputId]=\"setting().name\"></my-input-text>\n    }\n\n    @case ('input-textarea') {\n      <textarea type=\"text\" [id]=\"setting().name\" [formControlName]=\"setting().name\"></textarea>\n\n    }\n\n    @case ('markdown-text') {\n      <my-help helpType=\"markdownText\"></my-help>\n\n      <my-markdown-textarea\n        markdownType=\"text\" [inputId]=\"setting().name\" [formControlName]=\"setting().name\"\n        [formError]=\"formErrors()['settings.name']\"\n      ></my-markdown-textarea>\n    }\n\n    @case ('markdown-enhanced') {\n      <my-help helpType=\"markdownEnhanced\"></my-help>\n\n      <my-markdown-textarea\n        markdownType=\"enhanced\" [inputId]=\"setting().name\" [formControlName]=\"setting().name\"\n        [formError]=\"formErrors()['settings.name']\"\n      ></my-markdown-textarea>\n\n    }\n\n    @case ('html') {\n      <div [innerHTML]=\"setting().html\"></div>\n    }\n  }\n\n  <div *ngIf=\"hasDedicatedFormError() && formErrors()[setting().name]\" class=\"form-error\" role=\"alert\">\n    {{ formErrors()[setting().name] }}\n  </div>\n\n</div>\n"],
  "mappings": "gfCCEA,EAAA,EAAA,QAAA,CAAA,kBAAkGC,EAAA,YAAAC,EAAAC,QAAA,EAAAC,MAAAC,CAAA,qDAElGL,EAAA,EAAA,uBAAA,EAAA,kBAEEC,EAAA,YAAAC,EAAAC,QAAA,EAAAG,IAAA,EAA4B,kBAAAJ,EAAAC,QAAA,EAAAG,IAAA,EACM,iBAAAJ,EAAAC,QAAA,EAAAC,KAAA,2BAIpCJ,EAAA,EAAA,MAAA,EAAA,kBAAsEC,EAAA,YAAAC,EAAAC,QAAA,EAAAI,gBAAAF,CAAA,2BAIlEL,EAAA,EAAA,QAAA,CAAA,kBAAmBC,EAAA,KAAAC,EAAAC,QAAA,EAAAG,IAAA,EAAqB,kBAAAJ,EAAAC,QAAA,EAAAG,IAAA,4BAMpCE,EAAA,EAAA,SAAA,EAAA,EAAwEC,EAAA,CAAA,EAAkBC,EAAA,0BAAzCT,EAAA,QAAAU,EAAAC,KAAA,EAAuBC,EAAA,EAAAC,EAAAH,EAAAP,KAAA,4BAF5EI,EAAA,EAAA,MAAA,CAAA,EAAuC,EAAA,SAAA,EAAA,EAEnCO,EAAA,EAAAC,EAAA,EAAA,EAAA,SAAA,EAAA,EACFN,EAAA,EAAS,mBAFAG,EAAA,EAAAZ,EAAA,KAAAC,EAAAC,QAAA,EAAAG,IAAA,EAAqB,kBAAAJ,EAAAC,QAAA,EAAAG,IAAA,EACDO,EAAA,EAAAZ,EAAA,UAAAC,EAAAC,QAAA,EAAAc,OAAA,2BAM/BjB,EAAA,EAAA,gBAAA,CAAA,kBAAeC,EAAA,YAAAC,EAAAgB,WAAA,EAAA,eAAA,CAAA,EAA2C,kBAAAhB,EAAAC,QAAA,EAAAG,IAAA,EAAmC,UAAAJ,EAAAC,QAAA,EAAAG,IAAA,2BAI7FN,EAAA,EAAA,WAAA,CAAA,kBAAsBC,EAAA,KAAAC,EAAAC,QAAA,EAAAG,IAAA,EAAqB,kBAAAJ,EAAAC,QAAA,EAAAG,IAAA,2BAK3CN,EAAA,EAAA,UAAA,EAAA,EAA2C,EAAA,uBAAA,EAAA,kBAGrBa,EAAA,EAAAZ,EAAA,UAAAC,EAAAC,QAAA,EAAAG,IAAA,EAA0B,kBAAAJ,EAAAC,QAAA,EAAAG,IAAA,EAAmC,YAAAJ,EAAAgB,WAAA,EAAA,eAAA,CAAA,2BAMnFlB,EAAA,EAAA,UAAA,EAAA,EAA+C,EAAA,uBAAA,EAAA,kBAGrBa,EAAA,EAAAZ,EAAA,UAAAC,EAAAC,QAAA,EAAAG,IAAA,EAA0B,kBAAAJ,EAAAC,QAAA,EAAAG,IAAA,EAAmC,YAAAJ,EAAAgB,WAAA,EAAA,eAAA,CAAA,2BAOvFlB,EAAA,EAAA,MAAA,CAAA,kBAAKC,EAAA,YAAAC,EAAAC,QAAA,EAAAgB,KAAAd,CAAA,4BAITG,EAAA,EAAA,MAAA,EAAA,EACEC,EAAA,CAAA,EACFC,EAAA,mBADEG,EAAA,EAAAO,EAAA,IAAAlB,EAAAgB,WAAA,EAAAhB,EAAAC,QAAA,EAAAG,IAAA,EAAA,GAAA,4BA3DJE,EAAA,EAAA,MAAA,CAAA,EACEO,EAAA,EAAAM,EAAA,EAAA,EAAA,QAAA,CAAA,EAAgI,EAAAC,EAAA,EAAA,EAAA,uBAAA,CAAA,EAO/H,EAAAC,EAAA,EAAA,EAAA,MAAA,CAAA,EAE6G,EAAAC,EAAA,EAAA,EAAA,QAAA,CAAA,EAG3F,EAAAC,EAAA,EAAA,EAAA,MAAA,CAAA,EAIC,EAAAC,EAAA,EAAA,EAAA,gBAAA,CAAA,EAQQ,EAAAC,EAAA,EAAA,EAAA,WAAA,CAAA,EAIA,EAAAC,EAAA,EAAA,CAAA,EAKD,EAAAC,EAAA,EAAA,CAAA,EASI,GAAAC,EAAA,EAAA,EAAA,MAAA,CAAA,EAUb,GAAAC,EAAA,EAAA,EAAA,MAAA,CAAA,EASpBrB,EAAA,oBA9DoBT,EAAA,YAAAC,EAAA8B,KAAA,CAAA,EACVnB,EAAA,EAAAZ,EAAA,OAAAC,EAAAC,QAAA,EAAAC,OAAAF,EAAAC,QAAA,EAAA8B,OAAA,gBAAA,EAGLpB,EAAA,EAAAZ,EAAA,OAAAC,EAAAC,QAAA,EAAA8B,OAAA,gBAAA,EAMGpB,EAAA,EAAAZ,EAAA,OAAAC,EAAAC,QAAA,EAAAI,eAAA,EAENM,EAAA,EAAAqB,GAAAC,EAAAjC,EAAAC,QAAA,EAAA8B,QAAA,QAAO,EAAAE,IAAP,SAAQ,EAAAA,IAAR,iBAAgB,EAAAA,IAAhB,iBAAgB,EAAAA,IAAhB,gBAAe,EAAAA,IAAf,oBAAmB,EAAAA,IAAnB,OAAM,GAAA,EAAA,EA8CAtB,EAAA,CAAA,EAAAZ,EAAA,OAAAC,EAAAkC,sBAAA,GAAAlC,EAAAgB,WAAA,EAAAhB,EAAAC,QAAA,EAAAG,IAAA,CAAA,GDlCR,IAAa+B,IAAyB,IAAA,CAAhC,IAAOA,EAAP,MAAOA,CAAyB,CAC3BL,KAAOM,EAAiBC,MAAS,EACjCrB,WAAaoB,EAAWC,MAAS,EACjCpC,QAAUmC,EAAsCC,MAAS,EAElEH,uBAAqB,CAQnB,OAPkB,IAAII,IAA4C,CAChE,iBACA,QACA,SACA,gBAAgB,CACjB,EAEgBC,IAAI,KAAKtC,QAAO,EAAG8B,IAAI,CAC1C,KAdWI,wCAAAA,EAAyB,KAAzBA,sBAAAA,EAAyBK,UAAA,CAAA,CAAA,uBAAA,CAAA,EAAAC,OAAA,CAAAX,KAAA,CAAA,EAAA,MAAA,EAAAd,WAAA,CAAA,EAAA,YAAA,EAAAf,QAAA,CAAA,EAAA,SAAA,CAAA,EAAAyC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,QAAA,aAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,EAAA,aAAA,EAAA,WAAA,EAAA,CAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,EAAA,YAAA,kBAAA,iBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,yBAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,OAAA,OAAA,EAAA,KAAA,iBAAA,EAAA,CAAA,EAAA,2BAAA,EAAA,CAAA,EAAA,YAAA,kBAAA,SAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,QAAA,aAAA,OAAA,QAAA,EAAA,MAAA,EAAA,CAAA,EAAA,YAAA,kBAAA,gBAAA,EAAA,CAAA,EAAA,yBAAA,EAAA,WAAA,EAAA,CAAA,EAAA,eAAA,EAAA,KAAA,iBAAA,EAAA,CAAA,EAAA,QAAA,EAAA,QAAA,SAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,WAAA,cAAA,EAAA,CAAA,eAAA,OAAA,EAAA,UAAA,kBAAA,WAAA,EAAA,CAAA,WAAA,kBAAA,EAAA,CAAA,eAAA,WAAA,EAAA,UAAA,kBAAA,WAAA,EAAA,CAAA,OAAA,QAAA,EAAA,YAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GCxBtCjC,EAAA,EAAAmC,EAAA,GAAA,EAAA,MAAA,CAAA,OAAMjD,EAAA,OAAAgD,EAAAjB,KAAA,CAAA,iBDcFmB,EACAC,EAAWC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACXC,EAAmBC,EAAAC,EACnBC,EACAC,EACAC,EACAC,EACAC,CAAyB,EAAAC,OAAA,CAAA;sEAAA,CAAA,CAAA,GAGvB,IAAO9B,EAAP+B,SAAO/B,CAAyB,GAAA",
  "names": ["\u0275\u0275element", "\u0275\u0275property", "ctx_r0", "setting", "label", "\u0275\u0275sanitizeHtml", "name", "descriptionHTML", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "option_r2", "value", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "\u0275\u0275template", "DynamicFormFieldComponent_div_0_Case_5_option_2_Template", "options", "formErrors", "html", "\u0275\u0275textInterpolate1", "DynamicFormFieldComponent_div_0_label_1_Template", "DynamicFormFieldComponent_div_0_my_peertube_checkbox_2_Template", "DynamicFormFieldComponent_div_0_div_3_Template", "DynamicFormFieldComponent_div_0_Case_4_Template", "DynamicFormFieldComponent_div_0_Case_5_Template", "DynamicFormFieldComponent_div_0_Case_6_Template", "DynamicFormFieldComponent_div_0_Case_7_Template", "DynamicFormFieldComponent_div_0_Case_8_Template", "DynamicFormFieldComponent_div_0_Case_9_Template", "DynamicFormFieldComponent_div_0_Case_10_Template", "DynamicFormFieldComponent_div_0_div_11_Template", "form", "type", "\u0275\u0275conditional", "tmp_5_0", "hasDedicatedFormError", "DynamicFormFieldComponent", "input", "undefined", "Set", "has", "selectors", "inputs", "decls", "vars", "consts", "template", "rf", "ctx", "DynamicFormFieldComponent_div_0_Template", "NgIf", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "PeertubeCheckboxComponent", "NgFor", "InputTextComponent", "HelpComponent", "MarkdownTextareaComponent", "styles", "_DynamicFormFieldComponent"]
}
