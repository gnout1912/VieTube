{"version":3,"mappings":"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","names":["import_debug","I","P","debugLogger","debug","FindInBulkService","searchService","inject","SearchService","advancedSearchForBulk","getVideoInBulk","getChannelInBulk","getPlaylistInBulk","constructor","buildBulkObservableObject","getVideosInBulk","bind","getChannelsInBulk","getPlaylistsInBulk","AdvancedSearch","searchTarget","getVideo","uuid","getData","observableObject","finder","v","shortUUID","param","getChannel","handle","c","nameWithHost","nameWithHostForced","getPlaylist","p","options","Observable","obs","result","pipe","filter","params","includes","first","map","response","data","find","subscribe","next","error","Error","complete","err","notifier","uuids","join","searchVideos","componentPagination","itemsPerPage","length","currentPage","skipCount","advancedSearch","handles","searchVideoChannels","searchVideoPlaylists","bulkGet","Subject","buildBulkObservable","time","notifierObservable","asObservable","factory","Éµfac","_FindInBulkService","w","a"],"ignoreList":[],"sources":["src/app/shared/shared-search/find-in-bulk.service.ts"],"sourcesContent":["import debug from 'debug'\nimport { Observable, Subject } from 'rxjs'\nimport { filter, first, map } from 'rxjs/operators'\nimport { Injectable, inject } from '@angular/core'\nimport { buildBulkObservable } from '@app/helpers'\nimport { AdvancedSearch } from './advanced-search.model'\nimport { SearchService } from './search.service'\nimport { VideoChannel } from '../shared-main/channel/video-channel.model'\nimport { Video } from '../shared-main/video/video.model'\nimport { VideoPlaylist } from '../shared-video-playlist/video-playlist.model'\n\nconst debugLogger = debug('peertube:search:FindInBulkService')\n\ntype BulkObservables<P extends number | string, R> = {\n  notifier: Subject<P>\n  result: Observable<{ params: P[], response: R }>\n}\n\n@Injectable()\nexport class FindInBulkService {\n  private searchService = inject(SearchService)\n\n  private advancedSearchForBulk: AdvancedSearch\n\n  private getVideoInBulk: BulkObservables<string, { data: Video[] }>\n  private getChannelInBulk: BulkObservables<string, { data: VideoChannel[] }>\n  private getPlaylistInBulk: BulkObservables<string, { data: VideoPlaylist[] }>\n\n  constructor () {\n    this.getVideoInBulk = this.buildBulkObservableObject(this.getVideosInBulk.bind(this))\n    this.getChannelInBulk = this.buildBulkObservableObject(this.getChannelsInBulk.bind(this))\n    this.getPlaylistInBulk = this.buildBulkObservableObject(this.getPlaylistsInBulk.bind(this))\n\n    this.advancedSearchForBulk = new AdvancedSearch({ searchTarget: 'local' })\n  }\n\n  getVideo (uuid: string): Observable<Video> {\n    debugLogger('Schedule video fetch for uuid %s.', uuid)\n\n    return this.getData({\n      observableObject: this.getVideoInBulk,\n      finder: v => v.uuid === uuid || v.shortUUID === uuid,\n      param: uuid\n    })\n  }\n\n  getChannel (handle: string): Observable<VideoChannel> {\n    debugLogger('Schedule channel fetch for handle %s.', handle)\n\n    return this.getData({\n      observableObject: this.getChannelInBulk,\n      finder: c => c.nameWithHost === handle || c.nameWithHostForced === handle,\n      param: handle\n    })\n  }\n\n  getPlaylist (uuid: string): Observable<VideoPlaylist> {\n    debugLogger('Schedule playlist fetch for uuid %s.', uuid)\n\n    return this.getData({\n      observableObject: this.getPlaylistInBulk,\n      finder: p => p.uuid === uuid || p.shortUUID === uuid,\n      param: uuid\n    })\n  }\n\n  private getData<P extends number | string, R> (options: {\n    observableObject: BulkObservables<P, { data: R[] }>\n    param: P\n    finder: (d: R) => boolean\n  }) {\n    const { observableObject, param, finder } = options\n\n    return new Observable<R>(obs => {\n      observableObject.result\n        .pipe(\n          filter(result => result.params.includes(param)),\n          first(),\n          map(result => result.response.data),\n          map(data => data.find(finder))\n        )\n        .subscribe({\n          next: result => {\n            if (!result) {\n              obs.error(new Error($localize`Element ${param} not found`))\n              return\n            }\n\n            obs.next(result)\n            obs.complete()\n          },\n\n          error: err => obs.error(err)\n        })\n\n      observableObject.notifier.next(param)\n    })\n  }\n\n  private getVideosInBulk (uuids: string[]) {\n    debugLogger('Fetching videos %s.', uuids.join(', '))\n\n    return this.searchService.searchVideos({\n      uuids,\n      componentPagination: { itemsPerPage: uuids.length, currentPage: 1 },\n      skipCount: true,\n      advancedSearch: this.advancedSearchForBulk\n    })\n  }\n\n  private getChannelsInBulk (handles: string[]) {\n    debugLogger('Fetching channels %s.', handles.join(', '))\n\n    return this.searchService.searchVideoChannels({\n      handles,\n      componentPagination: { itemsPerPage: handles.length, currentPage: 1 },\n      advancedSearch: this.advancedSearchForBulk\n    })\n  }\n\n  private getPlaylistsInBulk (uuids: string[]) {\n    debugLogger('Fetching playlists %s.', uuids.join(', '))\n\n    return this.searchService.searchVideoPlaylists({\n      uuids,\n      componentPagination: { itemsPerPage: uuids.length, currentPage: 1 },\n      advancedSearch: this.advancedSearchForBulk\n    })\n  }\n\n  private buildBulkObservableObject<P extends number | string, R> (bulkGet: (params: P[]) => Observable<R>) {\n    const notifier = new Subject<P>()\n\n    return {\n      notifier,\n\n      result: buildBulkObservable({\n        time: 100,\n        bulkGet,\n        notifierObservable: notifier.asObservable()\n      })\n    }\n  }\n}\n"]}