{
  "version": 3,
  "sources": ["src/app/shared/shared-video-live/live-video.service.ts"],
  "sourcesContent": ["import { catchError } from 'rxjs/operators'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor } from '@app/core'\nimport { LiveVideo, LiveVideoCreate, LiveVideoSession, LiveVideoUpdate, ResultList, VideoCreateResult } from '@peertube/peertube-models'\nimport { environment } from '../../../environments/environment'\nimport { VideoService } from '../shared-main/video/video.service'\n\n@Injectable()\nexport class LiveVideoService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n\n  static BASE_VIDEO_LIVE_URL = environment.apiUrl + '/api/v1/videos/live/'\n\n  goLive (video: LiveVideoCreate) {\n    return this.authHttp\n      .post<{ video: VideoCreateResult }>(LiveVideoService.BASE_VIDEO_LIVE_URL, video)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  getVideoLive (videoId: number | string) {\n    return this.authHttp\n      .get<LiveVideo>(LiveVideoService.BASE_VIDEO_LIVE_URL + videoId)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  listSessions (videoId: number | string) {\n    return this.authHttp\n      .get<ResultList<LiveVideoSession>>(LiveVideoService.BASE_VIDEO_LIVE_URL + videoId + '/sessions')\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  findLiveSessionFromVOD (videoId: number | string) {\n    return this.authHttp\n      .get<LiveVideoSession>(VideoService.BASE_VIDEO_URL + '/' + videoId + '/live-session')\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  updateLive (videoId: number | string, liveUpdate: LiveVideoUpdate) {\n    return this.authHttp\n      .put(LiveVideoService.BASE_VIDEO_LIVE_URL + videoId, liveUpdate)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n}\n"],
  "mappings": "+JASM,IAAOA,EAAP,MAAOA,CAAgB,CACnBC,SAAWC,EAAOC,CAAU,EAC5BC,cAAgBF,EAAOG,CAAa,EAI5CC,OAAQC,EAAsB,CAC5B,OAAO,KAAKN,SACTO,KAAmCR,EAAiBS,oBAAqBF,CAAK,EAC9EG,KAAKC,EAAWC,GAAO,KAAKR,cAAcS,YAAYD,CAAG,CAAC,CAAC,CAChE,CAEAE,aAAcC,EAAwB,CACpC,OAAO,KAAKd,SACTe,IAAehB,EAAiBS,oBAAsBM,CAAO,EAC7DL,KAAKC,EAAWC,GAAO,KAAKR,cAAcS,YAAYD,CAAG,CAAC,CAAC,CAChE,CAEAK,aAAcF,EAAwB,CACpC,OAAO,KAAKd,SACTe,IAAkChB,EAAiBS,oBAAsBM,EAAU,WAAW,EAC9FL,KAAKC,EAAWC,GAAO,KAAKR,cAAcS,YAAYD,CAAG,CAAC,CAAC,CAChE,CAEAM,uBAAwBH,EAAwB,CAC9C,OAAO,KAAKd,SACTe,IAAsBG,EAAaC,eAAiB,IAAML,EAAU,eAAe,EACnFL,KAAKC,EAAWC,GAAO,KAAKR,cAAcS,YAAYD,CAAG,CAAC,CAAC,CAChE,CAEAS,WAAYN,EAA0BO,EAA2B,CAC/D,OAAO,KAAKrB,SACTsB,IAAIvB,EAAiBS,oBAAsBM,EAASO,CAAU,EAC9DZ,KAAKC,EAAWC,GAAO,KAAKR,cAAcS,YAAYD,CAAG,CAAC,CAAC,CAChE,GA9BAY,EAJWxB,EAIJS,sBAAsBgB,EAAYC,OAAS,0BAJvC1B,wCAAAA,EAAgB,KAAhBA,wBAAAA,EAAgB2B,QAAhB3B,EAAgB4B,SAAA,CAAA,GAAvB,IAAO5B,EAAP6B",
  "names": ["LiveVideoService", "authHttp", "inject", "HttpClient", "restExtractor", "RestExtractor", "goLive", "video", "post", "BASE_VIDEO_LIVE_URL", "pipe", "catchError", "err", "handleError", "getVideoLive", "videoId", "get", "listSessions", "findLiveSessionFromVOD", "VideoService", "BASE_VIDEO_URL", "updateLive", "liveUpdate", "put", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "_LiveVideoService"]
}
