{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵtext","ɵɵelementEnd","e","o","S","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","formErrors","me","n","h","ɵɵlistener","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","askSendVerifyEmail","ɵɵi18n","ɵɵelement","ɵɵtemplate","VerifyNewAccountAskSendEmailComponent_Conditional_3_div_5_Template","ɵɵproperty","form","ɵɵpureFunction1","_c0","valid","ue","ɵɵi18nExp","instanceName","Y","VerifyNewAccountAskSendEmailComponent","FormReactive","formReactiveService","inject","FormReactiveService","userService","UserService","signupService","SignupService","serverService","ServerService","notifier","Notifier","redirectService","RedirectService","requiresEmailVerification","getHTMLConfig","instance","name","ngOnInit","getConfig","subscribe","config","signup","buildForm","USER_EMAIL_VALIDATOR","email","value","forkJoin","next","success","redirectToHomepage","error","err","message","u","__ngFactoryType__","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","i18n_0","$localize","i","C","E","t","a","template","VerifyNewAccountAskSendEmailComponent_Conditional_3_Template","VerifyNewAccountAskSendEmailComponent_Conditional_4_Template","ɵɵconditional","ctx","dependencies","NgIf","FormsModule","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","ReactiveFormsModule","FormGroupDirective","FormControlName","NgClass","styles","_VerifyNewAccountAskSendEmailComponent","de","Se","ɵɵi18nStart","ɵɵi18nEnd","SignupSuccessAfterEmailComponent","requiresApproval","input","undefined","inputs","SignupSuccessAfterEmailComponent_Conditional_4_Template","SignupSuccessAfterEmailComponent_Conditional_5_Template","SignupStepTitleComponent","AlertComponent","_SignupSuccessAfterEmailComponent","Ce","ctx_r0","fe","pe","VerifyAccountEmailComponent_div_0_Conditional_3_Conditional_0_Template","VerifyAccountEmailComponent_div_0_Conditional_3_Conditional_1_Template","isRegistration","isRegistrationRequest","Ae","Ne","VerifyAccountEmailComponent_div_0_Conditional_3_Template","VerifyAccountEmailComponent_div_0_Conditional_4_Template","failed","VerifyAccountEmailComponent","server","authService","AuthService","route","ActivatedRoute","isPendingEmail","loaded","userId","registrationId","verificationString","queryParams","snapshot","verifyEmail","verifyRegistrationEmail","verifyUserEmail","options","isLoggedIn","refreshUserInformation","VerifyAccountEmailComponent_div_0_Template","RouterLink","encapsulation","_VerifyAccountEmailComponent","routes_default","path","providers","children","component","data","meta","title","Qe","default"],"ignoreList":[],"sources":["src/app/+signup/+verify-account/verify-new-account-ask-send-email/verify-new-account-ask-send-email.component.html","src/app/+signup/+verify-account/verify-new-account-ask-send-email/verify-new-account-ask-send-email.component.ts","src/app/+signup/shared/signup-success-after-email.component.html","src/app/+signup/shared/signup-success-after-email.component.ts","src/app/+signup/+verify-account/verify-account-email/verify-account-email.component.html","src/app/+signup/+verify-account/verify-account-email/verify-account-email.component.ts","src/app/+signup/+verify-account/routes.ts"],"sourcesContent":["<div class=\"margin-content\">\n  <h1 i18n class=\"title-page\">Request email for account verification</h1>\n\n  @if (requiresEmailVerification) {\n    <form (ngSubmit)=\"askSendVerifyEmail()\" [formGroup]=\"form\">\n      <div class=\"form-group\">\n        <label i18n for=\"verify-email-email\">Email</label>\n\n        <input\n          type=\"email\" id=\"verify-email-email\" i18n-placeholder placeholder=\"Email address\" required\n          formControlName=\"verify-email-email\" class=\"form-control\" [ngClass]=\"{ 'input-error': formErrors['verify-email-email'] }\"\n        >\n\n        <div *ngIf=\"formErrors['verify-email-email']\" class=\"form-error\" role=\"alert\">{{ formErrors['verify-email-email'] }}</div>\n      </div>\n\n      <input class=\"peertube-button primary-button\" type=\"submit\" i18n-value value=\"Send verification email\" [disabled]=\"!form.valid\">\n    </form>\n  } @else {\n    <div i18n>{{ instanceName }} does not require email verification.</div>\n  }\n</div>\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, OnInit, inject } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { SignupService } from '@app/+signup/shared/signup.service'\nimport { Notifier, RedirectService, ServerService, UserService } from '@app/core'\nimport { USER_EMAIL_VALIDATOR } from '@app/shared/form-validators/user-validators'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { forkJoin } from 'rxjs'\n\n@Component({\n  selector: 'my-verify-new-account-ask-send-email',\n  templateUrl: './verify-new-account-ask-send-email.component.html',\n  styleUrls: [ './verify-new-account-ask-send-email.component.scss' ],\n  imports: [ NgIf, FormsModule, ReactiveFormsModule, NgClass ]\n})\nexport class VerifyNewAccountAskSendEmailComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private userService = inject(UserService)\n  private signupService = inject(SignupService)\n  private serverService = inject(ServerService)\n  private notifier = inject(Notifier)\n  private redirectService = inject(RedirectService)\n\n  requiresEmailVerification = false\n\n  get instanceName () {\n    return this.serverService.getHTMLConfig().instance.name\n  }\n\n  ngOnInit () {\n    this.serverService.getConfig()\n      .subscribe(config => {\n        this.requiresEmailVerification = config.signup.requiresEmailVerification\n      })\n\n    this.buildForm({\n      'verify-email-email': USER_EMAIL_VALIDATOR\n    })\n  }\n\n  askSendVerifyEmail () {\n    const email = this.form.value['verify-email-email']\n\n    forkJoin([\n      this.userService.askSendVerifyEmail(email),\n      this.signupService.askSendVerifyEmail(email)\n    ]).subscribe({\n      next: () => {\n        this.notifier.success($localize`An email with verification link will be sent to ${email}.`)\n        this.redirectService.redirectToHomepage()\n      },\n\n      error: err => this.notifier.error(err.message)\n    })\n  }\n}\n","<my-signup-step-title mascotImageName=\"success\">\n  <strong i18n>Email verified!</strong>\n</my-signup-step-title>\n\n<my-alert type=\"primary\">\n  @if (requiresApproval()) {\n    <p i18n>Your email has been verified and your account request has been sent!</p>\n\n    <p i18n>\n      A moderator will check your registration request soon and you'll receive an email when it is accepted or rejected.\n    </p>\n  } @else {\n    <p i18n>Your email has been verified and your account has been created!</p>\n\n    <p i18n>\n      If you need help using PeerTube, you can have a look at the <a class=\"link-primary\" href=\"https://docs.joinpeertube.org/use/setup-account\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>.\n    </p>\n  }\n</my-alert>\n","import { Component, input } from '@angular/core'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { SignupStepTitleComponent } from './signup-step-title.component'\n\n@Component({\n  selector: 'my-signup-success-after-email',\n  templateUrl: './signup-success-after-email.component.html',\n  styleUrls: [ './signup-success.component.scss' ],\n  imports: [ SignupStepTitleComponent, AlertComponent ]\n})\nexport class SignupSuccessAfterEmailComponent {\n  readonly requiresApproval = input<boolean>(undefined)\n}\n","<div *ngIf=\"loaded\" class=\"margin-content\">\n  <h1 i18n class=\"title-page\">Verify email</h1>\n\n  @if (success) {\n    @if (this.isRegistration() || this.isRegistrationRequest()) {\n      <my-signup-success-after-email [requiresApproval]=\"requiresApproval\"></my-signup-success-after-email>\n    } @else {\n      <my-alert type=\"success\" i18n>Email updated.</my-alert>\n    }\n\n  } @else if (failed) {\n    <my-alert type=\"danger\">\n      <span i18n>An error occurred.</span>\n\n      <a i18n class=\"ms-1 link-primary\" routerLink=\"/verify-account/ask-send-email\">\n        Request a new verification email\n      </a>\n    </my-alert>\n  }\n</div>\n","import { NgIf } from '@angular/common'\nimport { Component, OnInit, inject } from '@angular/core'\nimport { ActivatedRoute, RouterLink } from '@angular/router'\nimport { SignupService } from '@app/+signup/shared/signup.service'\nimport { AuthService, Notifier, ServerService, UserService } from '@app/core'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { SignupSuccessAfterEmailComponent } from '../../shared/signup-success-after-email.component'\n\n@Component({\n  selector: 'my-verify-account-email',\n  templateUrl: './verify-account-email.component.html',\n  imports: [ NgIf, SignupSuccessAfterEmailComponent, RouterLink, AlertComponent ]\n})\nexport class VerifyAccountEmailComponent implements OnInit {\n  private signupService = inject(SignupService)\n  private userService = inject(UserService)\n  private server = inject(ServerService)\n  private authService = inject(AuthService)\n  private notifier = inject(Notifier)\n  private route = inject(ActivatedRoute)\n\n  success = false\n  failed = false\n  isPendingEmail = false\n\n  requiresApproval: boolean\n  loaded = false\n\n  private userId: number\n  private registrationId: number\n  private verificationString: string\n\n  get instanceName () {\n    return this.server.getHTMLConfig().instance.name\n  }\n\n  ngOnInit () {\n    const queryParams = this.route.snapshot.queryParams\n\n    this.server.getConfig().subscribe(config => {\n      this.requiresApproval = config.signup.requiresApproval\n\n      this.loaded = true\n    })\n\n    this.userId = queryParams['userId']\n    this.registrationId = queryParams['registrationId']\n    this.verificationString = queryParams['verificationString']\n    this.isPendingEmail = queryParams['isPendingEmail'] === 'true'\n\n    if (!this.verificationString) {\n      this.notifier.error($localize`Unable to find verification string in URL query.`)\n      return\n    }\n\n    if (!this.userId && !this.registrationId) {\n      this.notifier.error($localize`Unable to find user id or registration id in URL query.`)\n      return\n    }\n\n    this.verifyEmail()\n  }\n\n  isRegistration () {\n    return !this.isPendingEmail\n  }\n\n  isRegistrationRequest () {\n    return !!this.registrationId\n  }\n\n  verifyEmail () {\n    if (this.isRegistrationRequest()) {\n      return this.verifyRegistrationEmail()\n    }\n\n    return this.verifyUserEmail()\n  }\n\n  private verifyUserEmail () {\n    const options = {\n      userId: this.userId,\n      verificationString: this.verificationString,\n      isPendingEmail: this.isPendingEmail\n    }\n\n    this.userService.verifyUserEmail(options)\n      .subscribe({\n        next: () => {\n          if (this.authService.isLoggedIn()) {\n            this.authService.refreshUserInformation()\n          }\n\n          this.success = true\n        },\n\n        error: err => {\n          this.failed = true\n\n          this.notifier.error(err.message)\n        }\n      })\n  }\n\n  private verifyRegistrationEmail () {\n    const options = {\n      registrationId: this.registrationId,\n      verificationString: this.verificationString\n    }\n\n    this.signupService.verifyRegistrationEmail(options)\n      .subscribe({\n        next: () => {\n          this.success = true\n        },\n\n        error: err => {\n          this.failed = true\n\n          this.notifier.error(err.message)\n        }\n      })\n  }\n}\n","import { Routes } from '@angular/router'\nimport { VerifyNewAccountAskSendEmailComponent } from './verify-new-account-ask-send-email/verify-new-account-ask-send-email.component'\nimport { VerifyAccountEmailComponent } from './verify-account-email/verify-account-email.component'\nimport { SignupService } from '../shared/signup.service'\n\nexport default [\n  {\n    path: '',\n    providers: [ SignupService ],\n    children: [\n      {\n        path: 'email',\n        component: VerifyAccountEmailComponent,\n        data: {\n          meta: {\n            title: $localize`Verify account via email`\n          }\n        }\n      },\n      {\n        path: 'ask-send-email',\n        component: VerifyNewAccountAskSendEmailComponent,\n        data: {\n          meta: {\n            title: $localize`Ask to send an email to verify your account`\n          }\n        }\n      }\n    ]\n  }\n] satisfies Routes\n"]}