{"version":3,"mappings":"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","names":["import_debug","ge","me","yt","Lt","i","r","n","v","ɵɵelementStart","ɵɵlistener","$event","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","setTorrentFile","ɵɵelement","ɵɵi18n","ɵɵelementEnd","fileChange","ɵɵelementContainerStart","U","ɵɵtwoWayListener","i0","ɵɵtwoWayBindingSet","firstStepMagnetUri","firstStepChannelId","importVideo","l","ɵɵadvance","ɵɵproperty","ɵɵtwoWayProperty","userChannels","isMagnetUrlValid","isImportingVideo","Vt","_r3","onVideoUpdated","debugLogger","debug","VideoImportTorrentComponent","loadingBar","inject","LoadingBarService","notifier","Notifier","videoService","VideoService","videoImportService","VideoImportService","hooks","HooksService","serverService","ServerService","manageController","VideoManageController","route","ActivatedRoute","input","required","userQuota","highestPrivacy","firstStepDone","output","firstStepError","torrentfileInput","viewChild","firstStep","ngOnInit","id","ngAfterViewInit","runAction","canDeactivate","text","hasPendingChanges","$localize","success","reset","torrentfile","nativeElement","files","serverConfig","getHTMLConfig","videoEdit","VideoEdit","createFromImport","magnetUri","channelId","support","find","c","setConfig","manageType","setVideoEdit","useRef","start","toVideoImportCreate","pipe","switchMap","video","getVideo","videoId","uuid","subscribe","next","__async","loadFromAPI","complete","silentRedirectOnManage","getVideoAttributes","shortUUID","emit","name","error","err","message","body","code","ServerErrorCode","INCORRECT_FILES_IN_TORRENT","S","selectors","viewQuery","rf","ctx","G","o","e","ie","inputs","outputs","decls","vars","consts","t","ɵɵtemplate","VideoImportTorrentComponent_Conditional_0_Template","VideoImportTorrentComponent_Conditional_1_Template","ɵɵconditional","dependencies","GlobalIconComponent","NgbTooltip","HelpComponent","FormsModule","DefaultValueAccessor","NgControlStatus","NgModel","DragDropDirective","SelectChannelComponent","ReactiveFormsModule","AlertComponent","VideoManageContainerComponent","styles","_VideoImportTorrentComponent","At","ɵɵi18nStart","ɵɵi18nEnd","Nt","targetUrl","VideoImportUrlComponent_Conditional_0_div_11_Template","isChannelSyncEnabled","isTargetUrlValid","Dt","ɵɵi18nExp","Me","VideoImportUrlComponent","chapterService","VideoChapterService","captionService","VideoCaptionService","match","import","videoChannelSynchronization","enabled","previous","forkJoin","listCaptions","getChapters","map","data","captions","chapters","_0","i18n_0","M","p","template","VideoImportUrlComponent_Conditional_0_Template","VideoImportUrlComponent_Conditional_1_Template","NgIf","RouterLink","_VideoImportUrlComponent","Ut","firstStepPermanentLive","ɵɵtext","goLive","ɵɵtextInterpolate","getNormalLiveDescription","getPermanentLiveDescription","Rt","VideoGoLiveComponent","liveVideoService","LiveVideoService","isGoingLive","createFromLive","permanentLive","latencyMode","LiveVideoLatencyMode","DEFAULT","saveReplay","isReplayAllowed","replaySettings","privacy","toLiveCreate","getVideoLive","live","loadAfterPublish","MAX_INSTANCE_LIVES_LIMIT_REACHED","MAX_USER_LIVES_LIMIT_REACHED","allowReplay","VideoGoLiveComponent_Conditional_0_Template","VideoGoLiveComponent_Conditional_1_Template","RadioControlValueAccessor","_VideoGoLiveComponent","wt","Bt","audioPreviewFile","uploadAudio","getAudioUploadLabel","$t","onFileDropped","onFileChange","VideoUploadComponent_Conditional_0_ng_container_12_Template","getVideoExtensions","uploadingAudioFile","Ht","_r4","hasUploadedFile","getCancelLink","VideoUploadComponent","metaService","MetaService","videoUploadService","VideoUploadService","router","Router","canDeactivateGuard","CanDeactivateGuard","videoFileInput","hasFirstUpdated","uploadEventsSubscription","getUploadEventsObs","state","updateTitle","status","silentRedirectOnAbortUpload","response","ngOnDestroy","unsubscribe","cancelUploadIfNeeded","setTitle","getUploadPercents","update","snapshot","meta","join","target","event","resetUploadState","file","checkUserQuota","isAudioFile","uploadFile","undefined","getInputVideoFile","videoFile","previewfile","createFromUpload","buildVideoFilename","uploadNewVideo","silentRedirectOnUploading","filename","nameWithoutExtension","replace","length","videoNameMaxSize","truncate","omission","b","VideoUploadComponent_Conditional_0_Template","VideoUploadComponent_Conditional_1_Template","PreviewUploadComponent","ButtonComponent","_VideoUploadComponent","Ft","Gt","zt","Xt","Qt","Wt","qt","VideoPublishComponent_ng_template_0_Conditional_0_Template","ctx_r0","isContactFormEnabled","Yt","jt","VideoPublishComponent_ng_template_2_Conditional_0_ng_template_3_Template","re","uploadMessages","autoBlock","helpButtons_r2","Kt","Jt","Zt","quotaLeft","en","quotaLeftDaily","tn","nn","VideoPublishComponent_ng_template_2_Conditional_4_div_1_Template","VideoPublishComponent_ng_template_2_Conditional_4_div_2_Template","VideoPublishComponent_ng_template_2_Conditional_4_ng_template_3_Template","hasNoQuotaLeft","hasNoQuotaLeftDaily","on","VideoPublishComponent_ng_template_2_Conditional_0_Template","VideoPublishComponent_ng_template_2_Conditional_1_Template","VideoPublishComponent_ng_template_2_Conditional_2_Template","VideoPublishComponent_ng_template_2_Conditional_4_Template","user","isAutoBlocked","isRootUser","rn","an","VideoPublishComponent_Conditional_4_ng_template_4_Template","noQuota","sn","ln","VideoPublishComponent_Conditional_5_Conditional_1_ng_template_0_Template","infoMessages_r4","_n","_r5","onFirstStepDone","onError","cn","dn","ɵɵtextInterpolate1","instanceName","pn","_r6","gn","un","mn","_r7","Cn","fn","Pn","_r8","Mn","VideoPublishComponent_Conditional_5_Conditional_1_Template","onNavChange","VideoPublishComponent_Conditional_5_ng_template_8_Template","VideoPublishComponent_Conditional_5_Conditional_10_Template","VideoPublishComponent_Conditional_5_Conditional_11_Template","VideoPublishComponent_Conditional_5_ng_template_12_Template","VideoPublishComponent_Conditional_5_Conditional_14_Template","VideoPublishComponent_Conditional_5_Conditional_15_Template","VideoPublishComponent_Conditional_5_ng_template_16_Template","VideoPublishComponent_Conditional_5_Conditional_18_Template","VideoPublishComponent_Conditional_5_Conditional_19_Template","VideoPublishComponent_Conditional_5_ng_template_20_Template","isInSecondStep","activeNav","ɵɵpureFunction1","_c4","isVideoImportHttpEnabled","isVideoImportTorrentEnabled","isVideoLiveEnabled","nav_r9","VideoPublishComponent","auth","AuthService","videoUpload","videoImportUrl","videoImportTorrent","videoGoLive","secondStepType","videoName","privacies","publishedIdQuery","uploadingQuery","email","contactForm","instance","resolverData","videoChannels","getUser","getHighestAvailablePrivacy","fragment","buildUploadMessages","videoQuota","videoQuotaUsed","videoQuotaDaily","videoQuotaUsedDaily","queryParams","params","publishedId","uploading","tryToReset","components","component","setStore","wrapObject","newActiveNav","navigate","type","onUnload","returnValue","videos","http","torrent","username","hostBindings","ɵɵresolveWindow","features","Fe","VideoPublishComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","VideoPublishComponent_ng_template_2_Template","VideoPublishComponent_Conditional_4_Template","VideoPublishComponent_Conditional_5_Template","hasUploadDisabled","NgTemplateOutlet","UserQuotaComponent","ChannelsSetupMessageComponent","NgbNav","NgClass","NgbNavItem","NgbNavLink","NgbNavLinkBase","NgbNavContent","NgbNavOutlet","_VideoPublishComponent","VideoPublishResolver","authService","userService","UserService","resolve","listUserChannelsForSelect","getMyVideoQuotaUsed","getVideoPrivacies","factory","ɵfac","_VideoPublishResolver","routes_default","path","canActivate","LoginGuard","URLSearchParams","window","location","search","get","pathname","suffixUrl","RedirectCommand","parseUrl","providers","VideoStateMessageService","I18nPrimengCalendarService","VideoStudioService","children","manageRoutes","Ti","default"],"ignoreList":[],"sources":["src/app/+videos-publish-manage/+video-publish/import/video-import-torrent.component.ts","src/app/+videos-publish-manage/+video-publish/import/video-import-torrent.component.html","src/app/+videos-publish-manage/+video-publish/import/video-import-url.component.ts","src/app/+videos-publish-manage/+video-publish/import/video-import-url.component.html","src/app/+videos-publish-manage/+video-publish/live/video-go-live.component.ts","src/app/+videos-publish-manage/+video-publish/live/video-go-live.component.html","src/app/+videos-publish-manage/+video-publish/upload/video-upload.component.ts","src/app/+videos-publish-manage/+video-publish/upload/video-upload.component.html","src/app/+videos-publish-manage/+video-publish/video-publish.component.html","src/app/+videos-publish-manage/+video-publish/video-publish.component.ts","src/app/+videos-publish-manage/+video-publish/video-publish.resolver.ts","src/app/+videos-publish-manage/+video-publish/routes.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnInit, inject, input, output, viewChild } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { VideoEdit } from '@app/+videos-publish-manage/shared-manage/common/video-edit.model'\nimport { VideoManageController } from '@app/+videos-publish-manage/shared-manage/video-manage-controller.service'\nimport { CanComponentDeactivate, HooksService, Notifier, ServerService } from '@app/core'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { VideoImportService } from '@app/shared/shared-main/video/video-import.service'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { LoadingBarService } from '@ngx-loading-bar/core'\nimport { PeerTubeProblemDocument, ServerErrorCode, UserVideoQuota, VideoPrivacyType } from '@peertube/peertube-models'\nimport debug from 'debug'\nimport { switchMap } from 'rxjs'\nimport { SelectChannelItem } from 'src/types'\nimport { SelectChannelComponent } from '../../../shared/shared-forms/select/select-channel.component'\nimport { GlobalIconComponent } from '../../../shared/shared-icons/global-icon.component'\nimport { HelpComponent } from '../../../shared/shared-main/buttons/help.component'\nimport { VideoManageContainerComponent } from '../../shared-manage/video-manage-container.component'\nimport { DragDropDirective } from '../shared/drag-drop.directive'\n\nconst debugLogger = debug('peertube:video-publish')\n\n@Component({\n  selector: 'my-video-import-torrent',\n  templateUrl: './video-import-torrent.component.html',\n  styleUrls: [\n    '../shared/common-publish.scss',\n    './video-import-torrent.component.scss'\n  ],\n  imports: [\n    GlobalIconComponent,\n    NgbTooltip,\n    HelpComponent,\n    FormsModule,\n    DragDropDirective,\n    SelectChannelComponent,\n    ReactiveFormsModule,\n    AlertComponent,\n    VideoManageContainerComponent\n  ]\n})\nexport class VideoImportTorrentComponent implements OnInit, AfterViewInit, CanComponentDeactivate {\n  private loadingBar = inject(LoadingBarService)\n  private notifier = inject(Notifier)\n  private videoService = inject(VideoService)\n  private videoImportService = inject(VideoImportService)\n  private hooks = inject(HooksService)\n  private serverService = inject(ServerService)\n  private manageController = inject(VideoManageController)\n  private route = inject(ActivatedRoute)\n\n  readonly userChannels = input.required<SelectChannelItem[]>()\n  readonly userQuota = input.required<UserVideoQuota>()\n  readonly highestPrivacy = input.required<VideoPrivacyType>()\n\n  readonly firstStepDone = output<string>()\n  readonly firstStepError = output()\n\n  readonly torrentfileInput = viewChild<ElementRef<HTMLInputElement>>('torrentfileInput')\n\n  firstStep = true\n  firstStepChannelId: number\n  firstStepMagnetUri = ''\n\n  isImportingVideo = false\n\n  ngOnInit (): void {\n    this.firstStepChannelId = this.userChannels()[0].id\n  }\n\n  ngAfterViewInit () {\n    this.hooks.runAction('action:video-torrent-import.init', 'video-edit')\n  }\n\n  canDeactivate () {\n    if (this.firstStep) return { canDeactivate: true }\n\n    let text = ''\n\n    if (this.manageController.hasPendingChanges()) {\n      text = $localize`Your video is being imported. But there are unsaved changes: are you sure you want to leave this page?`\n    }\n\n    return { canDeactivate: !text, text }\n  }\n\n  onVideoUpdated () {\n    this.notifier.success($localize`Changes saved.`)\n  }\n\n  reset () {\n    this.firstStep = true\n    this.isImportingVideo = false\n    this.firstStepMagnetUri = ''\n  }\n\n  isMagnetUrlValid () {\n    return !!this.firstStepMagnetUri\n  }\n\n  fileChange () {\n    const torrentfile = this.torrentfileInput().nativeElement.files[0]\n    if (!torrentfile) return\n\n    this.importVideo(torrentfile)\n  }\n\n  setTorrentFile (files: FileList) {\n    this.torrentfileInput().nativeElement.files = files\n    this.fileChange()\n  }\n\n  importVideo (torrentfile?: Blob) {\n    if (this.isImportingVideo) return\n    this.isImportingVideo = true\n\n    const serverConfig = this.serverService.getHTMLConfig()\n\n    const videoEdit = VideoEdit.createFromImport(serverConfig, {\n      torrentfile,\n      magnetUri: this.firstStepMagnetUri,\n      channelId: this.firstStepChannelId,\n      support: this.userChannels().find(c => c.id === this.firstStepChannelId).support ?? ''\n    })\n    this.manageController.setConfig({ manageType: 'import-torrent', serverConfig: this.serverService.getHTMLConfig() })\n    this.manageController.setVideoEdit(videoEdit)\n\n    this.loadingBar.useRef().start()\n\n    this.videoImportService.importVideo(videoEdit.toVideoImportCreate(this.highestPrivacy()))\n      .pipe(switchMap(({ video }) => this.videoService.getVideo({ videoId: video.uuid })))\n      .subscribe({\n        next: async video => {\n          await videoEdit.loadFromAPI({ video })\n\n          this.loadingBar.useRef().complete()\n\n          debugLogger(`Torrent/magnet import created`)\n\n          this.manageController.silentRedirectOnManage(videoEdit.getVideoAttributes().shortUUID, this.route)\n\n          this.firstStep = false\n          this.isImportingVideo = false\n          this.firstStepDone.emit(videoEdit.getVideoAttributes().name)\n        },\n\n        error: err => {\n          this.loadingBar.useRef().complete()\n          this.firstStepError.emit()\n\n          let message = err.message\n          const error = err.body as PeerTubeProblemDocument\n\n          if (error?.code === ServerErrorCode.INCORRECT_FILES_IN_TORRENT) {\n            message = $localize`Torrents with only 1 file are supported.`\n          }\n\n          this.notifier.error(message)\n          this.isImportingVideo = false\n        }\n      })\n  }\n}\n","@if (firstStep) {\n  <div class=\"upload-video-container\" myDragDrop (fileDropped)=\"setTorrentFile($event)\">\n    <div class=\"first-step-block\">\n      <my-global-icon class=\"upload-icon\" iconName=\"upload\" aria-hidden=\"true\"></my-global-icon>\n\n      <div class=\"button-file primary-button form-control\" [ngbTooltip]=\"'(extensions: .torrent)'\">\n        <span i18n>Select the torrent to import</span>\n        <input\n          aria-label=\"Select the torrent to import\" i18n-aria-label\n          #torrentfileInput type=\"file\" name=\"torrentfile\" id=\"torrentfile\" accept=\".torrent\" (change)=\"fileChange()\"\n        />\n      </div>\n\n      <div class=\"torrent-or-magnet\" i18n-data-content data-content=\"OR\"></div>\n\n      <div class=\"form-group form-group-magnet-uri\">\n        <label i18n for=\"magnetUri\">Paste magnet URI</label>\n        <my-help>\n          <ng-container i18n>\n            You can import any torrent file that points to a media file.\n            You should make sure you have diffusion rights over the content it points to, otherwise it could cause legal trouble to yourself and your instance.\n          </ng-container>\n        </my-help>\n\n        <input type=\"text\" id=\"magnetUri\" [(ngModel)]=\"firstStepMagnetUri\" class=\"form-control\" />\n      </div>\n\n      <div class=\"form-group\">\n        <label i18n for=\"first-step-channel\">Channel</label>\n        <my-select-channel inputId=\"first-step-channel\" [items]=\"userChannels()\" [(ngModel)]=\"firstStepChannelId\"></my-select-channel>\n      </div>\n\n      <input\n        type=\"button\" i18n-value value=\"Import\" class=\"peertube-button primary-button\"\n        [disabled]=\"!isMagnetUrlValid() || isImportingVideo\" (click)=\"importVideo()\"\n      />\n    </div>\n  </div>\n} @else {\n  <my-video-manage-container canUpdate=\"true\" canWatch=\"false\" cancelLink=\"/my-library/videos\" (videoUpdated)=\"onVideoUpdated()\">\n    <my-alert type=\"primary\" i18n>\n      Congratulations, the video will be imported with BitTorrent! You can already add information about this video.\n    </my-alert>\n  </my-video-manage-container>\n}\n","import { NgIf } from '@angular/common'\nimport { AfterViewInit, Component, OnInit, inject, input, output } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { ActivatedRoute, RouterLink } from '@angular/router'\nimport { VideoEdit } from '@app/+videos-publish-manage/shared-manage/common/video-edit.model'\nimport { VideoManageController } from '@app/+videos-publish-manage/shared-manage/video-manage-controller.service'\nimport { CanComponentDeactivate, HooksService, Notifier, ServerService } from '@app/core'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { VideoCaptionService } from '@app/shared/shared-main/video-caption/video-caption.service'\nimport { VideoChapterService } from '@app/shared/shared-main/video/video-chapter.service'\nimport { VideoImportService } from '@app/shared/shared-main/video/video-import.service'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { LoadingBarService } from '@ngx-loading-bar/core'\nimport { UserVideoQuota, VideoPrivacyType } from '@peertube/peertube-models'\nimport debug from 'debug'\nimport { forkJoin } from 'rxjs'\nimport { map, switchMap } from 'rxjs/operators'\nimport { SelectChannelItem } from 'src/types'\nimport { SelectChannelComponent } from '../../../shared/shared-forms/select/select-channel.component'\nimport { GlobalIconComponent } from '../../../shared/shared-icons/global-icon.component'\nimport { HelpComponent } from '../../../shared/shared-main/buttons/help.component'\nimport { VideoManageContainerComponent } from '../../shared-manage/video-manage-container.component'\n\nconst debugLogger = debug('peertube:video-publish')\n\n@Component({\n  selector: 'my-video-import-url',\n  templateUrl: './video-import-url.component.html',\n  styleUrls: [ '../shared/common-publish.scss' ],\n  imports: [\n    NgIf,\n    GlobalIconComponent,\n    HelpComponent,\n    FormsModule,\n    RouterLink,\n    SelectChannelComponent,\n    ReactiveFormsModule,\n    AlertComponent,\n    VideoManageContainerComponent\n  ]\n})\nexport class VideoImportUrlComponent implements OnInit, AfterViewInit, CanComponentDeactivate {\n  private loadingBar = inject(LoadingBarService)\n  private notifier = inject(Notifier)\n  private videoService = inject(VideoService)\n  private videoImportService = inject(VideoImportService)\n  private hooks = inject(HooksService)\n  private serverService = inject(ServerService)\n  private manageController = inject(VideoManageController)\n  private route = inject(ActivatedRoute)\n  private chapterService = inject(VideoChapterService)\n  private captionService = inject(VideoCaptionService)\n\n  readonly userChannels = input.required<SelectChannelItem[]>()\n  readonly userQuota = input.required<UserVideoQuota>()\n  readonly highestPrivacy = input.required<VideoPrivacyType>()\n\n  readonly firstStepDone = output<string>()\n  readonly firstStepError = output()\n\n  targetUrl = ''\n\n  firstStep = true\n  firstStepChannelId: number\n\n  isImportingVideo = false\n\n  ngOnInit () {\n    this.firstStepChannelId = this.userChannels()[0].id\n  }\n\n  ngAfterViewInit () {\n    this.hooks.runAction('action:video-url-import.init', 'video-edit')\n  }\n\n  canDeactivate () {\n    if (this.firstStep) return { canDeactivate: true }\n\n    let text = ''\n\n    if (this.manageController.hasPendingChanges()) {\n      text = $localize`Your video is being imported. But there are unsaved changes: are you sure you want to leave this page?`\n    }\n\n    return { canDeactivate: !text, text }\n  }\n\n  onVideoUpdated () {\n    this.notifier.success($localize`Changes saved.`)\n  }\n\n  reset () {\n    this.firstStep = true\n    this.isImportingVideo = false\n  }\n\n  isTargetUrlValid () {\n    return this.targetUrl?.match(/https?:\\/\\//)\n  }\n\n  isChannelSyncEnabled () {\n    return this.serverService.getHTMLConfig().import.videoChannelSynchronization.enabled\n  }\n\n  importVideo () {\n    if (this.isImportingVideo) return\n    this.isImportingVideo = true\n\n    const serverConfig = this.serverService.getHTMLConfig()\n\n    const videoEdit = VideoEdit.createFromImport(serverConfig, {\n      targetUrl: this.targetUrl,\n      channelId: this.firstStepChannelId,\n      support: this.userChannels().find(c => c.id === this.firstStepChannelId).support ?? ''\n    })\n    this.manageController.setConfig({ manageType: 'import-url', serverConfig: this.serverService.getHTMLConfig() })\n    this.manageController.setVideoEdit(videoEdit)\n\n    this.loadingBar.useRef().start()\n\n    this.videoImportService.importVideo(videoEdit.toVideoImportCreate(this.highestPrivacy()))\n      .pipe(\n        switchMap(previous => {\n          return forkJoin([\n            this.captionService.listCaptions(previous.video.uuid),\n            this.chapterService.getChapters({ videoId: previous.video.uuid }),\n            this.videoService.getVideo({ videoId: previous.video.uuid })\n          ]).pipe(map(([ { data: captions }, { chapters }, video ]) => ({ captions, chapters, video })))\n        })\n      )\n      .subscribe({\n        next: async ({ video, captions, chapters }) => {\n          await videoEdit.loadFromAPI({ video, captions, chapters })\n\n          this.loadingBar.useRef().complete()\n\n          debugLogger(`URL import created`)\n\n          this.manageController.silentRedirectOnManage(videoEdit.getVideoAttributes().shortUUID, this.route)\n\n          this.firstStep = false\n          this.isImportingVideo = false\n          this.firstStepDone.emit(videoEdit.getVideoAttributes().name)\n        },\n\n        error: err => {\n          this.loadingBar.useRef().complete()\n          this.isImportingVideo = false\n          this.firstStepError.emit()\n          this.notifier.error(err.message)\n        }\n      })\n  }\n}\n","@if (firstStep) {\n  <div  class=\"upload-video-container\">\n    <div class=\"first-step-block\">\n      <my-global-icon class=\"upload-icon\" iconName=\"upload\" aria-hidden=\"true\"></my-global-icon>\n\n      <div class=\"form-group\">\n        <label i18n for=\"targetUrl\">URL</label>\n\n        <my-help>\n          <ng-container i18n>\n            You can import any URL <a href='https://rg3.github.io/youtube-dl/supportedsites.html' target='_blank' rel='noopener noreferrer'>supported by youtube-dl</a>\n            or URL that points to a media file.\n            You should make sure you have diffusion rights over the content it points to, otherwise it could cause legal trouble to yourself and your instance.\n          </ng-container>\n        </my-help>\n\n        <input type=\"text\" id=\"targetUrl\" [(ngModel)]=\"targetUrl\" class=\"form-control\" />\n\n        <div *ngIf=\"isChannelSyncEnabled()\" class=\"form-group-description\" i18n>\n          You can also synchronize a remote channel in <a class=\"text-decoration-underline\" routerLink=\"/my-library/video-channel-syncs\">your library</a>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label i18n for=\"first-step-channel\">Channel</label>\n        <my-select-channel inputId=\"first-step-channel\" [items]=\"userChannels()\" [(ngModel)]=\"firstStepChannelId\"></my-select-channel>\n      </div>\n\n      <input\n        type=\"button\" i18n-value value=\"Import\" class=\"peertube-button primary-button\"\n        [disabled]=\"!isTargetUrlValid() || isImportingVideo\" (click)=\"importVideo()\"\n      />\n    </div>\n  </div>\n} @else {\n  <my-video-manage-container canUpdate=\"true\" canWatch=\"false\" cancelLink=\"/my-library/videos\" (videoUpdated)=\"onVideoUpdated()\">\n    <my-alert type=\"primary\" i18n>\n      Congratulations, the video behind {{ targetUrl }} is being imported! You can already add information about this video.\n    </my-alert>\n  </my-video-manage-container>\n}\n\n\n","import { AfterViewInit, Component, OnInit, inject, input, output } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { VideoEdit } from '@app/+videos-publish-manage/shared-manage/common/video-edit.model'\nimport { VideoManageController } from '@app/+videos-publish-manage/shared-manage/video-manage-controller.service'\nimport { CanComponentDeactivate, HooksService, Notifier, ServerService } from '@app/core'\nimport { LiveVideoService } from '@app/shared/shared-video-live/live-video.service'\nimport { LiveVideoLatencyMode, PeerTubeProblemDocument, ServerErrorCode, UserVideoQuota, VideoPrivacyType } from '@peertube/peertube-models'\nimport debug from 'debug'\nimport { map, switchMap } from 'rxjs'\nimport { SelectChannelItem } from 'src/types'\nimport { SelectChannelComponent } from '../../../shared/shared-forms/select/select-channel.component'\nimport { GlobalIconComponent } from '../../../shared/shared-icons/global-icon.component'\nimport { VideoManageContainerComponent } from '../../shared-manage/video-manage-container.component'\n\nconst debugLogger = debug('peertube:video-publish')\n\n@Component({\n  selector: 'my-video-go-live',\n  templateUrl: './video-go-live.component.html',\n  styleUrls: [\n    '../shared/common-publish.scss',\n    './video-go-live.component.scss'\n  ],\n  imports: [\n    GlobalIconComponent,\n    SelectChannelComponent,\n    FormsModule,\n    ReactiveFormsModule,\n    VideoManageContainerComponent\n  ]\n})\nexport class VideoGoLiveComponent implements OnInit, AfterViewInit, CanComponentDeactivate {\n  private notifier = inject(Notifier)\n  private serverService = inject(ServerService)\n  private liveVideoService = inject(LiveVideoService)\n  private hooks = inject(HooksService)\n  private manageController = inject(VideoManageController)\n  private route = inject(ActivatedRoute)\n\n  readonly userChannels = input.required<SelectChannelItem[]>()\n  readonly userQuota = input.required<UserVideoQuota>()\n  readonly highestPrivacy = input.required<VideoPrivacyType>()\n\n  readonly firstStepDone = output<string>()\n  readonly firstStepError = output()\n\n  firstStep = true\n  firstStepChannelId: number\n  firstStepPermanentLive: boolean\n\n  private isGoingLive = false\n\n  ngOnInit () {\n    this.firstStepChannelId = this.userChannels()[0].id\n  }\n\n  ngAfterViewInit () {\n    this.hooks.runAction('action:go-live.init', 'video-edit')\n  }\n\n  canDeactivate () {\n    if (this.firstStep) return { canDeactivate: true }\n\n    let text = ''\n\n    if (this.manageController.hasPendingChanges()) {\n      text = $localize`Your live is waiting in your library. But there are unsaved changes: are you sure you want to leave this page?`\n    }\n\n    return { canDeactivate: !text, text }\n  }\n\n  reset () {\n    this.firstStep = true\n    this.isGoingLive = false\n  }\n\n  goLive () {\n    if (this.isGoingLive) return\n    this.isGoingLive = true\n\n    const serverConfig = this.serverService.getHTMLConfig()\n\n    const videoEdit = VideoEdit.createFromLive(serverConfig, {\n      name: $localize`:The translation must be at least 3 characters long:Live`,\n      channelId: this.firstStepChannelId,\n      support: this.userChannels().find(c => c.id === this.firstStepChannelId).support ?? '',\n      permanentLive: this.firstStepPermanentLive,\n      latencyMode: LiveVideoLatencyMode.DEFAULT,\n      saveReplay: this.isReplayAllowed(),\n      replaySettings: { privacy: this.highestPrivacy() }\n    })\n    this.manageController.setConfig({ manageType: 'go-live', serverConfig: this.serverService.getHTMLConfig() })\n    this.manageController.setVideoEdit(videoEdit)\n\n    this.liveVideoService.goLive(videoEdit.toLiveCreate(this.highestPrivacy()))\n      .pipe(\n        switchMap(({ video }) => {\n          return this.liveVideoService.getVideoLive(video.uuid)\n            .pipe(map(live => ({ live, video })))\n        })\n      )\n      .subscribe({\n        next: async ({ video: { id, uuid, shortUUID }, live }) => {\n          videoEdit.loadAfterPublish({ video: { id, uuid, shortUUID } })\n          await videoEdit.loadFromAPI({ live })\n\n          debugLogger(`Live published`)\n\n          this.manageController.silentRedirectOnManage(shortUUID, this.route)\n\n          this.firstStep = false\n          this.isGoingLive = false\n          this.firstStepDone.emit(videoEdit.getVideoAttributes().name)\n        },\n\n        error: err => {\n          this.firstStepError.emit()\n\n          let message = err.message\n          const error = err.body as PeerTubeProblemDocument\n\n          if (error?.code === ServerErrorCode.MAX_INSTANCE_LIVES_LIMIT_REACHED) {\n            message = $localize`Cannot create live because this platform has too many created lives`\n          } else if (error?.code === ServerErrorCode.MAX_USER_LIVES_LIMIT_REACHED) {\n            message = $localize`Cannot create live because you created too many lives`\n          }\n\n          this.notifier.error(message)\n          this.isGoingLive = false\n        }\n      })\n  }\n\n  onVideoUpdated () {\n    this.notifier.success($localize`Changes saved.`)\n  }\n\n  getNormalLiveDescription () {\n    if (this.isReplayAllowed()) {\n      return $localize`Stream only once, replay will replace your live`\n    }\n\n    return $localize`Stream only once`\n  }\n\n  getPermanentLiveDescription () {\n    if (this.isReplayAllowed()) {\n      return $localize`Stream multiple times, replays will be separate videos`\n    }\n\n    return $localize`Stream multiple times using the same URL`\n  }\n\n  private isReplayAllowed () {\n    return this.serverService.getHTMLConfig().live.allowReplay\n  }\n}\n","@if (firstStep) {\n  <div class=\"upload-video-container\">\n    <div class=\"first-step-block\">\n      <my-global-icon class=\"upload-icon\" iconName=\"upload\" aria-hidden=\"true\"></my-global-icon>\n\n      <div class=\"form-group\">\n        <label i18n for=\"first-step-channel\">Channel</label>\n        <my-select-channel inputId=\"first-step-channel\" [items]=\"userChannels()\" [(ngModel)]=\"firstStepChannelId\"></my-select-channel>\n      </div>\n\n      <div class=\"form-group live-type\">\n        <div class=\"peertube-radio-container\">\n          <input type=\"radio\" id=\"permanentLiveFalse\" [(ngModel)]=\"firstStepPermanentLive\" [value]=\"false\">\n          <label i18n for=\"permanentLiveFalse\" class=\"radio\">Normal live</label>\n\n          <span class=\"form-group-description\">{{ getNormalLiveDescription() }}</span>\n        </div>\n\n        <div class=\"peertube-radio-container\">\n          <input type=\"radio\" id=\"permanentLiveTrue\" [(ngModel)]=\"firstStepPermanentLive\" [value]=\"true\">\n          <label i18n for=\"permanentLiveTrue\" class=\"radio\">Permanent/recurring live</label>\n\n          <span class=\"form-group-description\" i18n>{{ getPermanentLiveDescription() }}</span>\n        </div>\n      </div>\n\n      <input\n        class=\"peertube-button primary-button\"\n        [disabled]=\"firstStepPermanentLive !== true && firstStepPermanentLive !== false\"\n        type=\"button\" i18n-value value=\"Go Live\" (click)=\"goLive()\"\n      />\n    </div>\n  </div>\n} @else {\n  <my-video-manage-container canUpdate=\"true\" canWatch=\"true\" cancelLink=\"/my-library/videos\" (videoUpdated)=\"onVideoUpdated()\">\n  </my-video-manage-container>\n}\n","import { NgIf } from '@angular/common'\nimport { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, inject, input, output, viewChild } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { VideoEdit } from '@app/+videos-publish-manage/shared-manage/common/video-edit.model'\nimport { VideoUploadService } from '@app/+videos-publish-manage/shared-manage/common/video-upload.service'\nimport { VideoManageController } from '@app/+videos-publish-manage/shared-manage/video-manage-controller.service'\nimport { CanComponentDeactivate, CanDeactivateGuard, HooksService, MetaService, Notifier, ServerService } from '@app/core'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { UserVideoQuota, VideoPrivacyType } from '@peertube/peertube-models'\nimport debug from 'debug'\nimport { truncate } from 'lodash-es'\nimport { Subscription } from 'rxjs'\nimport { SelectChannelItem } from 'src/types'\nimport { PreviewUploadComponent } from '../../../shared/shared-forms/preview-upload.component'\nimport { SelectChannelComponent } from '../../../shared/shared-forms/select/select-channel.component'\nimport { GlobalIconComponent } from '../../../shared/shared-icons/global-icon.component'\nimport { ButtonComponent } from '../../../shared/shared-main/buttons/button.component'\nimport { VideoManageContainerComponent } from '../../shared-manage/video-manage-container.component'\nimport { DragDropDirective } from '../shared/drag-drop.directive'\n\nconst debugLogger = debug('peertube:video-publish')\n\n@Component({\n  selector: 'my-video-upload',\n  templateUrl: './video-upload.component.html',\n  styleUrls: [\n    '../shared/common-publish.scss',\n    './video-upload.component.scss'\n  ],\n  imports: [\n    NgIf,\n    DragDropDirective,\n    GlobalIconComponent,\n    NgbTooltip,\n    SelectChannelComponent,\n    FormsModule,\n    PreviewUploadComponent,\n    ButtonComponent,\n    ReactiveFormsModule,\n    VideoManageContainerComponent\n  ]\n})\nexport class VideoUploadComponent implements OnInit, OnDestroy, AfterViewInit, CanComponentDeactivate {\n  private notifier = inject(Notifier)\n  private serverService = inject(ServerService)\n  private hooks = inject(HooksService)\n  private metaService = inject(MetaService)\n  private route = inject(ActivatedRoute)\n  private videoUploadService = inject(VideoUploadService)\n  private manageController = inject(VideoManageController)\n  private router = inject(Router)\n  private canDeactivateGuard = inject(CanDeactivateGuard)\n\n  readonly userChannels = input.required<SelectChannelItem[]>()\n  readonly userQuota = input.required<UserVideoQuota>()\n  readonly highestPrivacy = input.required<VideoPrivacyType>()\n\n  readonly firstStepDone = output<string>()\n  readonly firstStepError = output()\n  readonly videoFileInput = viewChild<ElementRef<HTMLInputElement>>('videoFileInput')\n\n  uploadingAudioFile = false\n  audioPreviewFile: File\n\n  firstStep = true\n  firstStepChannelId: number\n\n  hasFirstUpdated = false\n\n  private videoEdit: VideoEdit\n  private uploadEventsSubscription: Subscription\n\n  ngOnInit () {\n    this.uploadEventsSubscription = this.manageController.getUploadEventsObs()\n      .subscribe(state => {\n        this.updateTitle()\n\n        if (state.status === 'cancelled') {\n          debugLogger('Upload cancelled', state)\n\n          this.firstStepError.emit()\n          this.firstStep = true\n          this.manageController.silentRedirectOnAbortUpload(this.route)\n\n          return\n        }\n\n        if (state.status === 'complete') {\n          const { id, uuid, shortUUID } = state.response.video\n\n          this.videoEdit.loadAfterPublish({ video: { id, uuid, shortUUID } })\n\n          debugLogger(`Upload complete`, state)\n\n          this.manageController.silentRedirectOnManage(shortUUID, this.route)\n          return\n        }\n      })\n\n    this.firstStepChannelId = this.userChannels()[0].id\n  }\n\n  ngAfterViewInit () {\n    this.hooks.runAction('action:video-upload.init', 'video-edit')\n  }\n\n  ngOnDestroy () {\n    this.uploadEventsSubscription?.unsubscribe()\n    this.manageController.cancelUploadIfNeeded()\n  }\n\n  canDeactivate () {\n    if (this.firstStep) return { canDeactivate: true }\n\n    let text = ''\n\n    if (this.hasUploadedFile() !== true) {\n      text = $localize`Your video is not uploaded yet, are you sure you want to leave this page?`\n    } else if (this.manageController.hasPendingChanges()) {\n      text = $localize`Your video was uploaded to your library. But there are unsaved changes: are you sure you want to leave this page?`\n    }\n\n    return { canDeactivate: !text, text }\n  }\n\n  updateTitle () {\n    if (this.hasUploadedFile()) {\n      this.metaService.setTitle($localize`Publish`)\n    } else if (this.uploadingAudioFile || !this.firstStep) {\n      this.metaService.setTitle(`${this.manageController.getUploadPercents()}% - Publish`)\n    } else {\n      this.metaService.update(this.route.snapshot.data['meta'])\n    }\n  }\n\n  getVideoExtensions () {\n    return this.videoUploadService.getVideoExtensions().join(', ')\n  }\n\n  onFileDropped (files: FileList) {\n    const videoFileInput = this.videoFileInput()\n    videoFileInput.nativeElement.files = files\n\n    this.onFileChange({ target: videoFileInput.nativeElement })\n  }\n\n  onFileChange (event: Event | { target: HTMLInputElement }) {\n    this.resetUploadState()\n\n    const file = (event.target as HTMLInputElement).files[0]\n    if (!file) return\n\n    if (!this.manageController.checkUserQuota(file)) return\n\n    if (this.videoUploadService.isAudioFile(file.name)) {\n      this.uploadingAudioFile = true\n      return\n    }\n\n    this.firstStep = false\n\n    this.uploadFile(file)\n  }\n\n  private resetUploadState () {\n    this.firstStep = true\n    this.videoEdit = undefined\n    this.uploadingAudioFile = false\n  }\n\n  uploadAudio () {\n    this.uploadFile(this.getInputVideoFile(), this.audioPreviewFile)\n  }\n\n  getAudioUploadLabel () {\n    const videoFile = this.getInputVideoFile()\n    if (!videoFile) return $localize`Upload`\n\n    return $localize`Upload ${videoFile.name}`\n  }\n\n  onVideoUpdated () {\n    this.notifier.success($localize`Changes saved.`)\n  }\n\n  hasUploadedFile () {\n    if (!this.videoEdit) return false\n\n    return !!this.videoEdit.getVideoAttributes().id\n  }\n\n  getCancelLink () {\n    if (this.hasUploadedFile()) {\n      return '/my-library/videos'\n    }\n\n    return '/videos/publish'\n  }\n\n  reset () {\n    this.resetUploadState()\n    this.manageController.cancelUploadIfNeeded()\n    this.updateTitle()\n  }\n\n  private getInputVideoFile () {\n    return this.videoFileInput().nativeElement.files[0]\n  }\n\n  private uploadFile (file: File, previewfile?: File) {\n    const serverConfig = this.serverService.getHTMLConfig()\n\n    this.videoEdit = VideoEdit.createFromUpload(serverConfig, {\n      name: this.buildVideoFilename(file.name),\n      channelId: this.firstStepChannelId,\n      support: this.userChannels().find(c => c.id === this.firstStepChannelId).support ?? ''\n    })\n\n    this.manageController.setConfig({ manageType: 'upload', serverConfig: this.serverService.getHTMLConfig() })\n    this.manageController.setVideoEdit(this.videoEdit)\n    this.manageController.uploadNewVideo({ privacy: this.highestPrivacy(), file, previewfile })\n    this.manageController.silentRedirectOnUploading(this.route)\n\n    this.firstStep = false\n    this.firstStepDone.emit(this.videoEdit.getVideoAttributes().name)\n\n    this.updateTitle()\n  }\n\n  private buildVideoFilename (filename: string) {\n    const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '')\n    let name = nameWithoutExtension.length < 3\n      ? filename\n      : nameWithoutExtension\n\n    const videoNameMaxSize = 110\n    if (name.length > videoNameMaxSize) {\n      name = truncate(name, { length: videoNameMaxSize, omission: '' })\n    }\n\n    return name\n  }\n}\n","@if (firstStep) {\n  <div class=\"upload-video-container\" myDragDrop (fileDropped)=\"onFileDropped($event)\">\n    <div class=\"first-step-block\">\n      <my-global-icon class=\"upload-icon\" iconName=\"upload\" aria-hidden=\"true\"></my-global-icon>\n\n      <div class=\"button-file primary-button form-control\" [ngbTooltip]=\"'(extensions: ' + getVideoExtensions() + ')'\">\n        <span i18n>Select the file to upload</span>\n        <input\n          aria-label=\"Select the file to upload\"\n          i18n-aria-label\n          #videoFileInput\n          [accept]=\"getVideoExtensions()\"\n          (change)=\"onFileChange($event)\"\n          id=\"videofile\"\n          type=\"file\"\n        />\n      </div>\n\n      <div class=\"form-group form-group-channel\">\n        <label i18n for=\"first-step-channel\">Channel</label>\n        <my-select-channel inputId=\"first-step-channel\" [items]=\"userChannels()\" [(ngModel)]=\"firstStepChannelId\"></my-select-channel>\n      </div>\n\n      <ng-container *ngIf=\"uploadingAudioFile\">\n        <div  class=\"form-group audio-preview\">\n          <label i18n for=\"previewfileUpload\">Video background image</label>\n\n          <div i18n class=\"audio-image-info\">\n            Image that will be merged with your audio file.\n            <br />\n            The chosen image will be definitive and cannot be modified.\n          </div>\n\n          <my-preview-upload\n            i18n-inputLabel inputLabel=\"Edit\" inputName=\"previewfileUpload\" [(ngModel)]=\"audioPreviewFile\"\n            previewWidth=\"360px\" previewHeight=\"200px\"\n          ></my-preview-upload>\n        </div>\n\n        <div class=\"form-group upload-audio-button\">\n          <my-button theme=\"primary\" [label]=\"getAudioUploadLabel()\" icon=\"upload\" (click)=\"uploadAudio()\"></my-button>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n} @else {\n  <my-video-manage-container\n    [canUpdate]=\"hasUploadedFile()\" [canWatch]=\"hasUploadedFile()\"\n    (videoUpdated)=\"onVideoUpdated()\" [cancelLink]=\"getCancelLink()\"\n    i18n-uploadedLabel uploadedLabel=\"File uploaded! Your video is now available in your private library.\"\n  >\n  </my-video-manage-container>\n}\n","<ng-template #helpButtons>\n  @if (isContactFormEnabled) {\n    <a i18n routerLink=\"/about/contact\" class=\"peertube-button-link primary-button mt-3 me-3\">Contact us</a>\n  }\n\n  <a i18n routerLink=\"/about/instance\" class=\"peertube-button-link primary-button mt-3\">Read instance rules for help</a>\n</ng-template>\n\n<ng-template #infoMessages>\n  @if (user.isAutoBlocked(serverConfig)) {\n    <my-alert class=\"upload-message auto-blocked\" type=\"primary\">\n      <div>{{ uploadMessages?.autoBlock }}</div>\n\n      <ng-template [ngTemplateOutlet]=\"helpButtons\"></ng-template>\n    </my-alert>\n  }\n\n  @if (isRootUser()) {\n    <my-alert class=\"upload-message root-user root-user root-user\" type=\"warning\">\n      <div i18n>We recommend you to not use the <strong>root</strong> user to publish your videos, since it's the super-admin account of your instance.</div>\n\n      <div i18n>Instead, <a class=\"text-decoration-underline alert-link\" routerLink=\"/admin/overview/users\">create a dedicated account</a> to upload your videos.</div>\n    </my-alert>\n  } @else {\n    <my-channels-setup-message></my-channels-setup-message>\n  }\n\n  <my-user-quota></my-user-quota>\n\n  @if (hasNoQuotaLeft || hasNoQuotaLeftDaily) {\n    <my-alert class=\"upload-message quota-left\" type=\"warning\">\n      <div *ngIf=\"hasNoQuotaLeft\">{{ uploadMessages?.quotaLeft }}</div>\n      <div *ngIf=\"hasNoQuotaLeftDaily\">{{ uploadMessages?.quotaLeftDaily }}</div>\n\n      <ng-template [ngTemplateOutlet]=\"helpButtons\"></ng-template>\n    </my-alert>\n  }\n</ng-template>\n\n@if (user.hasUploadDisabled()) {\n  <div class=\"margin-content\">\n    <my-alert class=\"upload-message upload-disabled\" type=\"warning\">\n      <div>{{ uploadMessages?.noQuota }}</div>\n\n      <ng-template [ngTemplateOutlet]=\"helpButtons\"></ng-template>\n    </my-alert>\n\n    <div class=\"upload-image\">\n      <img src=\"/client/assets/images/mascot/defeated.svg\" alt=\"defeated mascot\">\n    </div>\n  </div>\n} @else {\n  <div class=\"margin-content\">\n    @if (!isInSecondStep()) {\n      <ng-template [ngTemplateOutlet]=\"infoMessages\"></ng-template>\n    }\n\n    <div ngbNav #nav=\"ngbNav\" class=\"nav-tabs video-add-nav\" [activeId]=\"activeNav\" (activeIdChange)=\"onNavChange($event)\" [ngClass]=\"{ 'hide-nav': isInSecondStep() }\">\n      <ng-container ngbNavItem=\"upload\">\n        <a ngbNavLink>\n          <span i18n>Upload a file</span>\n        </a>\n\n        <ng-template ngbNavContent>\n          <my-video-upload\n            #videoUpload (firstStepDone)=\"onFirstStepDone('upload', $event)\" (firstStepError)=\"onError()\"\n            [userChannels]=\"userChannels\" [userQuota]=\"userQuota\" [highestPrivacy]=\"highestPrivacy\"\n          ></my-video-upload>\n        </ng-template>\n      </ng-container>\n\n      <ng-container ngbNavItem=\"import-url\">\n        @if (isVideoImportHttpEnabled()) {\n          <a ngbNavLink>\n            <span i18n>Import with URL</span>\n          </a>\n        } @else {\n          <div class=\"unavailable-nav-link\">\n            <span i18n>Import with URL</span>\n\n            <div class=\"pt-badge badge-secondary ms-2 me-1\" i18n>UNAVAILABLE</div>\n\n            <my-help i18n-helpTitle helpTitle=\"Feature unavailable\" container=\"body\">\n              Import with URL is not available on {{ instanceName }}.\n            </my-help>\n          </div>\n        }\n\n        <ng-template ngbNavContent>\n          <my-video-import-url\n            #videoImportUrl (firstStepDone)=\"onFirstStepDone('import-url', $event)\" (firstStepError)=\"onError()\"\n            [userChannels]=\"userChannels\" [userQuota]=\"userQuota\" [highestPrivacy]=\"highestPrivacy\"\n          ></my-video-import-url>\n        </ng-template>\n      </ng-container>\n\n      <ng-container ngbNavItem=\"import-torrent\">\n        @if (isVideoImportTorrentEnabled()) {\n          <a ngbNavLink>\n            <span i18n>Import with torrent</span>\n          </a>\n        } @else {\n          <div class=\"unavailable-nav-link\">\n            <span i18n>Import with torrent</span>\n\n            <div class=\"pt-badge badge-secondary ms-2 me-1\" i18n>UNAVAILABLE</div>\n\n            <my-help i18n-helpTitle helpTitle=\"Feature unavailable\" container=\"body\">\n              Import with torrent is not available on {{ instanceName }}.\n            </my-help>\n          </div>\n        }\n\n        <ng-template ngbNavContent>\n          <my-video-import-torrent\n            #videoImportTorrent (firstStepDone)=\"onFirstStepDone('import-torrent', $event)\" (firstStepError)=\"onError()\"\n            [userChannels]=\"userChannels\" [userQuota]=\"userQuota\" [highestPrivacy]=\"highestPrivacy\"\n          ></my-video-import-torrent>\n        </ng-template>\n      </ng-container>\n\n      <ng-container ngbNavItem=\"go-live\">\n        @if (isVideoLiveEnabled()) {\n          <a ngbNavLink>\n            <span i18n>Go live</span>\n          </a>\n        } @else {\n          <div class=\"unavailable-nav-link\">\n            <span i18n>Go live</span>\n\n            <div class=\"pt-badge badge-secondary ms-2 me-1\" i18n>UNAVAILABLE</div>\n\n            <my-help i18n-helpTitle helpTitle=\"Feature unavailable\" container=\"body\">\n              Live streaming is not available on {{ instanceName }}.\n            </my-help>\n          </div>\n        }\n\n        <ng-template ngbNavContent>\n          <my-video-go-live\n            #videoGoLive (firstStepDone)=\"onFirstStepDone('go-live', $event)\" (firstStepError)=\"onError()\"\n            [userChannels]=\"userChannels\" [userQuota]=\"userQuota\" [highestPrivacy]=\"highestPrivacy\"\n          ></my-video-go-live>\n        </ng-template>\n      </ng-container>\n    </div>\n\n    <div class=\"nav-content\" [ngbNavOutlet]=\"nav\"></div>\n  </div>\n}\n","import { NgClass, NgIf, NgTemplateOutlet } from '@angular/common'\nimport { Component, HostListener, OnInit, inject, viewChild } from '@angular/core'\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router'\nimport { AuthService, AuthUser, CanComponentDeactivate, CanDeactivateGuard, HooksService, ServerService } from '@app/core'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { NgbNav, NgbNavContent, NgbNavItem, NgbNavLink, NgbNavLinkBase, NgbNavOutlet } from '@ng-bootstrap/ng-bootstrap'\nimport { HTMLServerConfig, UserVideoQuota, VideoConstant, VideoPrivacyType } from '@peertube/peertube-models'\nimport { SelectChannelItem } from 'src/types'\nimport { HelpComponent } from '../../shared/shared-main/buttons/help.component'\nimport { ChannelsSetupMessageComponent } from '../../shared/shared-main/channel/channels-setup-message.component'\nimport { UserQuotaComponent } from '../../shared/shared-main/users/user-quota.component'\nimport { VideoManageType } from '../shared-manage/common/video-manage.type'\nimport { VideoManageController } from '../shared-manage/video-manage-controller.service'\nimport { VideoImportTorrentComponent } from './import/video-import-torrent.component'\nimport { VideoImportUrlComponent } from './import/video-import-url.component'\nimport { VideoGoLiveComponent } from './live/video-go-live.component'\nimport { VideoUploadComponent } from './upload/video-upload.component'\nimport { VideoPublishResolverData } from './video-publish.resolver'\n\n@Component({\n  selector: 'my-video-publish',\n  templateUrl: './video-publish.component.html',\n  styleUrls: [ './video-publish.component.scss' ],\n  imports: [\n    NgIf,\n    RouterLink,\n    NgTemplateOutlet,\n    UserQuotaComponent,\n    ChannelsSetupMessageComponent,\n    NgbNav,\n    NgClass,\n    NgbNavItem,\n    NgbNavLink,\n    NgbNavLinkBase,\n    NgbNavContent,\n    NgbNavOutlet,\n    AlertComponent,\n    VideoGoLiveComponent,\n    VideoImportTorrentComponent,\n    VideoImportUrlComponent,\n    VideoUploadComponent,\n    HelpComponent\n  ],\n  providers: [ VideoManageController ]\n})\nexport class VideoPublishComponent implements OnInit, CanComponentDeactivate {\n  private auth = inject(AuthService)\n  private hooks = inject(HooksService)\n  private serverService = inject(ServerService)\n  private route = inject(ActivatedRoute)\n  private router = inject(Router)\n  private manageController = inject(VideoManageController)\n  private videoService = inject(VideoService)\n  private canDeactivateGuard = inject(CanDeactivateGuard)\n\n  readonly videoUpload = viewChild<VideoUploadComponent>('videoUpload')\n  readonly videoImportUrl = viewChild<VideoImportUrlComponent>('videoImportUrl')\n  readonly videoImportTorrent = viewChild<VideoImportTorrentComponent>('videoImportTorrent')\n  readonly videoGoLive = viewChild<VideoGoLiveComponent>('videoGoLive')\n\n  user: AuthUser = null\n\n  secondStepType: VideoManageType\n  videoName: string\n\n  activeNav: string\n\n  uploadMessages: {\n    noQuota: string\n    autoBlock: string\n    quotaLeftDaily: string\n    quotaLeft: string\n  }\n\n  hasNoQuotaLeft = false\n  hasNoQuotaLeftDaily = false\n\n  serverConfig: HTMLServerConfig\n  highestPrivacy: VideoPrivacyType\n\n  userChannels: SelectChannelItem[]\n  userQuota: UserVideoQuota\n  privacies: VideoConstant<VideoPrivacyType>[]\n\n  private publishedIdQuery: string\n  private uploadingQuery: string\n\n  get isContactFormEnabled () {\n    return this.serverConfig.email.enabled && this.serverConfig.contactForm.enabled\n  }\n\n  get instanceName () {\n    return this.serverConfig.instance.name\n  }\n\n  ngOnInit () {\n    const data = this.route.snapshot.data.resolverData as VideoPublishResolverData\n    const { videoChannels, userQuota, privacies } = data\n\n    this.userChannels = videoChannels\n    this.userQuota = userQuota\n    this.privacies = privacies\n\n    this.user = this.auth.getUser()\n\n    this.serverConfig = this.serverService.getHTMLConfig()\n    this.highestPrivacy = this.videoService.getHighestAvailablePrivacy(privacies)\n\n    if (this.route.snapshot.fragment) {\n      this.onNavChange(this.route.snapshot.fragment as VideoManageType)\n    }\n\n    this.buildUploadMessages()\n\n    // videoQuota left lower than 10%\n    if (this.user.videoQuota !== -1 && userQuota.videoQuotaUsed > this.user.videoQuota * 0.9) {\n      this.hasNoQuotaLeft = true\n    }\n\n    // videoQuotaDaily left lower than 10%\n    if (this.user.videoQuotaDaily !== -1 && userQuota.videoQuotaUsedDaily > this.user.videoQuotaDaily * 0.9) {\n      this.hasNoQuotaLeftDaily = true\n    }\n\n    this.reset()\n\n    this.route.queryParams.subscribe(params => {\n      if (params.publishedId) {\n        this.publishedIdQuery = params.publishedId\n      } else if (params.uploading) {\n        this.uploadingQuery = params.uploading\n      } else if (this.publishedIdQuery || this.uploadingQuery) {\n        this.tryToReset()\n      }\n    })\n  }\n\n  private async tryToReset () {\n    const components = [\n      this.videoUpload(),\n      this.videoImportUrl(),\n      this.videoImportTorrent(),\n      this.videoGoLive()\n    ]\n\n    for (const component of components) {\n      if (!component) continue\n\n      // Restore old URL\n      if (!await this.canDeactivateGuard.canDeactivate(component)) {\n        if (this.publishedIdQuery) {\n          this.manageController.silentRedirectOnManage(this.publishedIdQuery, this.route)\n        } else if (this.uploadingQuery) {\n          this.manageController.silentRedirectOnUploading(this.route)\n        }\n\n        return\n      }\n\n      component.reset()\n    }\n\n    this.reset()\n  }\n\n  private reset () {\n    this.secondStepType = undefined\n    this.videoName = undefined\n    this.publishedIdQuery = undefined\n    this.uploadingQuery = undefined\n\n    this.manageController.setStore({\n      userChannels: this.userChannels,\n      userQuota: this.userQuota,\n      privacies: this.privacies,\n      videoEdit: undefined\n    })\n  }\n\n  private async buildUploadMessages () {\n    const noQuota =\n      $localize`Sorry, the upload feature is disabled for your account. If you want to add videos, an admin must unlock your quota.`\n    const autoBlock =\n      // eslint-disable-next-line max-len\n      $localize`Uploaded videos are reviewed before publishing for your account. If you want to add videos without moderation review, an admin must turn off your videos auto-block.`\n    const quotaLeftDaily =\n      // eslint-disable-next-line max-len\n      $localize`Your daily video quota is insufficient. If you want to add more videos, you must wait for 24 hours or an admin must increase your daily quota.`\n    const quotaLeft = $localize`Your video quota is insufficient. If you want to add more videos, an admin must increase your quota.`\n\n    const uploadMessages = {\n      noQuota,\n      autoBlock,\n      quotaLeftDaily,\n      quotaLeft\n    }\n\n    this.uploadMessages = await this.hooks.wrapObject(uploadMessages, 'common', 'filter:upload.messages.create.result')\n  }\n\n  onNavChange (newActiveNav: VideoManageType) {\n    this.activeNav = newActiveNav\n\n    this.manageController.setConfig({\n      manageType: newActiveNav,\n      serverConfig: this.serverConfig\n    })\n\n    this.router.navigate([], { fragment: this.activeNav })\n  }\n\n  onFirstStepDone (type: VideoManageType, videoName: string) {\n    this.secondStepType = type\n    this.videoName = videoName\n  }\n\n  onError () {\n    this.videoName = undefined\n    this.secondStepType = undefined\n  }\n\n  @HostListener('window:beforeunload', [ '$event' ])\n  onUnload (event: any) {\n    const { text, canDeactivate } = this.canDeactivate()\n\n    if (canDeactivate) return\n\n    event.returnValue = text\n    return text\n  }\n\n  canDeactivate (): { canDeactivate: boolean, text?: string } {\n    if (this.secondStepType === 'upload') return this.videoUpload().canDeactivate()\n    if (this.secondStepType === 'import-url') return this.videoImportUrl().canDeactivate()\n    if (this.secondStepType === 'import-torrent') return this.videoImportTorrent().canDeactivate()\n    if (this.secondStepType === 'go-live') return this.videoGoLive().canDeactivate()\n\n    return { canDeactivate: true }\n  }\n\n  isVideoImportHttpEnabled () {\n    return this.serverConfig.import.videos.http.enabled\n  }\n\n  isVideoImportTorrentEnabled () {\n    return this.serverConfig.import.videos.torrent.enabled\n  }\n\n  isVideoLiveEnabled () {\n    return this.serverConfig.live.enabled\n  }\n\n  isInSecondStep () {\n    return !!this.secondStepType\n  }\n\n  isRootUser () {\n    return this.user.username === 'root'\n  }\n}\n","import { Injectable, inject } from '@angular/core'\nimport { AuthService, ServerService, UserService } from '@app/core'\nimport { listUserChannelsForSelect } from '@app/helpers'\nimport { UserVideoQuota, VideoConstant, VideoPrivacyType } from '@peertube/peertube-models'\nimport { forkJoin } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { SelectChannelItem } from '../../../types'\n\nexport type VideoPublishResolverData = {\n  videoChannels: SelectChannelItem[]\n  userQuota: UserVideoQuota\n  privacies: VideoConstant<VideoPrivacyType>[]\n}\n\n@Injectable()\nexport class VideoPublishResolver {\n  private authService = inject(AuthService)\n  private serverService = inject(ServerService)\n  private userService = inject(UserService)\n\n  resolve () {\n    return forkJoin([\n      listUserChannelsForSelect(this.authService),\n      this.userService.getMyVideoQuotaUsed(),\n      this.serverService.getVideoPrivacies()\n    ]).pipe(map(([ videoChannels, userQuota, privacies ]) => ({ videoChannels, userQuota, privacies } as VideoPublishResolverData)))\n  }\n}\n","import { RedirectCommand, Router, Routes } from '@angular/router'\nimport { CanDeactivateGuard, LoginGuard } from '@app/core'\nimport { LiveVideoService } from '@app/shared/shared-video-live/live-video.service'\nimport { I18nPrimengCalendarService } from '../shared-manage/common/i18n-primeng-calendar.service'\nimport { VideoUploadService } from '../shared-manage/common/video-upload.service'\nimport { manageRoutes } from '../shared-manage/routes'\nimport { VideoStudioService } from '../shared-manage/studio/video-studio.service'\nimport { VideoManageController } from '../shared-manage/video-manage-controller.service'\nimport { VideoPublishComponent } from './video-publish.component'\nimport { VideoPublishResolver } from './video-publish.resolver'\nimport { inject } from '@angular/core'\nimport debug from 'debug'\nimport { VideoStateMessageService } from '@app/shared/shared-video/video-state-message.service'\n\nconst debugLogger = debug('peertube:video-publish')\n\nexport default [\n  {\n    path: '',\n    component: VideoPublishComponent,\n    canActivate: [\n      LoginGuard,\n\n      () => {\n        const publishedId = new URLSearchParams(window.location.search).get('publishedId')\n        const router = inject(Router)\n\n        if (publishedId) {\n          const match = window.location.pathname.match(/^\\/videos\\/publish\\/(.*)$/)\n          const suffixUrl = match\n            ? `/${match[1]}`\n            : ''\n\n          debugLogger('Redirecting to video manage page', { publishedId, match, suffixUrl })\n\n          return new RedirectCommand(router.parseUrl(`/videos/manage/${publishedId}${suffixUrl}`))\n        }\n\n        return true\n      }\n    ],\n    canDeactivate: [ CanDeactivateGuard ],\n    providers: [\n      VideoPublishResolver,\n      VideoManageController,\n      VideoStateMessageService,\n      LiveVideoService,\n      I18nPrimengCalendarService,\n      VideoUploadService,\n      VideoStudioService\n    ],\n    resolve: {\n      resolverData: VideoPublishResolver\n    },\n    children: manageRoutes\n  }\n] satisfies Routes\n"]}