{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","Ne","n","o","Ae","ɵɵelementContainerStart","R","Ie","RemoteSubscribeComponent","FormReactive","formReactiveService","inject","FormReactiveService","notifier","Notifier","uri","input","undefined","interact","showHelp","ngOnInit","buildForm","text","USER_HANDLE_VALIDATOR","onValidKey","forceCheck","form","valid","formValidated","address","value","replace","username","hostname","split","fetch","then","response","json","data","Array","isArray","links","Error","link","find","template","rel","includes","encodeURIComponent","url","isIOS","window","location","href","open","catch","err","logger","error","h","__ngFactoryType__","selectors","inputs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","i18n_0","$localize","ɵɵlistener","ctx","ɵɵtemplate","RemoteSubscribeComponent_Conditional_4_Template","RemoteSubscribeComponent_Conditional_5_Template","RemoteSubscribeComponent_my_help_6_Template","RemoteSubscribeComponent_my_help_7_Template","i","ɵɵproperty","ɵɵadvance","ɵɵconditional","dependencies","FormsModule","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","NgIf","HelpComponent","encapsulation","_RemoteSubscribeComponent","Ue","Be","big","ve","ye","we","r","p","ɵɵi18nExp","ctx_r1","subscribeStatus","length","subscribed","size","Q","$e","SubscribeButtonComponent_ng_template_1_Conditional_2_div_2_Template","isAtLeastOneChannelSubscribed","De","SubscribeButtonComponent_ng_template_1_Conditional_1_Template","SubscribeButtonComponent_ng_template_1_Conditional_2_Template","ɵɵpureFunction1","_c2","isSingleSubscribe","He","xe","Le","A","ɵɵrestoreView","_r3","ɵɵnextContext","ɵɵresetView","unsubscribe","SubscribeButtonComponent_Conditional_3_Conditional_0_Conditional_1_Template","SubscribeButtonComponent_Conditional_3_Conditional_0_Conditional_2_Template","buttonClasses","account","Fe","Ge","_r4","subscribe","SubscribeButtonComponent_Conditional_3_Conditional_1_ng_template_1_Template","ɵɵelement","t","v","subscribeContent_r5","ze","SubscribeButtonComponent_Conditional_3_Conditional_0_Template","SubscribeButtonComponent_Conditional_3_Conditional_1_Template","isAllChannelsSubscribed","Xe","ke","SubscribeButtonComponent_Conditional_4_ng_template_1_Template","Ve","Ye","je","We","podcastFeedUri","ɵɵsanitizeUrl","SubscribeButtonComponent","authService","AuthService","redirectService","RedirectService","userSubscriptionService","UserSubscriptionService","videoService","VideoService","videoChannels","dropdown","viewChild","Map","handle","nameWithHost","videoChannel","name","host","channelHandle","getChannelHandler","rssUri","getAccountFeedUrls","id","format","FeedFormat","RSS","getVideoChannelFeedUrls","type","FeedType","PODCAST","isBigButton","isUserLoggedIn","ngOnChanges","loadSubscribedStatus","buildClasses","close","localSubscribe","gotoLogin","subscribedStatus","observableBatch","map","filter","addSubscription","forkJoin","next","success","displayName","message","localUnsubscribe","deleteSubscription","concat","complete","isLoggedIn","redirectToLogin","accumulator","key","entries","push","isSubscribedToAll","from","values","every","isRemoteSubscribeAvailable","set","merge","listenToSubscriptionCacheChange","doesSubscriptionExist","res","viewQuery","rf","q","e","J","V","D","SubscribeButtonComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","SubscribeButtonComponent_Conditional_3_Template","SubscribeButtonComponent_Conditional_4_Template","i0","_r1","SubscribeButtonComponent_Conditional_9_Template","SubscribeButtonComponent_Conditional_10_Template","SubscribeButtonComponent_div_11_Template","SubscribeButtonComponent_a_15_Template","_c1","NgClass","NgTemplateOutlet","NgbDropdown","NgbDropdownToggle","NgbDropdownMenu","styles","_SubscribeButtonComponent","Pe","a","Rn","b"],"ignoreList":[],"sources":["src/app/shared/shared-user-subscription/remote-subscribe.component.html","src/app/shared/shared-user-subscription/remote-subscribe.component.ts","src/app/shared/shared-user-subscription/subscribe-button.component.html","src/app/shared/shared-user-subscription/subscribe-button.component.ts"],"sourcesContent":["<form novalidate [formGroup]=\"form\" (ngSubmit)=\"formValidated()\">\n  <div class=\"form-group\">\n    <input\n      type=\"email\" formControlName=\"text\" class=\"form-control\"\n      (keyup.control.enter)=\"onValidKey()\" (keyup.meta.enter)=\"onValidKey()\" placeholder=\"jane_doe@example.com\"\n    >\n  </div>\n\n  <button type=\"submit\" [disabled]=\"!form.valid\" class=\"peertube-button primary-button\">\n    @if (interact()) {\n      <span i18n>Remote interact</span>\n    } @else {\n      <span i18n>Remote subscribe</span>\n    }\n  </button>\n\n  <my-help *ngIf=\"!interact() && showHelp()\">\n    <ng-container i18n>\n      You can subscribe to the channel via any ActivityPub-capable fediverse instance (PeerTube, Mastodon or Pleroma for example).\n    </ng-container>\n  </my-help>\n\n  <my-help *ngIf=\"showHelp() && interact()\">\n    <ng-container i18n>\n      You can interact with this via any ActivityPub-capable fediverse instance (PeerTube, Mastodon or Pleroma for example).\n    </ng-container>\n  </my-help>\n</form>\n","import { NgIf } from '@angular/common'\nimport { Component, OnInit, inject, input } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { Notifier } from '@app/core'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { logger } from '@root-helpers/logger'\nimport { isIOS } from '@root-helpers/web-browser'\nimport { USER_HANDLE_VALIDATOR } from '../form-validators/user-validators'\nimport { HelpComponent } from '../shared-main/buttons/help.component'\n\n@Component({\n  selector: 'my-remote-subscribe',\n  templateUrl: './remote-subscribe.component.html',\n  imports: [ FormsModule, ReactiveFormsModule, NgIf, HelpComponent ]\n})\nexport class RemoteSubscribeComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private notifier = inject(Notifier)\n\n  readonly uri = input<string>(undefined)\n  readonly interact = input(false)\n  readonly showHelp = input(false)\n\n  ngOnInit () {\n    this.buildForm({\n      text: USER_HANDLE_VALIDATOR\n    })\n  }\n\n  onValidKey () {\n    this.forceCheck()\n    if (!this.form.valid) return\n\n    this.formValidated()\n  }\n\n  formValidated () {\n    let address = this.form.value['text'] || ''\n    address = address.replace(/^@/, '')\n\n    const [ username, hostname ] = address.split('@')\n\n    // Should not have CORS error because https://tools.ietf.org/html/rfc7033#section-5\n    fetch(`https://${hostname}/.well-known/webfinger?resource=acct:${username}@${hostname}`)\n      .then(response => response.json())\n      .then(data => {\n        if (!data || Array.isArray(data.links) === false) {\n          throw new Error('Not links in webfinger response')\n        }\n\n        const link: { template: string } = data.links.find((link: any) => {\n          return link && typeof link.template === 'string' && link.rel === 'http://ostatus.org/schema/1.0/subscribe'\n        })\n\n        if (link?.template.includes('{uri}')) {\n          return link.template.replace('{uri}', encodeURIComponent(this.uri()))\n        }\n\n        throw new Error('No subscribe template in webfinger response')\n      })\n      .then(url => {\n        if (isIOS()) return window.location.href = url\n\n        return window.open(url)\n      })\n      .catch(err => {\n        logger.error(err)\n\n        this.notifier.error($localize`Cannot fetch information of this remote account`)\n      })\n  }\n}\n","<div\n  class=\"btn-group\" role=\"group\"\n  [ngClass]=\"{ 'big': isBigButton }\"\n  ngbDropdown=\"dropdown\" autoClose=\"outside\" placement=\"bottom-right bottom-left bottom auto\"\n  role=\"group\" aria-label=\"Multiple ways to subscribe to the current channel\" i18n-aria-label\n>\n\n  <ng-template #subscribeContent>\n    <div class=\"d-inline-block\" [ngClass]=\"{ 'extra-text': isAtLeastOneChannelSubscribed }\">\n      @if (isSingleSubscribe) {\n        <ng-container i18n>Subscribe</ng-container>\n      } @else {\n        <div i18n>Subscribe to all channels</div>\n\n        <div class=\"fs-8 fw-normal lh-1\" *ngIf=\"isAtLeastOneChannelSubscribed\" i18n>\n          {{ subscribeStatus(true).length }}/{{ subscribed.size }} channels subscribed\n        </div>\n      }\n    </div>\n  </ng-template>\n\n  @if (isUserLoggedIn()) {\n    @if (isAllChannelsSubscribed) {\n      <button type=\"button\" [ngClass]=\"buttonClasses\" class=\"btn last-in-group\" (click)=\"unsubscribe()\">\n        @if (account()) {\n          <ng-container i18n>Unsubscribe from all channels</ng-container>\n        } @else {\n          <ng-container i18n>Unsubscribe</ng-container>\n        }\n      </button>\n    } @else {\n      <button type=\"button\" [ngClass]=\"buttonClasses\" class=\"btn\" (click)=\"subscribe()\">\n        <ng-template [ngTemplateOutlet]=\"subscribeContent\"></ng-template>\n      </button>\n\n      <button type=\"button\" [ngClass]=\"buttonClasses\" class=\"btn dropdown-toggle-split\" ngbDropdownToggle aria-label=\"Open subscription dropdown\" i18n-ariaLabel></button>\n    }\n  } @else {\n    <button ngbDropdownToggle [ngClass]=\"buttonClasses\" type=\"button\" class=\"btn\">\n      <ng-template [ngTemplateOutlet]=\"subscribeContent\"></ng-template>\n    </button>\n  }\n\n  <div class=\"dropdown-menu\" ngbDropdownMenu>\n\n    <h6 class=\"dropdown-header\" i18n>Using an ActivityPub account</h6>\n\n    <button type=\"button\" class=\"dropdown-item\" (click)=\"subscribe()\">\n      @if (isUserLoggedIn()) {\n        <span i18n>Subscribe with your local account</span>\n      } @else {\n        <span i18n>Subscribe with an account on this instance</span>\n      }\n    </button>\n\n    <div type=\"button\" *ngIf=\"isRemoteSubscribeAvailable()\" class=\"dropdown-item dropdown-item-neutral\">\n      <div class=\"mb-1\" i18n>Subscribe with a remote account:</div>\n      <my-remote-subscribe [showHelp]=\"true\" [uri]=\"uri\"></my-remote-subscribe>\n    </div>\n\n    <div class=\"dropdown-divider\"></div>\n\n    <h6 class=\"dropdown-header\" i18n>Using a syndication feed</h6>\n    <a *ngIf=\"podcastFeedUri\" [href]=\"podcastFeedUri\" target=\"_blank\" class=\"dropdown-item\" i18n>Subscribe via Podcast Feed</a>\n    <a [href]=\"rssUri\" target=\"_blank\" class=\"dropdown-item\" i18n>Subscribe via RSS</a>\n\n  </div>\n</div>\n","import { NgClass, NgIf, NgTemplateOutlet } from '@angular/common'\nimport { Component, OnChanges, inject, input, viewChild } from '@angular/core'\nimport { AuthService, Notifier, RedirectService } from '@app/core'\nimport { NgbDropdown, NgbDropdownMenu, NgbDropdownToggle } from '@ng-bootstrap/ng-bootstrap'\nimport { FeedFormat, FeedType } from '@peertube/peertube-models'\nimport { concat, forkJoin, merge } from 'rxjs'\nimport { Account } from '../shared-main/account/account.model'\nimport { VideoChannel } from '../shared-main/channel/video-channel.model'\nimport { VideoService } from '../shared-main/video/video.service'\nimport { RemoteSubscribeComponent } from './remote-subscribe.component'\nimport { UserSubscriptionService } from './user-subscription.service'\n\n@Component({\n  selector: 'my-subscribe-button',\n  templateUrl: './subscribe-button.component.html',\n  styleUrls: [ './subscribe-button.component.scss' ],\n  imports: [\n    NgClass,\n    NgIf,\n    NgTemplateOutlet,\n    NgbDropdown,\n    NgbDropdownToggle,\n    NgbDropdownMenu,\n    RemoteSubscribeComponent\n  ]\n})\nexport class SubscribeButtonComponent implements OnChanges {\n  private authService = inject(AuthService)\n  private redirectService = inject(RedirectService)\n  private notifier = inject(Notifier)\n  private userSubscriptionService = inject(UserSubscriptionService)\n  private videoService = inject(VideoService)\n\n  /**\n   * SubscribeButtonComponent can be used with a single VideoChannel passed as [VideoChannel],\n   * or with an account and a full list of that account's videoChannels. The latter is intended\n   * to allow mass un/subscription from an account's page, while keeping the channel-centric\n   * subscription model.\n   */\n  readonly account = input<Account>(undefined)\n  readonly videoChannels = input<VideoChannel[]>(undefined)\n  readonly size = input<'small' | 'normal'>('normal')\n\n  readonly dropdown = viewChild<NgbDropdown>('dropdown')\n\n  subscribed = new Map<string, boolean>()\n\n  buttonClasses: Record<string, boolean> = {}\n\n  get handle () {\n    const account = this.account()\n    return account\n      ? account.nameWithHost\n      : this.videoChannel.name + '@' + this.videoChannel.host\n  }\n\n  get channelHandle () {\n    return this.getChannelHandler(this.videoChannel)\n  }\n\n  get uri () {\n    const account = this.account()\n    return account\n      ? account.url\n      : this.videoChannels()[0].url\n  }\n\n  get rssUri () {\n    const account = this.account()\n\n    const rssFeed = account\n      ? this.videoService\n        .getAccountFeedUrls(account.id)\n        .find(i => i.format === FeedFormat.RSS)\n      : this.videoService\n        .getVideoChannelFeedUrls(this.videoChannels()[0].id)\n        .find(i => i.format === FeedFormat.RSS)\n\n    return rssFeed.url\n  }\n\n  get podcastFeedUri () {\n    return this.account()\n      ? undefined\n      : this.videoService\n        .getVideoChannelFeedUrls(this.videoChannels()[0].id)\n        .find(i => i.type === FeedType.PODCAST)\n        .url\n  }\n\n  get videoChannel () {\n    return this.videoChannels()[0]\n  }\n\n  get isAllChannelsSubscribed () {\n    return this.subscribeStatus(true).length === this.videoChannels().length\n  }\n\n  get isAtLeastOneChannelSubscribed () {\n    return this.subscribeStatus(true).length > 0\n  }\n\n  get isBigButton () {\n    return this.isUserLoggedIn() && this.videoChannels().length > 1 && this.isAtLeastOneChannelSubscribed\n  }\n\n  get isSingleSubscribe () {\n    return !this.account()\n  }\n\n  ngOnChanges () {\n    this.loadSubscribedStatus()\n    this.buildClasses()\n  }\n\n  // ---------------------------------------------------------------------------\n\n  subscribe () {\n    const dropdown = this.dropdown()\n    if (dropdown) dropdown.close()\n\n    if (this.isUserLoggedIn()) {\n      return this.localSubscribe()\n    }\n\n    return this.gotoLogin()\n  }\n\n  private localSubscribe () {\n    const subscribedStatus = this.subscribeStatus(false)\n\n    const observableBatch = this.videoChannels()\n      .map(videoChannel => this.getChannelHandler(videoChannel))\n      .filter(handle => subscribedStatus.includes(handle))\n      .map(handle => this.userSubscriptionService.addSubscription(handle))\n\n    forkJoin(observableBatch)\n      .subscribe({\n        next: () => {\n          this.buildClasses()\n\n          const account = this.account()\n          this.notifier.success(\n            account\n              ? $localize`Subscribed to all current channels of ${account.displayName}. You will be notified of all their new videos.`\n              : $localize`Subscribed to ${this.videoChannels()[0].displayName}. You will be notified of all their new videos.`,\n            $localize`Subscribed`\n          )\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  // ---------------------------------------------------------------------------\n\n  unsubscribe () {\n    const dropdown = this.dropdown()\n    if (dropdown) dropdown.close()\n\n    if (this.isUserLoggedIn()) {\n      this.localUnsubscribe()\n    }\n  }\n\n  private localUnsubscribe () {\n    const subscribeStatus = this.subscribeStatus(true)\n\n    const observableBatch = this.videoChannels()\n      .map(videoChannel => this.getChannelHandler(videoChannel))\n      .filter(handle => subscribeStatus.includes(handle))\n      .map(handle => this.userSubscriptionService.deleteSubscription(handle))\n\n    concat(...observableBatch)\n      .subscribe({\n        complete: () => {\n          this.buildClasses()\n\n          const account = this.account()\n          this.notifier.success(\n            account\n              ? $localize`Unsubscribed from all channels of ${account.nameWithHost}`\n              : $localize`Unsubscribed from ${this.videoChannels()[0].nameWithHost}`,\n            $localize`Unsubscribed`\n          )\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  // ---------------------------------------------------------------------------\n\n  isUserLoggedIn () {\n    return this.authService.isLoggedIn()\n  }\n\n  gotoLogin () {\n    this.redirectService.redirectToLogin()\n  }\n\n  subscribeStatus (subscribed: boolean) {\n    const accumulator: string[] = []\n    for (const [ key, value ] of this.subscribed.entries()) {\n      if (value === subscribed) accumulator.push(key)\n    }\n\n    return accumulator\n  }\n\n  isSubscribedToAll () {\n    return Array.from(this.subscribed.values()).every(v => v === true)\n  }\n\n  isRemoteSubscribeAvailable () {\n    return this.isSingleSubscribe && !this.isUserLoggedIn()\n  }\n\n  private getChannelHandler (videoChannel: VideoChannel) {\n    return videoChannel.name + '@' + videoChannel.host\n  }\n\n  private loadSubscribedStatus () {\n    if (!this.isUserLoggedIn()) return\n\n    for (const videoChannel of this.videoChannels()) {\n      const handle = this.getChannelHandler(videoChannel)\n      this.subscribed.set(handle, false)\n\n      merge(\n        this.userSubscriptionService.listenToSubscriptionCacheChange(handle),\n        this.userSubscriptionService.doesSubscriptionExist(handle)\n      ).subscribe({\n        next: res => {\n          this.subscribed.set(handle, res)\n\n          this.buildClasses()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n    }\n  }\n\n  private buildClasses () {\n    this.buttonClasses = {\n      'peertube-button': true,\n      'primary-button': !this.isAllChannelsSubscribed,\n      'secondary-button': this.isAllChannelsSubscribed\n    }\n  }\n}\n"]}