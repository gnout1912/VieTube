{"version":3,"mappings":"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","names":["PendingCopy","_document","_textarea","constructor","text","textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","readOnly","fullscreenElement","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","destroy","remove","Clipboard","_Clipboard","inject","DOCUMENT","pendingCopy","beginCopy","__publicField","__ngFactoryType__","ɵɵdefineInjectable","token","factory","ɵfac","providedIn","ie","re","o","e","CopyButtonComponent","notifier","Notifier","clipboard","input","undefined","elementContent","title","notification","withBorder","transform","booleanAttribute","isInputGroup","innerText","success","l","selectors","inputs","features","ɵɵProvidersFeature","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","V","ɵɵelementStart","ɵɵlistener","ɵɵelement","ɵɵprojection","ɵɵelementEnd","i","ɵɵproperty","ɵɵpureFunction2","_c1","w","n","dependencies","NgClass","GlobalIconComponent","_CopyButtonComponent","ae","pe","le","ce","ue","a","O","ɵɵrestoreView","_r3","ctx_r3","ɵɵnextContext","ɵɵresetView","toggle","ɵɵtemplate","InputTextComponent_button_3_my_global_icon_1_Template","InputTextComponent_button_3_my_global_icon_2_Template","C","toggleTitle","ɵɵadvance","show","se","ɵɵi18n","P","input_r2","de","ɵɵtext","ɵɵtextInterpolate","formError","InputTextComponent","inputElement","viewChild","inputId","required","model","autocomplete","placeholder","tabindex","withToggle","withCopy","readonly","autofocus","ariaLabel","inputType","ngAfterViewInit","nativeElement","preventScroll","set","propagateChange","_","writeValue","registerOnChange","fn","registerOnTouched","update","viewQuery","L","B","outputs","M","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","i18n_0","$localize","ɵɵtwoWayListener","$event","i0","_r1","ɵɵtwoWayBindingSet","ɵɵreference","InputTextComponent_button_3_Template","InputTextComponent_my_copy_button_4_Template","InputTextComponent_div_5_Template","ɵɵtwoWayProperty","ɵɵpureFunction1","FormsModule","DefaultValueAccessor","NgControlStatus","NgModel","NgIf","_InputTextComponent","oe","je","b"],"ignoreList":[0],"sources":["node_modules/@angular/cdk/fesm2022/clipboard.mjs","src/app/shared/shared-main/buttons/copy-button.component.ts","src/app/shared/shared-main/buttons/copy-button.component.html","src/app/shared/shared-forms/input-text.component.html","src/app/shared/shared-forms/input-text.component.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, Injectable, InjectionToken, NgZone, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n  _document;\n  _textarea;\n  constructor(text, _document) {\n    this._document = _document;\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n    // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n    textarea.readOnly = true;\n    // The element needs to be inserted into the fullscreen container, if the page\n    // is in fullscreen mode, otherwise the browser won't execute the copy command.\n    (this._document.fullscreenElement || this._document.body).appendChild(textarea);\n  }\n  /** Finishes copying the text. */\n  copy() {\n    const textarea = this._textarea;\n    let successful = false;\n    try {\n      // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement;\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n    return successful;\n  }\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n    if (textarea) {\n      textarea.remove();\n      this._textarea = undefined;\n    }\n  }\n}\n\n/**\n * A service for copying text to the clipboard.\n */\nlet Clipboard = /*#__PURE__*/(() => {\n  class Clipboard {\n    _document = inject(DOCUMENT);\n    constructor() {}\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n      const pendingCopy = this.beginCopy(text);\n      const successful = pendingCopy.copy();\n      pendingCopy.destroy();\n      return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n      return new PendingCopy(text, this._document);\n    }\n    static ɵfac = function Clipboard_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Clipboard)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Clipboard,\n      factory: Clipboard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Clipboard;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = /*#__PURE__*/new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nlet CdkCopyToClipboard = /*#__PURE__*/(() => {\n  class CdkCopyToClipboard {\n    _clipboard = inject(Clipboard);\n    _ngZone = inject(NgZone);\n    /** Content to be copied. */\n    text = '';\n    /**\n     * How many times to attempt to copy the text. This may be necessary for longer text, because\n     * the browser needs time to fill an intermediate textarea element and copy the content.\n     */\n    attempts = 1;\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     */\n    copied = new EventEmitter();\n    /** Copies that are currently being attempted. */\n    _pending = new Set();\n    /** Whether the directive has been destroyed. */\n    _destroyed;\n    /** Timeout for the current copy attempt. */\n    _currentTimeout;\n    constructor() {\n      const config = inject(CDK_COPY_TO_CLIPBOARD_CONFIG, {\n        optional: true\n      });\n      if (config && config.attempts != null) {\n        this.attempts = config.attempts;\n      }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n      if (attempts > 1) {\n        let remainingAttempts = attempts;\n        const pending = this._clipboard.beginCopy(this.text);\n        this._pending.add(pending);\n        const attempt = () => {\n          const successful = pending.copy();\n          if (!successful && --remainingAttempts && !this._destroyed) {\n            // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n            this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n          } else {\n            this._currentTimeout = null;\n            this._pending.delete(pending);\n            pending.destroy();\n            this.copied.emit(successful);\n          }\n        };\n        attempt();\n      } else {\n        this.copied.emit(this._clipboard.copy(this.text));\n      }\n    }\n    ngOnDestroy() {\n      if (this._currentTimeout) {\n        clearTimeout(this._currentTimeout);\n      }\n      this._pending.forEach(copy => copy.destroy());\n      this._pending.clear();\n      this._destroyed = true;\n    }\n    static ɵfac = function CdkCopyToClipboard_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkCopyToClipboard)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkCopyToClipboard,\n      selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]],\n      hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() {\n            return ctx.copy();\n          });\n        }\n      },\n      inputs: {\n        text: [0, \"cdkCopyToClipboard\", \"text\"],\n        attempts: [0, \"cdkCopyToClipboardAttempts\", \"attempts\"]\n      },\n      outputs: {\n        copied: \"cdkCopyToClipboardCopied\"\n      }\n    });\n  }\n  return CdkCopyToClipboard;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ClipboardModule = /*#__PURE__*/(() => {\n  class ClipboardModule {\n    static ɵfac = function ClipboardModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ClipboardModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ClipboardModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return ClipboardModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { Clipboard } from '@angular/cdk/clipboard'\nimport { NgClass } from '@angular/common'\nimport { booleanAttribute, Component, inject, input } from '@angular/core'\nimport { Notifier } from '@app/core'\nimport { GlobalIconComponent } from '../../shared-icons/global-icon.component'\n\n@Component({\n  selector: 'my-copy-button',\n  styleUrls: [ './copy-button.component.scss' ],\n  templateUrl: './copy-button.component.html',\n  providers: [ Clipboard ],\n  imports: [ NgClass, GlobalIconComponent ]\n})\nexport class CopyButtonComponent {\n  private notifier = inject(Notifier)\n  private clipboard = inject(Clipboard)\n\n  readonly value = input<string>(undefined)\n  readonly elementContent = input<HTMLElement>(undefined)\n\n  readonly title = input<string>(undefined)\n  readonly notification = input<string>(undefined)\n\n  readonly withBorder = input(false, { transform: booleanAttribute })\n  readonly isInputGroup = input(false, { transform: booleanAttribute })\n\n  copy () {\n    this.clipboard.copy(this.value() || this.elementContent()?.innerText)\n\n    const notification = this.notification()\n    if (notification) this.notifier.success(notification)\n  }\n}\n","<button\n  type=\"button\"\n  class=\"btn copy-button\"\n  (click)=\"copy()\"\n  [attr.title]=\"title()\" [ngClass]=\"{ 'is-input-group': isInputGroup(), 'with-border': withBorder() }\"\n>\n  <my-global-icon iconName=\"copy\"></my-global-icon>\n\n  <ng-content></ng-content>\n</button>\n","<div class=\"input-group\">\n  <input\n    [id]=\"inputId()\" [name]=\"inputId()\" [autocomplete]=\"autocomplete()\" [value]=\"value()\" [placeholder]=\"placeholder()\" [tabindex]=\"tabindex()\"\n    [(ngModel)]=\"value\" (ngModelChange)=\"update()\" [readonly]=\"readonly()\"\n    #input (click)=\"input.select()\" (input)=\"update()\" (change)=\"update()\" [type]=\"inputType\" class=\"form-control\"\n    [ngClass]=\"{ 'input-error': formError() }\"\n    [attr.aria-label]=\"ariaLabel()\"\n  />\n\n  <button *ngIf=\"withToggle()\" (click)=\"toggle()\" type=\"button\" class=\"btn\" [title]=\"toggleTitle\">\n    <my-global-icon *ngIf=\"show()\" iconName=\"eye-open\"></my-global-icon>\n    <my-global-icon *ngIf=\"!show()\" iconName=\"eye-close\"></my-global-icon>\n  </button>\n\n  <my-copy-button\n    *ngIf=\"withCopy()\" [value]=\"input.value\" i18n-notification notification=\"Copied\"\n    [isInputGroup]=\"true\" i18n\n  >\n    COPY\n  </my-copy-button>\n</div>\n\n<div *ngIf=\"formError()\" class=\"form-error\" role=\"alert\">{{ formError() }}</div>\n","import { NgClass, NgIf } from '@angular/common'\nimport { AfterViewInit, Component, ElementRef, forwardRef, input, model, viewChild } from '@angular/core'\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { CopyButtonComponent } from '../shared-main/buttons/copy-button.component'\nimport { FormReactiveErrors } from './form-reactive.service'\n\n@Component({\n  selector: 'my-input-text',\n  templateUrl: './input-text.component.html',\n  styleUrls: [ './input-text.component.scss' ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputTextComponent),\n      multi: true\n    }\n  ],\n  imports: [ FormsModule, NgClass, NgIf, GlobalIconComponent, CopyButtonComponent ]\n})\nexport class InputTextComponent implements ControlValueAccessor, AfterViewInit {\n  readonly inputElement = viewChild<ElementRef>('input')\n\n  readonly inputId = input.required<string>()\n\n  readonly value = model('')\n  readonly autocomplete = input('off')\n  readonly placeholder = input('')\n  readonly tabindex = input(0)\n  readonly withToggle = input(true)\n  readonly withCopy = input(false)\n  readonly readonly = input(false)\n  readonly show = model(false)\n  readonly formError = input<string | FormReactiveErrors | FormReactiveErrors[]>(undefined)\n  readonly autofocus = input(false)\n  readonly ariaLabel = input<string>(undefined)\n\n  get inputType () {\n    return this.show()\n      ? 'text'\n      : 'password'\n  }\n\n  get toggleTitle () {\n    return this.show()\n      ? $localize`Hide`\n      : $localize`Show`\n  }\n\n  ngAfterViewInit () {\n    if (this.autofocus() !== true) return\n\n    this.inputElement().nativeElement.focus({ preventScroll: true })\n  }\n\n  toggle () {\n    this.show.set(!this.show())\n  }\n\n  propagateChange = (_: any) => {\n    // empty\n  }\n\n  writeValue (value: string) {\n    this.value.set(value)\n  }\n\n  registerOnChange (fn: (_: any) => void) {\n    this.propagateChange = fn\n  }\n\n  registerOnTouched () {\n    // Unused\n  }\n\n  update () {\n    this.propagateChange(this.value())\n  }\n\n  focus () {\n    const el: HTMLElement = this.inputElement().nativeElement\n\n    el.focus({ preventScroll: true })\n  }\n}\n"]}