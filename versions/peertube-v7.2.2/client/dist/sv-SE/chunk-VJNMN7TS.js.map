{
  "version": 3,
  "sources": ["src/app/shared/shared-search/search.service.ts", "src/app/shared/shared-search/advanced-search.model.ts"],
  "sourcesContent": ["import { Observable, of } from 'rxjs'\nimport { catchError, map, switchMap } from 'rxjs/operators'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { ComponentPaginationLight, RestExtractor, RestPagination, RestService } from '@app/core'\nimport {\n  ResultList,\n  Video as VideoServerModel,\n  VideoChannel as VideoChannelServerModel,\n  VideoPlaylist as VideoPlaylistServerModel\n} from '@peertube/peertube-models'\nimport { environment } from '../../../environments/environment'\nimport { AdvancedSearch } from './advanced-search.model'\nimport { Video } from '../shared-main/video/video.model'\nimport { VideoChannel } from '../shared-main/channel/video-channel.model'\nimport { VideoService } from '../shared-main/video/video.service'\nimport { VideoChannelService } from '../shared-main/channel/video-channel.service'\nimport { VideoPlaylist } from '../shared-video-playlist/video-playlist.model'\nimport { VideoPlaylistService } from '../shared-video-playlist/video-playlist.service'\n\n@Injectable()\nexport class SearchService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n  private restService = inject(RestService)\n  private videoService = inject(VideoService)\n  private playlistService = inject(VideoPlaylistService)\n\n  static BASE_SEARCH_URL = environment.apiUrl + '/api/v1/search/'\n\n  searchVideos (parameters: {\n    search?: string\n    componentPagination?: ComponentPaginationLight\n    advancedSearch?: AdvancedSearch\n    uuids?: string[]\n    skipCount?: boolean\n  }): Observable<ResultList<Video>> {\n    const { search, uuids, componentPagination, advancedSearch, skipCount } = parameters\n\n    if (advancedSearch?.resultType !== undefined && advancedSearch.resultType !== 'videos') {\n      return of({ total: 0, data: [] })\n    }\n\n    const url = SearchService.BASE_SEARCH_URL + 'videos'\n    let pagination: RestPagination\n\n    if (componentPagination) {\n      pagination = this.restService.componentToRestPagination(componentPagination)\n    }\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination)\n\n    if (search) params = params.append('search', search)\n    if (skipCount === true) params = params.append('skipCount', true)\n    if (uuids) params = this.restService.addArrayParams(params, 'uuids', uuids)\n\n    if (advancedSearch) {\n      const advancedSearchObject = advancedSearch.toVideosAPIObject()\n\n      params = this.restService.addObjectParams(params, advancedSearchObject)\n    }\n\n    params = this.videoService.buildNSFWParams(params, {})\n\n    return this.authHttp\n      .get<ResultList<VideoServerModel>>(url, { params })\n      .pipe(\n        switchMap(res => this.videoService.extractVideos(res)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  searchVideoChannels (parameters: {\n    search?: string\n    advancedSearch?: AdvancedSearch\n    componentPagination?: ComponentPaginationLight\n    handles?: string[]\n  }): Observable<ResultList<VideoChannel>> {\n    const { search, advancedSearch, componentPagination, handles } = parameters\n\n    if (advancedSearch?.resultType !== undefined && advancedSearch.resultType !== 'channels') {\n      return of({ total: 0, data: [] })\n    }\n\n    const url = SearchService.BASE_SEARCH_URL + 'video-channels'\n\n    let pagination: RestPagination\n    if (componentPagination) {\n      pagination = this.restService.componentToRestPagination(componentPagination)\n    }\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination)\n\n    if (search) params = params.append('search', search)\n    if (handles) params = this.restService.addArrayParams(params, 'handles', handles)\n\n    if (advancedSearch) {\n      const advancedSearchObject = advancedSearch.toChannelAPIObject()\n      params = this.restService.addObjectParams(params, advancedSearchObject)\n    }\n\n    return this.authHttp\n      .get<ResultList<VideoChannelServerModel>>(url, { params })\n      .pipe(\n        map(res => VideoChannelService.extractVideoChannels(res)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  searchVideoPlaylists (parameters: {\n    search?: string\n    advancedSearch?: AdvancedSearch\n    componentPagination?: ComponentPaginationLight\n    uuids?: string[]\n  }): Observable<ResultList<VideoPlaylist>> {\n    const { search, advancedSearch, componentPagination, uuids } = parameters\n\n    if (advancedSearch?.resultType !== undefined && advancedSearch.resultType !== 'playlists') {\n      return of({ total: 0, data: [] })\n    }\n\n    const url = SearchService.BASE_SEARCH_URL + 'video-playlists'\n\n    let pagination: RestPagination\n    if (componentPagination) {\n      pagination = this.restService.componentToRestPagination(componentPagination)\n    }\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination)\n\n    if (search) params = params.append('search', search)\n    if (uuids) params = this.restService.addArrayParams(params, 'uuids', uuids)\n\n    if (advancedSearch) {\n      const advancedSearchObject = advancedSearch.toPlaylistAPIObject()\n      params = this.restService.addObjectParams(params, advancedSearchObject)\n    }\n\n    return this.authHttp\n      .get<ResultList<VideoPlaylistServerModel>>(url, { params })\n      .pipe(\n        switchMap(res => this.playlistService.extractPlaylists(res)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n}\n", "import { splitIntoArray } from '@app/helpers'\nimport {\n  BooleanQuery,\n  SearchTargetType,\n  VideoChannelsSearchQuery,\n  VideoPlaylistsSearchQuery,\n  VideosSearchQuery\n} from '@peertube/peertube-models'\n\nexport type AdvancedSearchResultType = 'videos' | 'playlists' | 'channels'\n\nexport class AdvancedSearch {\n  startDate: string // ISO 8601\n  endDate: string // ISO 8601\n\n  originallyPublishedStartDate: string // ISO 8601\n  originallyPublishedEndDate: string // ISO 8601\n\n  categoryOneOf: string\n\n  licenceOneOf: string\n\n  languageOneOf: string\n\n  tagsOneOf: string[]\n  tagsAllOf: string[]\n\n  durationMin: number // seconds\n  durationMax: number // seconds\n\n  isLive: BooleanQuery\n\n  host: string\n\n  sort: string\n\n  searchTarget: SearchTargetType\n  resultType: AdvancedSearchResultType\n\n  excludeAlreadyWatched?: boolean\n\n  constructor (options?: {\n    startDate?: string\n    endDate?: string\n    originallyPublishedStartDate?: string\n    originallyPublishedEndDate?: string\n    categoryOneOf?: string\n    licenceOneOf?: string\n    languageOneOf?: string\n\n    tagsOneOf?: any\n    tagsAllOf?: any\n\n    isLive?: BooleanQuery\n\n    host?: string\n\n    durationMin?: string\n    durationMax?: string\n    sort?: string\n    searchTarget?: SearchTargetType\n    resultType?: AdvancedSearchResultType\n\n    excludeAlreadyWatched?: boolean\n  }) {\n    if (!options) return\n\n    this.startDate = options.startDate || undefined\n    this.endDate = options.endDate || undefined\n    this.originallyPublishedStartDate = options.originallyPublishedStartDate || undefined\n    this.originallyPublishedEndDate = options.originallyPublishedEndDate || undefined\n\n    this.isLive = options.isLive || undefined\n\n    this.categoryOneOf = options.categoryOneOf || undefined\n    this.licenceOneOf = options.licenceOneOf || undefined\n    this.languageOneOf = options.languageOneOf || undefined\n    this.tagsOneOf = splitIntoArray(options.tagsOneOf)\n    this.tagsAllOf = splitIntoArray(options.tagsAllOf)\n    this.durationMin = options.durationMin ? parseInt(options.durationMin, 10) : undefined\n    this.durationMax = options.durationMax ? parseInt(options.durationMax, 10) : undefined\n\n    this.host = options.host || undefined\n\n    this.searchTarget = options.searchTarget || undefined\n\n    this.resultType = options.resultType || undefined\n\n    this.excludeAlreadyWatched = options.excludeAlreadyWatched || undefined\n\n    if (!this.resultType && this.hasVideoFilter()) {\n      this.resultType = 'videos'\n    }\n\n    if (isNaN(this.durationMin)) this.durationMin = undefined\n    if (isNaN(this.durationMax)) this.durationMax = undefined\n\n    this.sort = options.sort || '-match'\n  }\n\n  containsValues () {\n    return this.size() !== 0\n  }\n\n  reset () {\n    this.startDate = undefined\n    this.endDate = undefined\n    this.originallyPublishedStartDate = undefined\n    this.originallyPublishedEndDate = undefined\n    this.categoryOneOf = undefined\n    this.licenceOneOf = undefined\n    this.languageOneOf = undefined\n    this.tagsOneOf = undefined\n    this.tagsAllOf = undefined\n    this.durationMin = undefined\n    this.durationMax = undefined\n    this.isLive = undefined\n    this.host = undefined\n\n    this.sort = '-match'\n  }\n\n  toUrlObject () {\n    return {\n      startDate: this.startDate,\n      endDate: this.endDate,\n      originallyPublishedStartDate: this.originallyPublishedStartDate,\n      originallyPublishedEndDate: this.originallyPublishedEndDate,\n      categoryOneOf: this.categoryOneOf,\n      licenceOneOf: this.licenceOneOf,\n      languageOneOf: this.languageOneOf,\n      tagsOneOf: this.tagsOneOf,\n      tagsAllOf: this.tagsAllOf,\n      durationMin: this.durationMin,\n      durationMax: this.durationMax,\n      isLive: this.isLive,\n      host: this.host,\n      sort: this.sort,\n      searchTarget: this.searchTarget,\n      resultType: this.resultType,\n      excludeAlreadyWatched: this.excludeAlreadyWatched\n    }\n  }\n\n  toVideosAPIObject (): VideosSearchQuery {\n    let isLive: boolean\n    if (this.isLive) isLive = this.isLive === 'true'\n\n    return {\n      startDate: this.startDate,\n      endDate: this.endDate,\n      originallyPublishedStartDate: this.originallyPublishedStartDate,\n      originallyPublishedEndDate: this.originallyPublishedEndDate,\n      categoryOneOf: splitIntoArray(this.categoryOneOf),\n      licenceOneOf: splitIntoArray(this.licenceOneOf),\n      languageOneOf: splitIntoArray(this.languageOneOf),\n      tagsOneOf: this.tagsOneOf,\n      tagsAllOf: this.tagsAllOf,\n      durationMin: this.durationMin,\n      durationMax: this.durationMax,\n      host: this.host,\n      isLive,\n      sort: this.sort,\n      searchTarget: this.searchTarget,\n      excludeAlreadyWatched: this.excludeAlreadyWatched\n    }\n  }\n\n  toPlaylistAPIObject (): VideoPlaylistsSearchQuery {\n    return {\n      host: this.host,\n      searchTarget: this.searchTarget\n    }\n  }\n\n  toChannelAPIObject (): VideoChannelsSearchQuery {\n    return {\n      host: this.host,\n      searchTarget: this.searchTarget\n    }\n  }\n\n  size () {\n    let acc = 0\n\n    if (this.isValidValue(this.startDate) || this.isValidValue(this.endDate)) acc++\n    if (this.isValidValue(this.originallyPublishedStartDate) || this.isValidValue(this.originallyPublishedEndDate)) acc++\n\n    if (this.isValidValue(this.categoryOneOf)) acc++\n    if (this.isValidValue(this.licenceOneOf)) acc++\n    if (this.isValidValue(this.languageOneOf)) acc++\n    if (this.isValidValue(this.tagsOneOf)) acc++\n    if (this.isValidValue(this.tagsAllOf)) acc++\n    if (this.isValidValue(this.durationMin) || this.isValidValue(this.durationMax)) acc++\n    if (this.isValidValue(this.isLive)) acc++\n    if (this.isValidValue(this.host)) acc++\n    if (this.isValidValue(this.resultType)) acc++\n\n    return acc\n  }\n\n  private isValidValue (val: any) {\n    if (val === undefined) return false\n    if (val === '') return false\n    if (Array.isArray(val) && val.length === 0) return false\n\n    return true\n  }\n\n  private hasVideoFilter () {\n    return this.startDate !== undefined ||\n      this.endDate !== undefined ||\n      this.originallyPublishedStartDate !== undefined ||\n      this.originallyPublishedEndDate !== undefined ||\n      this.categoryOneOf !== undefined ||\n      this.licenceOneOf !== undefined ||\n      this.languageOneOf !== undefined ||\n      this.tagsOneOf !== undefined ||\n      this.tagsAllOf !== undefined ||\n      this.durationMin !== undefined ||\n      this.durationMax !== undefined ||\n      this.isLive !== undefined\n  }\n}\n"],
  "mappings": "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",
  "names": ["SearchService", "authHttp", "inject", "HttpClient", "restExtractor", "RestExtractor", "restService", "RestService", "videoService", "VideoService", "playlistService", "VideoPlaylistService", "searchVideos", "parameters", "search", "uuids", "componentPagination", "advancedSearch", "skipCount", "resultType", "undefined", "of", "total", "data", "url", "BASE_SEARCH_URL", "pagination", "componentToRestPagination", "params", "HttpParams", "addRestGetParams", "append", "addArrayParams", "advancedSearchObject", "toVideosAPIObject", "addObjectParams", "buildNSFWParams", "get", "pipe", "switchMap", "res", "extractVideos", "catchError", "err", "handleError", "searchVideoChannels", "handles", "toChannelAPIObject", "map", "VideoChannelService", "extractVideoChannels", "searchVideoPlaylists", "toPlaylistAPIObject", "extractPlaylists", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "_SearchService", "AdvancedSearch", "startDate", "endDate", "originallyPublishedStartDate", "originallyPublishedEndDate", "categoryOneOf", "licenceOneOf", "languageOneOf", "tagsOneOf", "tagsAllOf", "durationMin", "durationMax", "isLive", "host", "sort", "searchTarget", "resultType", "excludeAlreadyWatched", "constructor", "options", "undefined", "splitIntoArray", "parseInt", "hasVideoFilter", "isNaN", "containsValues", "size", "reset", "toUrlObject", "toVideosAPIObject", "toPlaylistAPIObject", "toChannelAPIObject", "acc", "isValidValue", "val", "Array", "isArray", "length"]
}
