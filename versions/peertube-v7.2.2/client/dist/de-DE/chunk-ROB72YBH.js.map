{
  "version": 3,
  "sources": ["src/app/shared/shared-main/users/user-notification.model.ts", "src/app/shared/shared-main/users/user-notification.service.ts"],
  "sourcesContent": ["import { AuthUser } from '@app/core'\nimport { Account } from '@app/shared/shared-main/account/account.model'\nimport { Actor } from '@app/shared/shared-main/account/actor.model'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\nimport {\n  AbuseStateType,\n  ActorInfo,\n  FollowState,\n  PluginType_Type,\n  UserNotification as UserNotificationServer,\n  UserNotificationType,\n  UserNotificationType_Type,\n  UserRight,\n  VideoConstant,\n  VideoInfo\n} from '@peertube/peertube-models'\nimport { logger } from '@root-helpers/logger'\nimport { Video } from '../video/video.model'\n\nexport class UserNotification implements UserNotificationServer {\n  id: number\n  type: UserNotificationType_Type\n  read: boolean\n\n  video?: VideoInfo & {\n    channel: ActorInfo & { avatarUrl?: string }\n  }\n\n  videoImport?: {\n    id: number\n    video?: VideoInfo\n    torrentName?: string\n    magnetUri?: string\n    targetUrl?: string\n  }\n\n  comment?: {\n    id: number\n    threadId: number\n    heldForReview: boolean\n    account: ActorInfo & { avatarUrl?: string }\n    video: VideoInfo\n  }\n\n  abuse?: {\n    id: number\n    state: AbuseStateType\n\n    video?: VideoInfo\n\n    comment?: {\n      threadId: number\n\n      video: VideoInfo\n    }\n\n    account?: ActorInfo\n  }\n\n  videoBlacklist?: {\n    id: number\n    video: VideoInfo\n  }\n\n  account?: ActorInfo & { avatarUrl?: string }\n\n  actorFollow?: {\n    id: number\n    state: FollowState\n    follower: ActorInfo & { avatarUrl?: string }\n    following: {\n      type: 'account' | 'channel' | 'instance'\n      name: string\n      displayName: string\n      host: string\n    }\n  }\n\n  plugin?: {\n    name: string\n    type: PluginType_Type\n    latestVersion: string\n  }\n\n  peertube?: {\n    latestVersion: string\n  }\n\n  registration?: {\n    id: number\n    username: string\n  }\n\n  videoCaption?: {\n    id: number\n    language: VideoConstant<string>\n    video: VideoInfo\n  }\n\n  createdAt: string\n  updatedAt: string\n\n  // Additional fields\n  videoUrl?: string\n  commentUrl?: any[]\n\n  commentReviewUrl?: string\n  commentReviewQueryParams?: { [id: string]: string } = {}\n\n  abuseUrl?: string\n  abuseQueryParams?: { [id: string]: string } = {}\n\n  videoAutoBlacklistUrl?: string\n\n  accountUrl?: string\n\n  registrationsUrl?: string\n\n  videoImportIdentifier?: string\n  videoImportUrl?: string\n\n  instanceFollowUrl?: string\n\n  peertubeVersionLink?: string\n\n  pluginUrl?: string\n  pluginQueryParams?: { [id: string]: string } = {}\n\n  constructor (hash: UserNotificationServer, user: AuthUser) {\n    this.id = hash.id\n    this.type = hash.type\n    this.read = hash.read\n\n    // We assume that some fields exist\n    // To prevent a notification popup crash in case of bug, wrap it inside a try/catch\n    try {\n      this.video = hash.video\n      if (this.video) this.setVideoChannelAvatarUrl(this.video.channel)\n\n      this.videoImport = hash.videoImport\n\n      this.comment = hash.comment\n      if (this.comment) this.setAccountAvatarUrl(this.comment.account)\n\n      this.abuse = hash.abuse\n\n      this.videoBlacklist = hash.videoBlacklist\n\n      this.account = hash.account\n      if (this.account) this.setAccountAvatarUrl(this.account)\n\n      this.actorFollow = hash.actorFollow\n      if (this.actorFollow) this.setAccountAvatarUrl(this.actorFollow.follower)\n\n      this.plugin = hash.plugin\n      this.peertube = hash.peertube\n      this.registration = hash.registration\n\n      this.videoCaption = hash.videoCaption\n\n      this.createdAt = hash.createdAt\n      this.updatedAt = hash.updatedAt\n\n      switch (this.type) {\n        case UserNotificationType.NEW_VIDEO_FROM_SUBSCRIPTION:\n        case UserNotificationType.NEW_LIVE_FROM_SUBSCRIPTION:\n          this.videoUrl = this.buildVideoUrl(this.video)\n          break\n\n        case UserNotificationType.UNBLACKLIST_ON_MY_VIDEO:\n          this.videoUrl = this.buildVideoUrl(this.video)\n          break\n\n        case UserNotificationType.NEW_COMMENT_ON_MY_VIDEO:\n        case UserNotificationType.COMMENT_MENTION:\n          if (!this.comment) break\n          this.accountUrl = this.buildAccountUrl(this.comment.account)\n          this.commentUrl = this.buildCommentUrl(this.comment)\n\n          this.commentReviewUrl = '/my-account/videos/comments'\n          this.commentReviewQueryParams.search = 'heldForReview:true'\n          break\n\n        case UserNotificationType.NEW_ABUSE_FOR_MODERATORS:\n          this.abuseUrl = '/admin/moderation/abuses/list'\n          this.abuseQueryParams.search = '#' + this.abuse.id\n\n          if (this.abuse.video) this.videoUrl = this.buildVideoUrl(this.abuse.video)\n          else if (this.abuse.comment) this.commentUrl = this.buildCommentUrl(this.abuse.comment)\n          else if (this.abuse.account) this.accountUrl = this.buildAccountUrl(this.abuse.account)\n          break\n\n        case UserNotificationType.ABUSE_STATE_CHANGE:\n          this.abuseUrl = '/my-account/abuses'\n          this.abuseQueryParams.search = '#' + this.abuse.id\n          break\n\n        case UserNotificationType.ABUSE_NEW_MESSAGE:\n          this.abuseUrl = user.hasRight(UserRight.MANAGE_ABUSES)\n            ? '/admin/moderation/abuses/list'\n            : '/my-account/abuses'\n          this.abuseQueryParams.search = '#' + this.abuse.id\n          break\n\n        case UserNotificationType.VIDEO_AUTO_BLACKLIST_FOR_MODERATORS:\n          this.videoAutoBlacklistUrl = '/admin/moderation/video-auto-blacklist/list'\n          // Backward compatibility where we did not assign videoBlacklist to this type of notification before\n          if (!this.videoBlacklist) this.videoBlacklist = { id: null, video: this.video }\n\n          this.videoUrl = this.buildVideoUrl(this.videoBlacklist.video)\n          break\n\n        case UserNotificationType.BLACKLIST_ON_MY_VIDEO:\n          this.videoUrl = this.buildVideoUrl(this.videoBlacklist.video)\n          break\n\n        case UserNotificationType.MY_VIDEO_PUBLISHED:\n          this.videoUrl = this.buildVideoUrl(this.video)\n          break\n\n        case UserNotificationType.MY_VIDEO_IMPORT_SUCCESS:\n          this.videoImportUrl = this.buildVideoImportUrl()\n          this.videoImportIdentifier = this.buildVideoImportIdentifier(this.videoImport)\n\n          if (this.videoImport.video) this.videoUrl = this.buildVideoUrl(this.videoImport.video)\n          break\n\n        case UserNotificationType.MY_VIDEO_IMPORT_ERROR:\n          this.videoImportUrl = this.buildVideoImportUrl()\n          this.videoImportIdentifier = this.buildVideoImportIdentifier(this.videoImport)\n          break\n\n        case UserNotificationType.NEW_USER_REGISTRATION:\n          this.accountUrl = this.buildAccountUrl(this.account)\n          break\n\n        case UserNotificationType.NEW_USER_REGISTRATION_REQUEST:\n          this.registrationsUrl = '/admin/moderation/registrations/list'\n          break\n\n        case UserNotificationType.NEW_FOLLOW:\n          this.accountUrl = this.buildAccountUrl(this.actorFollow.follower)\n          break\n\n        case UserNotificationType.NEW_INSTANCE_FOLLOWER:\n          this.instanceFollowUrl = '/admin/settings/follows/followers-list'\n          break\n\n        case UserNotificationType.AUTO_INSTANCE_FOLLOWING:\n          this.instanceFollowUrl = '/admin/settings/follows/following-list'\n          break\n\n        case UserNotificationType.NEW_PEERTUBE_VERSION:\n          this.peertubeVersionLink = 'https://joinpeertube.org/news'\n          break\n\n        case UserNotificationType.NEW_PLUGIN_VERSION:\n          this.pluginUrl = `/admin/settings/plugins/list-installed`\n          this.pluginQueryParams.pluginType = this.plugin.type + ''\n          break\n\n        case UserNotificationType.MY_VIDEO_TRANSCRIPTION_GENERATED:\n          this.videoUrl = this.buildVideoUrl(this.videoCaption.video)\n          break\n\n        case UserNotificationType.MY_VIDEO_STUDIO_EDITION_FINISHED:\n          this.videoUrl = this.buildVideoUrl(this.video)\n          break\n      }\n    } catch (err) {\n      this.type = null\n      logger.error(err)\n    }\n  }\n\n  private buildVideoUrl (video: { uuid: string }) {\n    return Video.buildWatchUrl(video)\n  }\n\n  private buildAccountUrl (account: { name: string, host: string }) {\n    return '/a/' + Actor.CREATE_BY_STRING(account.name, account.host)\n  }\n\n  private buildVideoImportUrl () {\n    return '/my-library/video-imports'\n  }\n\n  private buildVideoImportIdentifier (videoImport: UserNotification['videoImport']) {\n    return videoImport.video?.name || videoImport.targetUrl || videoImport.magnetUri || videoImport.torrentName\n  }\n\n  private buildCommentUrl (comment: { video: { uuid: string }, threadId: number }) {\n    return [ this.buildVideoUrl(comment.video), { threadId: comment.threadId } ]\n  }\n\n  private setAccountAvatarUrl (actor: {\n    avatarUrl?: string\n    avatars: { width: number, fileUrl?: string, url?: string, path: string }[]\n  }) {\n    actor.avatarUrl = VideoChannel.GET_ACTOR_AVATAR_URL(actor, 48) || Account.GET_DEFAULT_AVATAR_URL(48)\n  }\n\n  private setVideoChannelAvatarUrl (actor: {\n    avatarUrl?: string\n    avatars: { width: number, fileUrl?: string, url?: string, path: string }[]\n  }) {\n    actor.avatarUrl = VideoChannel.GET_ACTOR_AVATAR_URL(actor, 48) || VideoChannel.GET_DEFAULT_AVATAR_URL(48)\n  }\n}\n", "import { SortMeta } from 'primeng/api'\nimport { catchError, map, tap } from 'rxjs/operators'\nimport { HttpClient, HttpContext, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { AuthService, ComponentPaginationLight, PeerTubeSocket, RestExtractor, RestService } from '@app/core'\nimport { NGX_LOADING_BAR_IGNORED } from '@ngx-loading-bar/http-client'\nimport { ResultList, UserNotification as UserNotificationServer, UserNotificationSetting } from '@peertube/peertube-models'\nimport { environment } from '../../../../environments/environment'\nimport { UserNotification } from './user-notification.model'\n\n@Injectable()\nexport class UserNotificationService {\n  private authHttp = inject(HttpClient)\n  private auth = inject(AuthService)\n  private restExtractor = inject(RestExtractor)\n  private restService = inject(RestService)\n  private peertubeSocket = inject(PeerTubeSocket)\n\n  static BASE_NOTIFICATIONS_URL = environment.apiUrl + '/api/v1/users/me/notifications'\n  static BASE_NOTIFICATION_SETTINGS = environment.apiUrl + '/api/v1/users/me/notification-settings'\n\n  listMyNotifications (parameters: {\n    pagination: ComponentPaginationLight\n    ignoreLoadingBar?: boolean\n    unread?: boolean\n    sort?: SortMeta\n  }) {\n    const { pagination, ignoreLoadingBar, unread, sort } = parameters\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, this.restService.componentToRestPagination(pagination), sort)\n\n    if (unread) params = params.append('unread', `${unread}`)\n\n    const context = ignoreLoadingBar\n      ? new HttpContext().set(NGX_LOADING_BAR_IGNORED, true)\n      : undefined\n\n    return this.authHttp.get<ResultList<UserNotification>>(UserNotificationService.BASE_NOTIFICATIONS_URL, { params, context })\n      .pipe(\n        map(res => this.restExtractor.applyToResultListData(res, this.formatNotification.bind(this))),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  countUnreadNotifications () {\n    return this.listMyNotifications({ pagination: { currentPage: 1, itemsPerPage: 0 }, ignoreLoadingBar: true, unread: true })\n      .pipe(map(n => n.total))\n  }\n\n  markAsRead (notification: UserNotification) {\n    const url = UserNotificationService.BASE_NOTIFICATIONS_URL + '/read'\n\n    const body = { ids: [ notification.id ] }\n    const context = new HttpContext().set(NGX_LOADING_BAR_IGNORED, true)\n\n    return this.authHttp.post(url, body, { context })\n      .pipe(\n        tap(() => this.peertubeSocket.dispatchNotificationEvent('read')),\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  markAllAsRead () {\n    const url = UserNotificationService.BASE_NOTIFICATIONS_URL + '/read-all'\n    const context = new HttpContext().set(NGX_LOADING_BAR_IGNORED, true)\n\n    return this.authHttp.post(url, {}, { context })\n      .pipe(\n        tap(() => this.peertubeSocket.dispatchNotificationEvent('read-all')),\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  updateNotificationSettings (settings: UserNotificationSetting) {\n    const url = UserNotificationService.BASE_NOTIFICATION_SETTINGS\n\n    return this.authHttp.put(url, settings)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  private formatNotification (notification: UserNotificationServer) {\n    return new UserNotification(notification, this.auth.getUser())\n  }\n}\n"],
  "mappings": "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",
  "names": ["UserNotification", "id", "type", "read", "video", "videoImport", "comment", "abuse", "videoBlacklist", "account", "actorFollow", "plugin", "peertube", "registration", "videoCaption", "createdAt", "updatedAt", "videoUrl", "commentUrl", "commentReviewUrl", "commentReviewQueryParams", "abuseUrl", "abuseQueryParams", "videoAutoBlacklistUrl", "accountUrl", "registrationsUrl", "videoImportIdentifier", "videoImportUrl", "instanceFollowUrl", "peertubeVersionLink", "pluginUrl", "pluginQueryParams", "constructor", "hash", "user", "setVideoChannelAvatarUrl", "channel", "setAccountAvatarUrl", "follower", "UserNotificationType", "NEW_VIDEO_FROM_SUBSCRIPTION", "NEW_LIVE_FROM_SUBSCRIPTION", "buildVideoUrl", "UNBLACKLIST_ON_MY_VIDEO", "NEW_COMMENT_ON_MY_VIDEO", "COMMENT_MENTION", "buildAccountUrl", "buildCommentUrl", "search", "NEW_ABUSE_FOR_MODERATORS", "ABUSE_STATE_CHANGE", "ABUSE_NEW_MESSAGE", "hasRight", "UserRight", "MANAGE_ABUSES", "VIDEO_AUTO_BLACKLIST_FOR_MODERATORS", "BLACKLIST_ON_MY_VIDEO", "MY_VIDEO_PUBLISHED", "MY_VIDEO_IMPORT_SUCCESS", "buildVideoImportUrl", "buildVideoImportIdentifier", "MY_VIDEO_IMPORT_ERROR", "NEW_USER_REGISTRATION", "NEW_USER_REGISTRATION_REQUEST", "NEW_FOLLOW", "NEW_INSTANCE_FOLLOWER", "AUTO_INSTANCE_FOLLOWING", "NEW_PEERTUBE_VERSION", "NEW_PLUGIN_VERSION", "pluginType", "MY_VIDEO_TRANSCRIPTION_GENERATED", "MY_VIDEO_STUDIO_EDITION_FINISHED", "err", "logger", "error", "Video", "buildWatchUrl", "Actor", "CREATE_BY_STRING", "name", "host", "targetUrl", "magnetUri", "torrentName", "threadId", "actor", "avatarUrl", "VideoChannel", "GET_ACTOR_AVATAR_URL", "Account", "GET_DEFAULT_AVATAR_URL", "UserNotificationService", "authHttp", "inject", "HttpClient", "auth", "AuthService", "restExtractor", "RestExtractor", "restService", "RestService", "peertubeSocket", "PeerTubeSocket", "listMyNotifications", "parameters", "pagination", "ignoreLoadingBar", "unread", "sort", "params", "HttpParams", "addRestGetParams", "componentToRestPagination", "append", "context", "HttpContext", "set", "NGX_LOADING_BAR_IGNORED", "undefined", "get", "BASE_NOTIFICATIONS_URL", "pipe", "map", "res", "applyToResultListData", "formatNotification", "bind", "catchError", "err", "handleError", "countUnreadNotifications", "currentPage", "itemsPerPage", "n", "total", "markAsRead", "notification", "url", "body", "ids", "id", "post", "tap", "dispatchNotificationEvent", "markAllAsRead", "updateNotificationSettings", "settings", "BASE_NOTIFICATION_SETTINGS", "put", "UserNotification", "getUser", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "_UserNotificationService"]
}
