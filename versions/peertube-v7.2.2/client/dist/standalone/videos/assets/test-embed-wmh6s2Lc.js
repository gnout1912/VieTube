import{j as b,l as c}from"./jschannel-DkCUG_QY.js";class R{constructor(){this.eventRegistrations={}}bindToChannel(e){for(const s of Object.keys(this.eventRegistrations))e.bind(s,(o,l)=>this.fire(s,l))}registerTypes(e){for(const s of e)this.eventRegistrations[s]={registrations:[]}}fire(e,s){this.eventRegistrations[e].registrations.forEach(o=>o(s))}addListener(e,s){return this.eventRegistrations[e]?(this.eventRegistrations[e].registrations.push(s),!0):(console.warn(`PeerTube: addEventListener(): The event '${e}' is not supported`),!1)}removeListener(e,s){return this.eventRegistrations[e]?(this.eventRegistrations[e].registrations=this.eventRegistrations[e].registrations.filter(o=>o!==s),!0):!1}}const P=["pause","play","playbackStatusUpdate","playbackStatusChange","resolutionUpdate","volumeChange"];class E{constructor(e,s){this.embedElement=e,this.scope=s,this.eventRegistrar=new R,this.eventRegistrar.registerTypes(P),this.constructChannel(),this.prepareToBeReady()}destroy(){this.embedElement.remove()}addEventListener(e,s){return this.eventRegistrar.addListener(e,s)}removeEventListener(e,s){return this.eventRegistrar.removeListener(e,s)}get ready(){return this.readyPromise}async isPlaying(){return this.sendMessage("isPlaying")}async play(){await this.sendMessage("play")}async pause(){await this.sendMessage("pause")}async setVolume(e){await this.sendMessage("setVolume",e)}async getVolume(){return this.sendMessage("getVolume")}async setCaption(e){await this.sendMessage("setCaption",e)}async getCaptions(){return this.sendMessage("getCaptions")}async getCurrentTime(){return this.sendMessage("getCurrentTime")}async seek(e){await this.sendMessage("seek",e)}async setResolution(e){await this.sendMessage("setResolution",e)}async getResolutions(){return this.sendMessage("getResolutions")}async getPlaybackRates(){return this.sendMessage("getPlaybackRates")}async getPlaybackRate(){return this.sendMessage("getPlaybackRate")}async setPlaybackRate(e){await this.sendMessage("setPlaybackRate",e)}async playNextVideo(){await this.sendMessage("playNextVideo")}async playPreviousVideo(){await this.sendMessage("playPreviousVideo")}async getCurrentPosition(){return this.sendMessage("getCurrentPosition")}async setVideoPassword(e){await this.sendMessage("setVideoPassword",e)}async getImageDataUrl(){return this.sendMessage("getImageDataUrl")}constructChannel(){this.channel=b.build({window:this.embedElement.contentWindow,origin:"*",scope:this.scope||"peertube"}),this.eventRegistrar.bindToChannel(this.channel)}prepareToBeReady(){let e,s;this.readyPromise=new Promise((o,l)=>{e=o,s=l}),this.channel.bind("ready",o=>o?e():s()),this.channel.call({method:"isReady",success:o=>o?e():null})}sendMessage(e,s){return new Promise((o,l)=>{this.channel.call({method:e,params:s,success:u=>o(u),error:u=>l(u)})})}}window.PeerTubePlayer=E;window.addEventListener("load",async()=>{const d=window.location.href.split("/"),e=d[d.length-1],s=window.location.pathname.startsWith("/video-playlists/"),o=e.includes("?")?e.split("?")[0]:e,l=document.createElement("iframe");l.src=s?`/video-playlists/embed/${o}?api=1`:`/videos/embed/${o}?api=1&waitPasswordFromEmbedAPI=1`,l.sandbox.add("allow-same-origin","allow-scripts","allow-popups","allow-forms"),document.querySelector("#host").appendChild(l),c.info("Document finished loading.");const r=new E(document.querySelector("iframe"));window.player=r,c.info("Awaiting player ready..."),await r.setVideoPassword("toto"),await r.ready,c.info("Player is ready.");const y=()=>{r.getCurrentPosition().then(t=>{document.getElementById("playlist-position").innerHTML=t+""})};["pause","play","playbackStatusUpdate","playbackStatusChange"].forEach(t=>{r.addEventListener(t,n=>{c.info(`PLAYER: event '${t}' received`,{param:n}),t==="playbackStatusChange"&&s&&y()}),s&&y(),c.info(`PLAYER: now listening for event '${t}'`)});let g=[],p=await r.getPlaybackRate();const h=()=>{const t=document.querySelector("#rate-list");t.innerHTML="",g.forEach(n=>{if(p===n){const a=document.createElement("strong");a.innerText=`${n} (active)`,a.style.display="block",t.appendChild(a)}else{const a=document.createElement("a");a.href="javascript:;",a.innerText=n.toString(),a.addEventListener("click",()=>{r.setPlaybackRate(n),p=n,h()}),a.style.display="block",t.appendChild(a)}})};r.getPlaybackRates().then(t=>{g=t,h()});const m=async()=>{const t=await r.getCaptions(),n=document.querySelector("#caption-list");n.innerHTML="",t.forEach(a=>{if(a.mode==="showing"){const i=document.createElement("strong");i.innerText=`${a.label} (active)`,i.style.display="block",n.appendChild(i)}else{const i=document.createElement("a");i.href="javascript:;",i.innerText=a.label,i.addEventListener("click",()=>{r.setCaption(a.id),m()}),i.style.display="block",n.appendChild(i)}})};m();const v=t=>{const n=document.querySelector("#resolution-list");n.innerHTML="",t.forEach(a=>{if(a.active){const i=document.createElement("strong");i.innerText=`${a.label} (active)`,i.style.display="block",n.appendChild(i)}else{const i=document.createElement("a");i.href="javascript:;",i.innerText=a.label,i.addEventListener("click",()=>{r.setResolution(a.id)}),i.style.display="block",n.appendChild(i)}})};r.getResolutions().then(t=>v(t)),r.addEventListener("resolutionUpdate",t=>v(t));const w=t=>{const n=document.getElementById("volume");n.innerText=t*100+"%"};r.getVolume().then(t=>w(t)),r.addEventListener("volumeChange",t=>w(t)),window.getPlayerStatus=async()=>{try{const t=await r.getCurrentTime(),n=await r.isPlaying()?"playing":"not playing";document.querySelector("#player-status").textContent=n+": "+t+"s"}catch(t){console.error("Cannot get player status",t)}}});
