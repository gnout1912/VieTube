{"version":3,"mappings":"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","names":["InstanceFollowService","authHttp","inject","HttpClient","restService","RestService","restExtractor","RestExtractor","getFollowing","options","pagination","sort","search","state","actorType","params","HttpParams","addRestGetParams","addObjectParams","parseFollowsListFilters","append","get","BASE_APPLICATION_URL","pipe","catchError","res","handleError","getFollowers","follow","hostsOrHandles","body","handles","filter","v","includes","hosts","post","unfollow","followsArg","follows","arrayify","from","concatMap","handle","following","name","host","delete","toArray","err","acceptFollower","follower","rejectFollower","removeFollower","buildFollowsListFilters","title","$localize","children","value","label","parseQueryStringFilter","prefix","__publicField","environment","apiUrl","d","factory","Éµfac","_InstanceFollowService"],"ignoreList":[],"sources":["src/app/shared/shared-instance/instance-follow.service.ts"],"sourcesContent":["import { SortMeta } from 'primeng/api'\nimport { from, Observable } from 'rxjs'\nimport { catchError, concatMap, toArray } from 'rxjs/operators'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, RestPagination, RestService } from '@app/core'\nimport { arrayify } from '@peertube/peertube-core-utils'\nimport { ActivityPubActorType, ActorFollow, FollowState, ResultList, ServerFollowCreate } from '@peertube/peertube-models'\nimport { environment } from '../../../environments/environment'\nimport { AdvancedInputFilter } from '../shared-forms/advanced-input-filter.component'\n\n@Injectable()\nexport class InstanceFollowService {\n  private authHttp = inject(HttpClient)\n  private restService = inject(RestService)\n  private restExtractor = inject(RestExtractor)\n\n  private static BASE_APPLICATION_URL = environment.apiUrl + '/api/v1/server'\n\n  getFollowing (options: {\n    pagination: RestPagination\n    sort?: SortMeta\n    search?: string\n    actorType?: ActivityPubActorType\n    state?: FollowState\n  }): Observable<ResultList<ActorFollow>> {\n    const { pagination, sort, search, state, actorType } = options\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      params = this.restService.addObjectParams(params, this.parseFollowsListFilters(search))\n    }\n\n    if (state) params = params.append('state', state)\n    if (actorType) params = params.append('actorType', actorType)\n\n    return this.authHttp.get<ResultList<ActorFollow>>(InstanceFollowService.BASE_APPLICATION_URL + '/following', { params })\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  getFollowers (options: {\n    pagination: RestPagination\n    sort: SortMeta\n    search?: string\n    actorType?: ActivityPubActorType\n    state?: FollowState\n  }): Observable<ResultList<ActorFollow>> {\n    const { pagination, sort, search, state, actorType } = options\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      params = this.restService.addObjectParams(params, this.parseFollowsListFilters(search))\n    }\n\n    if (state) params = params.append('state', state)\n    if (actorType) params = params.append('actorType', actorType)\n\n    return this.authHttp.get<ResultList<ActorFollow>>(InstanceFollowService.BASE_APPLICATION_URL + '/followers', { params })\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  follow (hostsOrHandles: string[]) {\n    const body: ServerFollowCreate = {\n      handles: hostsOrHandles.filter(v => v.includes('@')),\n      hosts: hostsOrHandles.filter(v => !v.includes('@'))\n    }\n\n    return this.authHttp.post(InstanceFollowService.BASE_APPLICATION_URL + '/following', body)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  unfollow (followsArg: ActorFollow[] | ActorFollow) {\n    const follows = arrayify(followsArg)\n\n    return from(follows)\n      .pipe(\n        concatMap(follow => {\n          const handle = follow.following.name + '@' + follow.following.host\n\n          return this.authHttp.delete(InstanceFollowService.BASE_APPLICATION_URL + '/following/' + handle)\n        }),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  acceptFollower (followsArg: ActorFollow[] | ActorFollow) {\n    const follows = arrayify(followsArg)\n\n    return from(follows)\n      .pipe(\n        concatMap(follow => {\n          const handle = follow.follower.name + '@' + follow.follower.host\n\n          return this.authHttp.post(`${InstanceFollowService.BASE_APPLICATION_URL}/followers/${handle}/accept`, {})\n        }),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  rejectFollower (followsArg: ActorFollow[] | ActorFollow) {\n    const follows = arrayify(followsArg)\n\n    return from(follows)\n      .pipe(\n        concatMap(follow => {\n          const handle = follow.follower.name + '@' + follow.follower.host\n\n          return this.authHttp.post(`${InstanceFollowService.BASE_APPLICATION_URL}/followers/${handle}/reject`, {})\n        }),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  removeFollower (followsArg: ActorFollow[] | ActorFollow) {\n    const follows = arrayify(followsArg)\n\n    return from(follows)\n      .pipe(\n        concatMap(follow => {\n          const handle = follow.follower.name + '@' + follow.follower.host\n\n          return this.authHttp.delete(`${InstanceFollowService.BASE_APPLICATION_URL}/followers/${handle}`)\n        }),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  buildFollowsListFilters (): AdvancedInputFilter[] {\n    return [\n      {\n        title: $localize`Advanced filters`,\n        children: [\n          {\n            value: 'state:accepted',\n            label: $localize`Accepted follows`\n          },\n          {\n            value: 'state:rejected',\n            label: $localize`Rejected follows`\n          },\n          {\n            value: 'state:pending',\n            label: $localize`Pending follows`\n          }\n        ]\n      }\n    ]\n  }\n\n  private parseFollowsListFilters (search: string) {\n    return this.restService.parseQueryStringFilter(search, {\n      state: {\n        prefix: 'state:'\n      }\n    })\n  }\n}\n"]}