{
  "version": 3,
  "sources": ["src/app/shared/shared-video-comment/video-comment.model.ts", "src/app/shared/shared-video-comment/video-comment.service.ts"],
  "sourcesContent": ["import { getBackendHost } from '@app/helpers'\nimport {\n  Account as AccountInterface,\n  VideoCommentForAdminOrUser as VideoCommentForAdminOrUserServerModel,\n  VideoComment as VideoCommentServerModel\n} from '@peertube/peertube-models'\nimport { Actor } from '../shared-main/account/actor.model'\nimport { Video } from '../shared-main/video/video.model'\n\nexport class VideoComment implements VideoCommentServerModel {\n  id: number\n  url: string\n  text: string\n  threadId: number\n  inReplyToCommentId: number\n  videoId: number\n  createdAt: Date | string\n  updatedAt: Date | string\n  deletedAt: Date | string\n  isDeleted: boolean\n  heldForReview: boolean\n  account: AccountInterface\n  totalRepliesFromVideoAuthor: number\n  totalReplies: number\n  by: string\n\n  isLocal: boolean\n\n  constructor (hash: VideoCommentServerModel) {\n    this.id = hash.id\n    this.url = hash.url\n    this.text = hash.text\n    this.threadId = hash.threadId\n    this.inReplyToCommentId = hash.inReplyToCommentId\n    this.videoId = hash.videoId\n    this.createdAt = new Date(hash.createdAt.toString())\n    this.updatedAt = new Date(hash.updatedAt.toString())\n    this.deletedAt = hash.deletedAt ? new Date(hash.deletedAt.toString()) : null\n    this.isDeleted = hash.isDeleted\n    this.heldForReview = hash.heldForReview\n    this.account = hash.account\n    this.totalRepliesFromVideoAuthor = hash.totalRepliesFromVideoAuthor\n    this.totalReplies = hash.totalReplies\n\n    if (this.account) {\n      this.by = Actor.CREATE_BY_STRING(this.account.name, this.account.host)\n\n      this.isLocal = this.account.host.trim() === getBackendHost()\n    }\n  }\n}\n\nexport class VideoCommentForAdminOrUser implements VideoCommentForAdminOrUserServerModel {\n  id: number\n  url: string\n  text: string\n  textHtml: string\n\n  threadId: number\n  inReplyToCommentId: number\n\n  createdAt: Date | string\n  updatedAt: Date | string\n\n  account: AccountInterface & { localUrl?: string }\n  localUrl: string\n\n  video: {\n    id: number\n    uuid: string\n    name: string\n    localUrl: string\n  }\n\n  heldForReview: boolean\n\n  automaticTags: string[]\n\n  by: string\n\n  constructor (hash: VideoCommentForAdminOrUserServerModel, textHtml: string) {\n    this.id = hash.id\n    this.url = hash.url\n    this.text = hash.text\n    this.textHtml = textHtml\n\n    this.heldForReview = hash.heldForReview\n\n    this.threadId = hash.threadId\n    this.inReplyToCommentId = hash.inReplyToCommentId\n\n    this.createdAt = new Date(hash.createdAt.toString())\n    this.updatedAt = new Date(hash.updatedAt.toString())\n\n    this.automaticTags = hash.automaticTags\n\n    this.video = {\n      id: hash.video.id,\n      uuid: hash.video.uuid,\n      name: hash.video.name,\n      localUrl: Video.buildWatchUrl(hash.video)\n    }\n\n    this.localUrl = this.video.localUrl + ';threadId=' + this.threadId\n\n    this.account = hash.account\n\n    if (this.account) {\n      this.by = Actor.CREATE_BY_STRING(this.account.name, this.account.host)\n\n      this.account.localUrl = '/a/' + this.by\n    }\n  }\n}\n", "import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { ComponentPaginationLight, RestExtractor, RestPagination, RestService } from '@app/core'\nimport { objectLineFeedToHtml } from '@app/helpers'\nimport {\n  FeedFormat,\n  ResultList,\n  ThreadsResultList,\n  Video,\n  VideoCommentCreate,\n  VideoCommentForAdminOrUser,\n  VideoComment as VideoCommentServerModel,\n  VideoCommentThreadTree as VideoCommentThreadTreeServerModel\n} from '@peertube/peertube-models'\nimport { SortMeta } from 'primeng/api'\nimport { Observable, from } from 'rxjs'\nimport { catchError, concatMap, map, toArray } from 'rxjs/operators'\nimport { environment } from '../../../environments/environment'\nimport { VideoPasswordService } from '../shared-main/video/video-password.service'\nimport { VideoCommentThreadTree } from './video-comment-thread-tree.model'\nimport { VideoComment } from './video-comment.model'\n\n@Injectable()\nexport class VideoCommentService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n  private restService = inject(RestService)\n\n  static BASE_FEEDS_URL = environment.apiUrl + '/feeds/video-comments.'\n\n  private static BASE_VIDEO_URL = environment.apiUrl + '/api/v1/videos/'\n  private static BASE_ME_URL = environment.apiUrl + '/api/v1/users/me/'\n\n  addCommentThread (videoId: string, comment: VideoCommentCreate, videoPassword?: string) {\n    const headers = VideoPasswordService.buildVideoPasswordHeader(videoPassword)\n    const url = VideoCommentService.BASE_VIDEO_URL + videoId + '/comment-threads'\n    const normalizedComment = objectLineFeedToHtml(comment, 'text')\n\n    return this.authHttp.post<{ comment: VideoCommentServerModel }>(url, normalizedComment, { headers })\n      .pipe(\n        map(data => this.extractVideoComment(data.comment)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  addCommentReply (options: { videoId: string, inReplyToCommentId: number, comment: VideoCommentCreate, videoPassword?: string }) {\n    const { videoId, inReplyToCommentId, comment, videoPassword } = options\n    const headers = VideoPasswordService.buildVideoPasswordHeader(videoPassword)\n    const url = VideoCommentService.BASE_VIDEO_URL + videoId + '/comments/' + inReplyToCommentId\n    const normalizedComment = objectLineFeedToHtml(comment, 'text')\n\n    return this.authHttp.post<{ comment: VideoCommentServerModel }>(url, normalizedComment, { headers })\n      .pipe(\n        map(data => this.extractVideoComment(data.comment)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  // ---------------------------------------------------------------------------\n\n  approveComments (comments: {\n    videoId: number\n    commentId: number\n  }[]) {\n    return from(comments)\n      .pipe(\n        concatMap(({ videoId, commentId }) => {\n          const url = VideoCommentService.BASE_VIDEO_URL + videoId + '/comments/' + commentId + '/approve'\n\n          return this.authHttp.post(url, {})\n            .pipe(catchError(err => this.restExtractor.handleError(err)))\n        }),\n        toArray()\n      )\n  }\n\n  // ---------------------------------------------------------------------------\n\n  listVideoCommentsOfMyVideos (options: {\n    pagination: RestPagination\n    sort: SortMeta\n    search?: string\n  }): Observable<ResultList<VideoCommentForAdminOrUser>> {\n    const { pagination, sort, search } = options\n    const url = VideoCommentService.BASE_ME_URL + 'videos/comments'\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      params = this.buildParamsFromSearch(search, params)\n    }\n\n    return this.authHttp.get<ResultList<VideoCommentForAdminOrUser>>(url, { params })\n      .pipe(\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  listAdminVideoComments (options: {\n    pagination: RestPagination\n    sort: SortMeta\n    search?: string\n  }): Observable<ResultList<VideoCommentForAdminOrUser>> {\n    const { pagination, sort, search } = options\n    const url = VideoCommentService.BASE_VIDEO_URL + 'comments'\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      params = this.buildParamsFromSearch(search, params)\n    }\n\n    return this.authHttp.get<ResultList<VideoCommentForAdminOrUser>>(url, { params })\n      .pipe(\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  // ---------------------------------------------------------------------------\n\n  getVideoCommentThreads (parameters: {\n    videoId: string\n    videoPassword: string\n    componentPagination: ComponentPaginationLight\n    sort: string\n  }): Observable<ThreadsResultList<VideoComment>> {\n    const { videoId, videoPassword, componentPagination, sort } = parameters\n\n    const headers = VideoPasswordService.buildVideoPasswordHeader(videoPassword)\n\n    const pagination = this.restService.componentToRestPagination(componentPagination)\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    const url = VideoCommentService.BASE_VIDEO_URL + videoId + '/comment-threads'\n    return this.authHttp.get<ThreadsResultList<VideoComment>>(url, { params, headers })\n      .pipe(\n        map(result => this.extractVideoComments(result)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  getVideoThreadComments (parameters: {\n    videoId: string\n    threadId: number\n    videoPassword?: string\n  }): Observable<VideoCommentThreadTree> {\n    const { videoId, threadId, videoPassword } = parameters\n    const url = `${VideoCommentService.BASE_VIDEO_URL + videoId}/comment-threads/${threadId}`\n    const headers = VideoPasswordService.buildVideoPasswordHeader(videoPassword)\n\n    return this.authHttp\n      .get<VideoCommentThreadTreeServerModel>(url, { headers })\n      .pipe(\n        map(tree => this.extractVideoCommentTree(tree)),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  // ---------------------------------------------------------------------------\n\n  deleteVideoComment (videoId: number | string, commentId: number) {\n    const url = `${VideoCommentService.BASE_VIDEO_URL + videoId}/comments/${commentId}`\n\n    return this.authHttp\n      .delete(url)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  deleteVideoComments (comments: { videoId: number | string, commentId: number }[]) {\n    return from(comments)\n      .pipe(\n        concatMap(c => this.deleteVideoComment(c.videoId, c.commentId)),\n        toArray()\n      )\n  }\n\n  // ---------------------------------------------------------------------------\n\n  getVideoCommentsFeeds (video: Pick<Video, 'uuid'>) {\n    const feeds = [\n      {\n        format: FeedFormat.RSS,\n        label: 'rss 2.0',\n        url: VideoCommentService.BASE_FEEDS_URL + FeedFormat.RSS.toLowerCase()\n      },\n      {\n        format: FeedFormat.ATOM,\n        label: 'atom 1.0',\n        url: VideoCommentService.BASE_FEEDS_URL + FeedFormat.ATOM.toLowerCase()\n      },\n      {\n        format: FeedFormat.JSON,\n        label: 'json 1.0',\n        url: VideoCommentService.BASE_FEEDS_URL + FeedFormat.JSON.toLowerCase()\n      }\n    ]\n\n    if (video !== undefined) {\n      for (const feed of feeds) {\n        feed.url += '?videoId=' + video.uuid\n      }\n    }\n\n    return feeds\n  }\n\n  private extractVideoComment (videoComment: VideoCommentServerModel) {\n    return new VideoComment(videoComment)\n  }\n\n  private extractVideoComments (result: ThreadsResultList<VideoCommentServerModel>) {\n    const videoCommentsJson = result.data\n    const totalComments = result.total\n    const comments: VideoComment[] = []\n\n    for (const videoCommentJson of videoCommentsJson) {\n      comments.push(new VideoComment(videoCommentJson))\n    }\n\n    return { data: comments, total: totalComments, totalNotDeletedComments: result.totalNotDeletedComments }\n  }\n\n  private extractVideoCommentTree (serverTree: VideoCommentThreadTreeServerModel): VideoCommentThreadTree {\n    if (!serverTree) return null\n\n    const tree = {\n      comment: new VideoComment(serverTree.comment),\n      children: serverTree.children.map(c => this.extractVideoCommentTree(c))\n    }\n\n    const hasDisplayedChildren = tree.children.length === 0\n      ? !tree.comment.isDeleted\n      : tree.children.some(c => c.hasDisplayedChildren)\n\n    return Object.assign(tree, { hasDisplayedChildren })\n  }\n\n  private buildParamsFromSearch (search: string, params: HttpParams) {\n    const filters = this.restService.parseQueryStringFilter(search, {\n      isLocal: {\n        prefix: 'local:',\n        isBoolean: true\n      },\n      onLocalVideo: {\n        prefix: 'localVideo:',\n        isBoolean: true\n      },\n\n      isHeldForReview: {\n        prefix: 'heldForReview:',\n        isBoolean: true\n      },\n\n      autoTagOneOf: {\n        prefix: 'autoTag:',\n        multiple: true\n      },\n\n      searchAccount: { prefix: 'account:' },\n      searchVideo: { prefix: 'video:' }\n    })\n\n    return this.restService.addObjectParams(params, filters)\n  }\n}\n"],
  "mappings": "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",
  "names": ["VideoComment", "id", "url", "text", "threadId", "inReplyToCommentId", "videoId", "createdAt", "updatedAt", "deletedAt", "isDeleted", "heldForReview", "account", "totalRepliesFromVideoAuthor", "totalReplies", "by", "isLocal", "constructor", "hash", "Date", "toString", "Actor", "CREATE_BY_STRING", "name", "host", "trim", "getBackendHost", "VideoCommentForAdminOrUser", "textHtml", "localUrl", "video", "automaticTags", "uuid", "Video", "buildWatchUrl", "VideoCommentService", "authHttp", "inject", "HttpClient", "restExtractor", "RestExtractor", "restService", "RestService", "addCommentThread", "videoId", "comment", "videoPassword", "headers", "VideoPasswordService", "buildVideoPasswordHeader", "url", "BASE_VIDEO_URL", "normalizedComment", "objectLineFeedToHtml", "post", "pipe", "map", "data", "extractVideoComment", "catchError", "err", "handleError", "addCommentReply", "options", "inReplyToCommentId", "approveComments", "comments", "from", "concatMap", "commentId", "toArray", "listVideoCommentsOfMyVideos", "pagination", "sort", "search", "BASE_ME_URL", "params", "HttpParams", "addRestGetParams", "buildParamsFromSearch", "get", "res", "listAdminVideoComments", "getVideoCommentThreads", "parameters", "componentPagination", "componentToRestPagination", "result", "extractVideoComments", "getVideoThreadComments", "threadId", "tree", "extractVideoCommentTree", "deleteVideoComment", "delete", "deleteVideoComments", "c", "getVideoCommentsFeeds", "video", "feeds", "format", "FeedFormat", "RSS", "label", "BASE_FEEDS_URL", "toLowerCase", "ATOM", "JSON", "undefined", "feed", "uuid", "videoComment", "VideoComment", "videoCommentsJson", "totalComments", "total", "videoCommentJson", "push", "totalNotDeletedComments", "serverTree", "children", "hasDisplayedChildren", "length", "isDeleted", "some", "Object", "assign", "filters", "parseQueryStringFilter", "isLocal", "prefix", "isBoolean", "onLocalVideo", "isHeldForReview", "autoTagOneOf", "multiple", "searchAccount", "searchVideo", "addObjectParams", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "_VideoCommentService"]
}
