{"version":3,"mappings":"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","names":["DynamicElementService","injector","inject","Injector","applicationRef","ApplicationRef","createElement","ofComponent","div","document","component","createComponent","environmentInjector","elementInjector","hostElement","loadedPromise","instance","loaded","firstValueFrom","outputToObservable","undefined","injectElement","wrapper","componentRef","hostView","attachView","appendChild","rootNodes","setModel","attributes","changes","key","value","Object","entries","setInput","ngOnChanges","changeDetectorRef","detectChanges","d","factory","ɵfac","_DynamicElementService","ButtonMarkupComponent","theme","input","href","label","blankTarget","channel","getTarget","getClasses","selectors","inputs","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","t","ɵɵproperty","ɵɵsanitizeUrl","ɵɵadvance","ɵɵtextInterpolate","dependencies","NgClass","styles","changeDetection","_ButtonMarkupComponent","we","o","n","ɵɵelement","l","_","ctx_r0","video","user","displayOptions","VideoMiniatureMarkupComponent","auth","AuthService","findInBulk","FindInBulkService","notifier","Notifier","userService","UserService","cd","ChangeDetectorRef","uuid","onlyDisplayTitle","model","output","date","views","by","avatar","privacyLabel","ngOnInit","objectKeysTyped","getAnonymousOrLoggedUser","subscribe","getVideo","pipe","finalize","emit","next","set","markForCheck","error","err","message","outputs","ɵɵtemplate","VideoMiniatureMarkupComponent_my_video_miniature_0_Template","NgIf","VideoMiniatureComponent","_VideoMiniatureMarkupComponent","Le","ɵɵi18n","ɵɵi18nExp","totalVideos","X","ke","descriptionHTML","ɵɵsanitizeHtml","Ne","Ie","ChannelMiniatureMarkupComponent_div_0_span_9_Template","ChannelMiniatureMarkupComponent_div_0_div_10_Template","ChannelMiniatureMarkupComponent_div_0_div_11_Template","getVideoChannelLink","ɵɵtextInterpolate1","displayName","followersCount","displayDescription","displayLatestVideo","ChannelMiniatureMarkupComponent","markdown","MarkdownService","videoService","VideoService","name","getChannel","tap","switchMap","from","textMarkdownToHTML","description","withEmoji","withHtml","html","loadVideosObservable","total","data","nameWithHost","videoOptions","videoChannel","videoPagination","currentPage","itemsPerPage","sort","count","map","nsfwPolicy","listChannelVideos","__spreadProps","__spreadValues","nsfw","nsfwPolicyToParam","i18n_0","$localize","i18n_3","f","ChannelMiniatureMarkupComponent_div_0_Template","ActorAvatarComponent","RouterLink","_ChannelMiniatureMarkupComponent","EmbedMarkupComponent","el","ElementRef","type","responsive","startAt","stopAt","subtitle","autoplay","muted","loop","title","p2p","warningTitle","controlBar","peertubeLink","playlistPosition","nativeElement","innerHTML","buildVideoOrPlaylistEmbed","embedUrl","buildLink","embedTitle","decoratePlaylistLink","url","buildPlaylistEmbedLink","environment","originServerUrl","startTime","timeToInt","stopTime","decorateVideoLink","buildVideoEmbedLink","encapsulation","_EmbedMarkupComponent","xe","actor","size","InstanceAvatarMarkupComponent","server","ServerService","getHTMLConfig","avatars","InstanceAvatarMarkupComponent_my_actor_avatar_0_Template","_InstanceAvatarMarkupComponent","Ue","instanceBannerUrl","InstanceBannerMarkupComponent","maxBy","banners","path","InstanceBannerMarkupComponent_div_0_Template","_InstanceBannerMarkupComponent","Be","playlist","PlaylistMiniatureMarkupComponent","findInBulkService","getPlaylist","PlaylistMiniatureMarkupComponent_my_video_playlist_miniature_0_Template","VideoPlaylistMiniatureComponent","_PlaylistMiniatureMarkupComponent","De","$implicit","e","video_r1","ctx_r1","VideosListMarkupComponent","categoryOneOf","languageOneOf","isLocal","isLive","maxRows","channelHandle","accountHandle","host","videos","limitRowsStyle","getVideosObservable","options","skipCount","obs","listAccountVideos","account","listVideos","VideosListMarkupComponent_div_2_Template","NgStyle","NgFor","_VideosListMarkupComponent","CustomMarkupService","dynamicElementService","angularBuilders","instanceBannerBuilder","instanceAvatarBuilder","buttonBuilder","embedBuilder","videoMiniatureBuilder","playlistMiniatureBuilder","channelMiniatureBuilder","videosListBuilder","htmlBuilders","containerBuilder","customMarkdownRenderer","constructor","text","buildElement","then","rootElement","getCustomMarkdownRenderer","__async","customPageMarkdownToHTML","additionalAllowedTags","getSupportedTags","selector","keys","querySelectorAll","forEach","element","execHTMLBuilder","insertBefore","firstChild","logger","loadedPromises","execAngularBuilder","push","componentsLoaded","Promise","all","concat","dataset","buildBoolean","buildNumber","buildArrayNumber","buildArrayString","onlyLocal","content","root","layoutClass","layout","classList","add","style","justifyContent","width","setAttribute","headerElement","titleElement","innerText","descriptionElement","append","parseInt","split","v","_CustomMarkupService","Oe","a","bn","b"],"ignoreList":[],"sources":["src/app/shared/shared-custom-markup/dynamic-element.service.ts","src/app/shared/shared-custom-markup/peertube-custom-tags/button-markup.component.ts","src/app/shared/shared-custom-markup/peertube-custom-tags/button-markup.component.html","src/app/shared/shared-custom-markup/peertube-custom-tags/video-miniature-markup.component.html","src/app/shared/shared-custom-markup/peertube-custom-tags/video-miniature-markup.component.ts","src/app/shared/shared-custom-markup/peertube-custom-tags/channel-miniature-markup.component.html","src/app/shared/shared-custom-markup/peertube-custom-tags/channel-miniature-markup.component.ts","src/app/shared/shared-custom-markup/peertube-custom-tags/embed-markup.component.ts","src/app/shared/shared-custom-markup/peertube-custom-tags/instance-avatar-markup.component.html","src/app/shared/shared-custom-markup/peertube-custom-tags/instance-avatar-markup.component.ts","src/app/shared/shared-custom-markup/peertube-custom-tags/instance-banner-markup.component.html","src/app/shared/shared-custom-markup/peertube-custom-tags/instance-banner-markup.component.ts","src/app/shared/shared-custom-markup/peertube-custom-tags/playlist-miniature-markup.component.html","src/app/shared/shared-custom-markup/peertube-custom-tags/playlist-miniature-markup.component.ts","src/app/shared/shared-custom-markup/peertube-custom-tags/videos-list-markup.component.html","src/app/shared/shared-custom-markup/peertube-custom-tags/videos-list-markup.component.ts","src/app/shared/shared-custom-markup/custom-markup.service.ts"],"sourcesContent":["import {\n  ApplicationRef,\n  ComponentRef,\n  createComponent,\n  EmbeddedViewRef,\n  inject,\n  Injectable,\n  Injector,\n  InputSignal,\n  OnChanges,\n  SimpleChanges,\n  Type\n} from '@angular/core'\nimport { outputToObservable } from '@angular/core/rxjs-interop'\nimport { firstValueFrom } from 'rxjs'\nimport { CustomMarkupComponent } from './peertube-custom-tags/shared'\n\ntype ComponentInputs<T> = {\n  [P in keyof T]: T[P] extends InputSignal<infer A> ? A : never\n}\n\n@Injectable()\nexport class DynamicElementService {\n  private injector = inject(Injector)\n  private applicationRef = inject(ApplicationRef)\n\n  createElement<T extends CustomMarkupComponent> (ofComponent: Type<T>) {\n    const div = document.createElement('div')\n\n    const component = createComponent(ofComponent, {\n      environmentInjector: this.applicationRef.injector,\n      elementInjector: this.injector,\n      hostElement: div\n    })\n\n    const loadedPromise = component.instance.loaded\n      ? firstValueFrom(outputToObservable(component.instance.loaded))\n      : undefined\n\n    return { component, loadedPromise }\n  }\n\n  injectElement<T> (wrapper: HTMLElement, componentRef: ComponentRef<T>) {\n    const hostView = componentRef.hostView as EmbeddedViewRef<any>\n\n    this.applicationRef.attachView(hostView)\n    wrapper.appendChild(hostView.rootNodes[0])\n  }\n\n  setModel<T> (componentRef: ComponentRef<T>, attributes: Partial<ComponentInputs<T>>) {\n    const changes: SimpleChanges = {}\n\n    for (const [ key, value ] of Object.entries(attributes)) {\n      componentRef.setInput(key, value)\n    }\n\n    const component = componentRef.instance\n    if (typeof (component as unknown as OnChanges).ngOnChanges === 'function') {\n      ;(component as unknown as OnChanges).ngOnChanges(changes)\n    }\n\n    componentRef.changeDetectorRef.detectChanges()\n  }\n}\n","import { ChangeDetectionStrategy, Component, input } from '@angular/core'\nimport { CustomMarkupComponent } from './shared'\nimport { NgClass } from '@angular/common'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\n\n/*\n * Markup component that creates a button\n */\n\n@Component({\n  selector: 'my-button-markup',\n  templateUrl: 'button-markup.component.html',\n  styleUrls: [ 'button-markup.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ NgClass ]\n})\nexport class ButtonMarkupComponent implements CustomMarkupComponent {\n  readonly theme = input<'primary' | 'secondary'>(undefined)\n  readonly href = input<string>(undefined)\n  readonly label = input<string>(undefined)\n  readonly blankTarget = input<boolean>(undefined)\n\n  channel: VideoChannel\n  loaded: undefined\n\n  getTarget () {\n    if (this.blankTarget() === true) return '_blank'\n\n    return ''\n  }\n\n  getClasses () {\n    const additionalClass = this.theme() === 'primary'\n      ? 'primary-button'\n      : 'secondary-button'\n\n    return [ 'peertube-button-link', additionalClass ]\n  }\n}\n","<a [href]=\"href()\" [ngClass]=\"getClasses()\" [target]=\"getTarget()\">{{ label() }}</a>\n","<my-video-miniature\n  *ngIf=\"video()\"\n  [video]=\"video()\" [user]=\"user\" [displayAsRow]=\"false\"\n  [displayVideoActions]=\"true\" [displayOptions]=\"displayOptions\"\n>\n</my-video-miniature>\n","import { NgIf } from '@angular/common'\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, inject, input, model, output } from '@angular/core'\nimport { AuthService, Notifier, User, UserService } from '@app/core'\nimport { Video } from '@app/shared/shared-main/video/video.model'\nimport { FindInBulkService } from '@app/shared/shared-search/find-in-bulk.service'\nimport { objectKeysTyped } from '@peertube/peertube-core-utils'\nimport { finalize } from 'rxjs/operators'\nimport { MiniatureDisplayOptions, VideoMiniatureComponent } from '../../shared-video-miniature/video-miniature.component'\nimport { CustomMarkupComponent } from './shared'\n\n/*\n * Markup component that creates a video miniature only\n */\n\n@Component({\n  selector: 'my-video-miniature-markup',\n  templateUrl: 'video-miniature-markup.component.html',\n  styleUrls: [ 'video-miniature-markup.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ NgIf, VideoMiniatureComponent ]\n})\nexport class VideoMiniatureMarkupComponent implements CustomMarkupComponent, OnInit {\n  private auth = inject(AuthService)\n  private findInBulk = inject(FindInBulkService)\n  private notifier = inject(Notifier)\n  private userService = inject(UserService)\n  private cd = inject(ChangeDetectorRef)\n\n  readonly uuid = input<string>(undefined)\n  readonly onlyDisplayTitle = input<boolean>(undefined)\n  readonly video = model<Video>(undefined)\n\n  readonly loaded = output<boolean>()\n\n  displayOptions: MiniatureDisplayOptions = {\n    date: true,\n    views: true,\n    by: true,\n    avatar: true,\n    privacyLabel: false\n  }\n\n  user: User\n\n  ngOnInit () {\n    if (this.onlyDisplayTitle()) {\n      for (const key of objectKeysTyped(this.displayOptions)) {\n        this.displayOptions[key] = false\n      }\n    }\n\n    this.userService.getAnonymousOrLoggedUser()\n      .subscribe(user => this.user = user)\n\n    if (this.video()) return\n\n    this.findInBulk.getVideo(this.uuid())\n      .pipe(finalize(() => this.loaded.emit(true)))\n      .subscribe({\n        next: video => {\n          this.video.set(video)\n          this.cd.markForCheck()\n        },\n\n        error: err => this.notifier.error($localize`Error in video miniature component: ${err.message}`)\n      })\n  }\n}\n","<div *ngIf=\"channel\" class=\"channel\">\n\n  <div class=\"channel-avatar-row\">\n    <my-actor-avatar [actor]=\"channel\" actorType=\"channel\" [internalHref]=\"getVideoChannelLink()\" i18n-title title=\"See this video channel\" size=\"75\"></my-actor-avatar>\n\n    <h6>\n      <a [routerLink]=\"getVideoChannelLink()\" i18n-title title=\"See this video channel\">\n        {{ channel.displayName }}\n      </a>\n    </h6>\n\n    <div class=\"actor-counters\">\n      <div class=\"followers\" i18n>{channel.followersCount, plural, =1 {1 subscriber} other {{{ channel.followersCount }} subscribers}}</div>\n\n      <span class=\"videos-count\" *ngIf=\"totalVideos !== undefined\" i18n>\n        {totalVideos, plural, =1 {1 videos} other {{{ totalVideos }} videos}}\n      </span>\n    </div>\n\n    <div *ngIf=\"displayDescription()\" class=\"description-html\" [innerHTML]=\"descriptionHTML\"></div>\n  </div>\n\n  <div class=\"video\" *ngIf=\"video && displayLatestVideo()\">\n    <div i18n class=\"video-label\">Latest published video</div>\n\n    <my-video-miniature-markup [video]=\"video\" [onlyDisplayTitle]=\"true\"></my-video-miniature-markup>\n  </div>\n</div>\n","import { from } from 'rxjs'\nimport { finalize, map, switchMap, tap } from 'rxjs/operators'\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, inject, input, output } from '@angular/core'\nimport { MarkdownService, Notifier, UserService } from '@app/core'\nimport { VideoSortField } from '@peertube/peertube-models'\nimport { CustomMarkupComponent } from './shared'\nimport { VideoMiniatureMarkupComponent } from './video-miniature-markup.component'\nimport { RouterLink } from '@angular/router'\nimport { ActorAvatarComponent } from '../../shared-actor-image/actor-avatar.component'\nimport { NgIf } from '@angular/common'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { VideoChannel } from '@app/shared/shared-main/channel/video-channel.model'\nimport { Video } from '@app/shared/shared-main/video/video.model'\nimport { FindInBulkService } from '@app/shared/shared-search/find-in-bulk.service'\n\n/*\n * Markup component that creates a channel miniature only\n */\n\n@Component({\n  selector: 'my-channel-miniature-markup',\n  templateUrl: 'channel-miniature-markup.component.html',\n  styleUrls: [ 'channel-miniature-markup.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ NgIf, ActorAvatarComponent, RouterLink, VideoMiniatureMarkupComponent ]\n})\nexport class ChannelMiniatureMarkupComponent implements CustomMarkupComponent, OnInit {\n  private markdown = inject(MarkdownService)\n  private findInBulk = inject(FindInBulkService)\n  private videoService = inject(VideoService)\n  private userService = inject(UserService)\n  private notifier = inject(Notifier)\n  private cd = inject(ChangeDetectorRef)\n\n  readonly name = input<string>(undefined)\n  readonly displayLatestVideo = input<boolean>(undefined)\n  readonly displayDescription = input<boolean>(undefined)\n\n  readonly loaded = output<boolean>()\n\n  channel: VideoChannel\n  descriptionHTML: string\n  totalVideos: number\n  video: Video\n\n  ngOnInit () {\n    this.findInBulk.getChannel(this.name())\n      .pipe(\n        tap(channel => {\n          this.channel = channel\n        }),\n        switchMap(() =>\n          from(this.markdown.textMarkdownToHTML({\n            markdown: this.channel.description,\n            withEmoji: true,\n            withHtml: true\n          }))\n        ),\n        tap(html => {\n          this.descriptionHTML = html\n        }),\n        switchMap(() => this.loadVideosObservable()),\n        finalize(() => this.loaded.emit(true))\n      ).subscribe({\n        next: ({ total, data }) => {\n          this.totalVideos = total\n          this.video = data[0]\n\n          this.cd.markForCheck()\n        },\n\n        error: err => this.notifier.error($localize`Error in channel miniature component: ${err.message}`)\n      })\n  }\n\n  getVideoChannelLink () {\n    return [ '/c', this.channel.nameWithHost ]\n  }\n\n  private loadVideosObservable () {\n    const videoOptions = {\n      videoChannel: this.channel,\n      videoPagination: {\n        currentPage: 1,\n        itemsPerPage: 1\n      },\n      sort: '-publishedAt' as VideoSortField,\n      count: 1\n    }\n\n    return this.userService.getAnonymousOrLoggedUser()\n      .pipe(\n        map(user => user.nsfwPolicy),\n        switchMap(nsfwPolicy => {\n          return this.videoService.listChannelVideos({ ...videoOptions, nsfw: this.videoService.nsfwPolicyToParam(nsfwPolicy) })\n        })\n      )\n  }\n}\n","import { Component, ElementRef, OnInit, inject, input } from '@angular/core'\nimport {\n  buildPlaylistEmbedLink,\n  buildVideoEmbedLink,\n  decoratePlaylistLink,\n  decorateVideoLink,\n  timeToInt\n} from '@peertube/peertube-core-utils'\nimport { buildVideoOrPlaylistEmbed } from '@root-helpers/video'\nimport { environment } from 'src/environments/environment'\nimport { CustomMarkupComponent } from './shared'\n\n@Component({\n  selector: 'my-embed-markup',\n  template: '',\n  standalone: true\n})\nexport class EmbedMarkupComponent implements CustomMarkupComponent, OnInit {\n  private el = inject(ElementRef)\n\n  readonly uuid = input<string>(undefined)\n  readonly type = input<'video' | 'playlist'>('video')\n  readonly responsive = input<boolean>(undefined)\n  readonly startAt = input<string>(undefined)\n  readonly stopAt = input<string>(undefined)\n  readonly subtitle = input<string>(undefined)\n  readonly autoplay = input<boolean>(undefined)\n  readonly muted = input<boolean>(undefined)\n  readonly loop = input<boolean>(undefined)\n  readonly title = input<boolean>(undefined)\n  readonly p2p = input<boolean>(undefined)\n  readonly warningTitle = input<boolean>(undefined)\n  readonly controlBar = input<boolean>(undefined)\n  readonly peertubeLink = input<boolean>(undefined)\n  readonly playlistPosition = input<number>(undefined)\n\n  loaded: undefined\n\n  ngOnInit () {\n    this.el.nativeElement.innerHTML = buildVideoOrPlaylistEmbed({\n      embedUrl: this.buildLink(),\n      embedTitle: this.uuid(),\n      responsive: this.responsive() ?? false\n    })\n  }\n\n  private buildLink () {\n    if (this.type() === 'playlist') {\n      return decoratePlaylistLink({\n        url: buildPlaylistEmbedLink({ uuid: this.uuid() }, environment.originServerUrl),\n        playlistPosition: this.playlistPosition()\n      })\n    }\n\n    const startTime = this.startAt()\n      ? timeToInt(this.startAt())\n      : undefined\n\n    const stopTime = this.stopAt()\n      ? timeToInt(this.stopAt())\n      : undefined\n\n    return decorateVideoLink({\n      url: buildVideoEmbedLink({ uuid: this.uuid() }, environment.originServerUrl),\n      startTime,\n      stopTime,\n      subtitle: this.subtitle(),\n      loop: this.loop(),\n      autoplay: this.autoplay(),\n      muted: this.muted(),\n      title: this.title(),\n      warningTitle: this.warningTitle(),\n      controlBar: this.controlBar(),\n      peertubeLink: this.peertubeLink(),\n      p2p: this.p2p()\n    })\n  }\n}\n","<my-actor-avatar *ngIf=\"actor\" [actor]=\"actor\" actorType=\"account\" [size]=\"size()\"></my-actor-avatar>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, inject, input } from '@angular/core'\nimport { CustomMarkupComponent } from './shared'\nimport { ActorAvatarInput } from '@app/shared/shared-actor-image/actor-avatar.component'\nimport { ServerService } from '@app/core'\nimport { ActorAvatarComponent } from '../../shared-actor-image/actor-avatar.component'\nimport { NgIf } from '@angular/common'\n\n/*\n * Markup component that creates the img HTML element containing the instance avatar\n */\n\n@Component({\n  selector: 'my-instance-avatar-markup',\n  templateUrl: 'instance-avatar-markup.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ NgIf, ActorAvatarComponent ]\n})\nexport class InstanceAvatarMarkupComponent implements OnInit, CustomMarkupComponent {\n  private cd = inject(ChangeDetectorRef)\n  private server = inject(ServerService)\n\n  readonly size = input<number>(undefined)\n\n  actor: ActorAvatarInput\n  loaded: undefined\n\n  ngOnInit () {\n    const { instance } = this.server.getHTMLConfig()\n\n    this.actor = {\n      avatars: instance.avatars,\n      name: this.server.getHTMLConfig().instance.name\n    }\n\n    this.cd.markForCheck()\n  }\n}\n","<div class=\"banner\" *ngIf=\"instanceBannerUrl\">\n  <img [src]=\"instanceBannerUrl\" alt=\"Instance banner\">\n</div>\n","import { NgIf } from '@angular/common'\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, inject } from '@angular/core'\nimport { ServerService } from '@app/core'\nimport { maxBy } from '@peertube/peertube-core-utils'\nimport { CustomMarkupComponent } from './shared'\n\n/*\n * Markup component that creates the img HTML element containing the instance banner\n */\n\n@Component({\n  selector: 'my-instance-banner-markup',\n  templateUrl: 'instance-banner-markup.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ NgIf ]\n})\nexport class InstanceBannerMarkupComponent implements OnInit, CustomMarkupComponent {\n  private cd = inject(ChangeDetectorRef)\n  private server = inject(ServerService)\n\n  instanceBannerUrl: string\n  loaded: undefined\n\n  ngOnInit () {\n    const { instance } = this.server.getHTMLConfig()\n\n    this.instanceBannerUrl = maxBy(instance.banners, 'width')?.path\n    this.cd.markForCheck()\n  }\n}\n","<my-video-playlist-miniature *ngIf=\"playlist\" [playlist]=\"playlist\">\n</my-video-playlist-miniature>\n","import { finalize } from 'rxjs/operators'\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, inject, input, output } from '@angular/core'\nimport { Notifier } from '@app/core'\nimport { CustomMarkupComponent } from './shared'\nimport { VideoPlaylistMiniatureComponent } from '../../shared-video-playlist/video-playlist-miniature.component'\nimport { NgIf } from '@angular/common'\nimport { FindInBulkService } from '@app/shared/shared-search/find-in-bulk.service'\nimport { MiniatureDisplayOptions } from '@app/shared/shared-video-miniature/video-miniature.component'\nimport { VideoPlaylist } from '@app/shared/shared-video-playlist/video-playlist.model'\n\n/*\n * Markup component that creates a playlist miniature only\n */\n\n@Component({\n  selector: 'my-playlist-miniature-markup',\n  templateUrl: 'playlist-miniature-markup.component.html',\n  styleUrls: [ 'playlist-miniature-markup.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ NgIf, VideoPlaylistMiniatureComponent ]\n})\nexport class PlaylistMiniatureMarkupComponent implements CustomMarkupComponent, OnInit {\n  private findInBulkService = inject(FindInBulkService)\n  private notifier = inject(Notifier)\n  private cd = inject(ChangeDetectorRef)\n\n  readonly uuid = input<string>(undefined)\n\n  readonly loaded = output<boolean>()\n\n  playlist: VideoPlaylist\n\n  displayOptions: MiniatureDisplayOptions = {\n    date: true,\n    views: true,\n    by: true,\n    avatar: true,\n    privacyLabel: false\n  }\n\n  ngOnInit () {\n    this.findInBulkService.getPlaylist(this.uuid())\n      .pipe(finalize(() => this.loaded.emit(true)))\n      .subscribe({\n        next: playlist => {\n          this.playlist = playlist\n          this.cd.markForCheck()\n        },\n\n        error: err => this.notifier.error($localize`Error in playlist miniature component: ${err.message}`)\n      })\n  }\n}\n","<div class=\"root\">\n  <div class=\"videos\" [ngStyle]=\"limitRowsStyle()\">\n\n    <div class=\"video-wrapper\" *ngFor=\"let video of videos\">\n      <my-video-miniature\n        [video]=\"video\" [user]=\"user\" [displayAsRow]=\"false\"\n        [displayVideoActions]=\"true\" [displayOptions]=\"displayOptions\"\n      >\n      </my-video-miniature>\n    </div>\n\n  </div>\n</div>\n","import { NgFor, NgStyle } from '@angular/common'\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, inject, input, output } from '@angular/core'\nimport { AuthService, Notifier, User, UserService } from '@app/core'\nimport { Video } from '@app/shared/shared-main/video/video.model'\nimport { VideoListParams, VideoService } from '@app/shared/shared-main/video/video.service'\nimport { objectKeysTyped } from '@peertube/peertube-core-utils'\nimport { ResultList, VideoSortField } from '@peertube/peertube-models'\nimport { Observable } from 'rxjs'\nimport { finalize, map } from 'rxjs/operators'\nimport { MiniatureDisplayOptions, VideoMiniatureComponent } from '../../shared-video-miniature/video-miniature.component'\nimport { CustomMarkupComponent } from './shared'\n\n/*\n * Markup component list videos depending on criteria\n */\n\n@Component({\n  selector: 'my-videos-list-markup',\n  templateUrl: 'videos-list-markup.component.html',\n  styleUrls: [ 'videos-list-markup.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ NgStyle, NgFor, VideoMiniatureComponent ]\n})\nexport class VideosListMarkupComponent implements CustomMarkupComponent, OnInit {\n  private auth = inject(AuthService)\n  private videoService = inject(VideoService)\n  private notifier = inject(Notifier)\n  private userService = inject(UserService)\n  private cd = inject(ChangeDetectorRef)\n\n  readonly sort = input<string>(undefined)\n  readonly categoryOneOf = input<number[]>(undefined)\n  readonly languageOneOf = input<string[]>(undefined)\n  readonly count = input<number>(undefined)\n  readonly onlyDisplayTitle = input<boolean>(undefined)\n  readonly isLocal = input<boolean>(undefined)\n  readonly isLive = input<boolean>(undefined)\n  readonly maxRows = input<number>(undefined)\n  readonly channelHandle = input<string>(undefined)\n  readonly accountHandle = input<string>(undefined)\n  readonly host = input<string>(undefined)\n\n  readonly loaded = output<boolean>()\n\n  videos: Video[]\n  user: User\n\n  displayOptions: MiniatureDisplayOptions = {\n    date: false,\n    views: true,\n    by: true,\n    avatar: true,\n    privacyLabel: false\n  }\n\n  limitRowsStyle () {\n    if (this.maxRows() <= 0) return {}\n\n    return {\n      'grid-template-rows': `repeat(${this.maxRows()}, 1fr)`,\n      'grid-auto-rows': '0', // Set height to 0 for autogenerated grid rows\n      'overflow-y': 'hidden' // Hide grid items that overflow\n    }\n  }\n\n  ngOnInit () {\n    if (this.onlyDisplayTitle()) {\n      for (const key of objectKeysTyped(this.displayOptions)) {\n        this.displayOptions[key] = false\n      }\n    }\n\n    this.userService.getAnonymousOrLoggedUser()\n      .subscribe(user => this.user = user)\n\n    this.getVideosObservable()\n      .pipe(finalize(() => this.loaded.emit(true)))\n      .subscribe({\n        next: data => {\n          this.videos = data\n          this.cd.markForCheck()\n        },\n\n        error: err => this.notifier.error($localize`Error in videos list component: ${err.message}`)\n      })\n  }\n\n  getVideosObservable () {\n    const options: VideoListParams = {\n      videoPagination: {\n        currentPage: 1,\n        itemsPerPage: this.count()\n      },\n      categoryOneOf: this.categoryOneOf(),\n      languageOneOf: this.languageOneOf(),\n      host: this.host(),\n      isLocal: this.isLocal(),\n      isLive: this.isLive(),\n      sort: this.sort() as VideoSortField,\n      skipCount: true\n    }\n\n    let obs: Observable<ResultList<Video>>\n\n    const channelHandle = this.channelHandle()\n    const accountHandle = this.accountHandle()\n    if (channelHandle) {\n      obs = this.videoService.listChannelVideos({\n        ...options,\n\n        videoChannel: { nameWithHost: channelHandle }\n      })\n    } else if (accountHandle) {\n      obs = this.videoService.listAccountVideos({\n        ...options,\n\n        account: { nameWithHost: accountHandle }\n      })\n    } else {\n      obs = this.videoService.listVideos(options)\n    }\n\n    return obs.pipe(map(({ data }) => data))\n  }\n}\n","import { ComponentRef, Injectable, inject } from '@angular/core'\nimport { MarkdownService } from '@app/core'\nimport {\n  ButtonMarkupData,\n  ChannelMiniatureMarkupData,\n  ContainerMarkupData,\n  EmbedMarkupData,\n  InstanceAvatarMarkupData,\n  PlaylistMiniatureMarkupData,\n  VideoMiniatureMarkupData,\n  VideosListMarkupData\n} from '@peertube/peertube-models'\nimport { logger } from '@root-helpers/logger'\nimport { DynamicElementService } from './dynamic-element.service'\nimport {\n  ButtonMarkupComponent,\n  ChannelMiniatureMarkupComponent,\n  EmbedMarkupComponent,\n  InstanceAvatarMarkupComponent,\n  InstanceBannerMarkupComponent,\n  PlaylistMiniatureMarkupComponent,\n  VideoMiniatureMarkupComponent,\n  VideosListMarkupComponent\n} from './peertube-custom-tags'\nimport { CustomMarkupComponent } from './peertube-custom-tags/shared'\n\ntype AngularBuilderFunction = (el: HTMLElement) => { component: ComponentRef<CustomMarkupComponent>, loadedPromise: Promise<boolean> }\ntype HTMLBuilderFunction = (el: HTMLElement) => HTMLElement\n\n@Injectable()\nexport class CustomMarkupService {\n  private dynamicElementService = inject(DynamicElementService)\n  private markdown = inject(MarkdownService)\n\n  private angularBuilders: { [selector: string]: AngularBuilderFunction } = {\n    'peertube-instance-banner': el => this.instanceBannerBuilder(el),\n    'peertube-instance-avatar': el => this.instanceAvatarBuilder(el),\n    'peertube-button': el => this.buttonBuilder(el),\n    'peertube-video-embed': el => this.embedBuilder(el, 'video'),\n    'peertube-playlist-embed': el => this.embedBuilder(el, 'playlist'),\n    'peertube-video-miniature': el => this.videoMiniatureBuilder(el),\n    'peertube-playlist-miniature': el => this.playlistMiniatureBuilder(el),\n    'peertube-channel-miniature': el => this.channelMiniatureBuilder(el),\n    'peertube-videos-list': el => this.videosListBuilder(el)\n  }\n\n  private htmlBuilders: { [selector: string]: HTMLBuilderFunction } = {\n    'peertube-container': el => this.containerBuilder(el)\n  }\n\n  private customMarkdownRenderer: (text: string) => Promise<HTMLElement>\n\n  constructor () {\n    this.customMarkdownRenderer = (text: string) => {\n      return this.buildElement(text)\n        .then(({ rootElement }) => rootElement)\n    }\n  }\n\n  getCustomMarkdownRenderer () {\n    return this.customMarkdownRenderer\n  }\n\n  async buildElement (text: string) {\n    const html = await this.markdown.customPageMarkdownToHTML({ markdown: text, additionalAllowedTags: this.getSupportedTags() })\n\n    const rootElement = document.createElement('div')\n    rootElement.innerHTML = html\n\n    for (const selector of Object.keys(this.htmlBuilders)) {\n      rootElement.querySelectorAll(selector)\n        .forEach((e: HTMLElement) => {\n          try {\n            const element = this.execHTMLBuilder(selector, e)\n            // Insert as first child\n            e.insertBefore(element, e.firstChild)\n          } catch (err) {\n            logger.error(`Cannot inject component ${selector}`, err)\n          }\n        })\n    }\n\n    const loadedPromises: Promise<boolean>[] = []\n\n    for (const selector of Object.keys(this.angularBuilders)) {\n      rootElement.querySelectorAll(selector)\n        .forEach((e: HTMLElement) => {\n          try {\n            const { component, loadedPromise } = this.execAngularBuilder(selector, e)\n            if (loadedPromise) loadedPromises.push(loadedPromise)\n\n            this.dynamicElementService.injectElement(e, component)\n          } catch (err) {\n            logger.error(`Cannot inject component ${selector}`, err)\n          }\n        })\n    }\n\n    return { rootElement, componentsLoaded: Promise.all(loadedPromises) }\n  }\n\n  private getSupportedTags () {\n    return Object.keys(this.angularBuilders)\n      .concat(Object.keys(this.htmlBuilders))\n  }\n\n  private execHTMLBuilder (selector: string, el: HTMLElement) {\n    return this.htmlBuilders[selector](el)\n  }\n\n  private execAngularBuilder (selector: string, el: HTMLElement) {\n    return this.angularBuilders[selector](el)\n  }\n\n  private embedBuilder (el: HTMLElement, type: 'video' | 'playlist') {\n    const data = el.dataset as EmbedMarkupData\n    const { component, loadedPromise } = this.dynamicElementService.createElement(EmbedMarkupComponent)\n\n    this.dynamicElementService.setModel(component, {\n      uuid: data.uuid,\n      type,\n      responsive: this.buildBoolean(data.responsive),\n      startAt: data.startAt,\n      stopAt: data.stopAt,\n      subtitle: data.subtitle,\n      autoplay: this.buildBoolean(data.autoplay),\n      muted: this.buildBoolean(data.muted),\n      loop: this.buildBoolean(data.loop),\n      title: this.buildBoolean(data.title),\n      p2p: this.buildBoolean(data.p2p),\n      warningTitle: this.buildBoolean(data.warningTitle),\n      controlBar: this.buildBoolean(data.controlBar),\n      peertubeLink: this.buildBoolean(data.peertubeLink),\n      playlistPosition: this.buildNumber(data.playlistPosition)\n    })\n\n    return { component, loadedPromise }\n  }\n\n  private playlistMiniatureBuilder (el: HTMLElement) {\n    const data = el.dataset as PlaylistMiniatureMarkupData\n    const { component, loadedPromise } = this.dynamicElementService.createElement(PlaylistMiniatureMarkupComponent)\n\n    this.dynamicElementService.setModel(component, { uuid: data.uuid })\n\n    return { component, loadedPromise }\n  }\n\n  private channelMiniatureBuilder (el: HTMLElement) {\n    const data = el.dataset as ChannelMiniatureMarkupData\n    const { component, loadedPromise } = this.dynamicElementService.createElement(ChannelMiniatureMarkupComponent)\n\n    const model = {\n      name: data.name,\n      displayLatestVideo: this.buildBoolean(data.displayLatestVideo) ?? true,\n      displayDescription: this.buildBoolean(data.displayDescription) ?? true\n    }\n\n    this.dynamicElementService.setModel(component, model)\n\n    return { component, loadedPromise }\n  }\n\n  private buttonBuilder (el: HTMLElement) {\n    const data = el.dataset as ButtonMarkupData\n    const { component, loadedPromise } = this.dynamicElementService.createElement(ButtonMarkupComponent)\n\n    const model = {\n      theme: data.theme ?? 'primary',\n      href: data.href,\n      label: data.label,\n      blankTarget: this.buildBoolean(data.blankTarget) ?? false\n    }\n    this.dynamicElementService.setModel(component, model)\n\n    return { component, loadedPromise }\n  }\n\n  private instanceBannerBuilder (el: HTMLElement) {\n    const { component, loadedPromise } = this.dynamicElementService.createElement(InstanceBannerMarkupComponent)\n\n    return { component, loadedPromise }\n  }\n\n  private instanceAvatarBuilder (el: HTMLElement) {\n    const data = el.dataset as InstanceAvatarMarkupData\n    const { component, loadedPromise } = this.dynamicElementService.createElement(InstanceAvatarMarkupComponent)\n\n    const model = {\n      size: this.buildNumber(data.size)\n    }\n\n    this.dynamicElementService.setModel(component, model)\n\n    return { component, loadedPromise }\n  }\n\n  private videoMiniatureBuilder (el: HTMLElement) {\n    const data = el.dataset as VideoMiniatureMarkupData\n    const { component, loadedPromise } = this.dynamicElementService.createElement(VideoMiniatureMarkupComponent)\n\n    const model = {\n      uuid: data.uuid,\n      onlyDisplayTitle: this.buildBoolean(data.onlyDisplayTitle) ?? false\n    }\n\n    this.dynamicElementService.setModel(component, model)\n\n    return { component, loadedPromise }\n  }\n\n  private videosListBuilder (el: HTMLElement) {\n    const data = el.dataset as VideosListMarkupData\n    const { component, loadedPromise } = this.dynamicElementService.createElement(VideosListMarkupComponent)\n\n    const model = {\n      onlyDisplayTitle: this.buildBoolean(data.onlyDisplayTitle) ?? false,\n      maxRows: this.buildNumber(data.maxRows) ?? -1,\n\n      sort: data.sort || '-publishedAt',\n      count: this.buildNumber(data.count) || 10,\n\n      categoryOneOf: this.buildArrayNumber(data.categoryOneOf) ?? [],\n      languageOneOf: this.buildArrayString(data.languageOneOf) ?? [],\n\n      accountHandle: data.accountHandle || undefined,\n      channelHandle: data.channelHandle || undefined,\n\n      host: data.host || undefined,\n\n      isLive: this.buildBoolean(data.isLive),\n\n      isLocal: this.buildBoolean(data.onlyLocal) ? true : undefined\n    }\n\n    this.dynamicElementService.setModel(component, model)\n\n    return { component, loadedPromise }\n  }\n\n  private containerBuilder (el: HTMLElement) {\n    const data = el.dataset as ContainerMarkupData\n\n    // Move inner HTML in the new element we'll create\n    const content = el.innerHTML\n    el.innerHTML = ''\n\n    const root = document.createElement('div')\n    root.innerHTML = content\n\n    const layoutClass = data.layout\n      ? 'layout-' + data.layout\n      : 'layout-column'\n\n    root.classList.add('peertube-container', layoutClass)\n\n    root.style.justifyContent = data.justifyContent || 'space-between'\n\n    if (data.width) {\n      root.setAttribute('width', data.width)\n    }\n\n    if (data.title || data.description) {\n      const headerElement = document.createElement('div')\n      headerElement.classList.add('header')\n\n      if (data.title) {\n        const titleElement = document.createElement('h4')\n        titleElement.innerText = data.title\n        headerElement.appendChild(titleElement)\n      }\n\n      if (data.description) {\n        const descriptionElement = document.createElement('div')\n        descriptionElement.innerText = data.description\n        headerElement.append(descriptionElement)\n      }\n\n      root.insertBefore(headerElement, root.firstChild)\n    }\n\n    return root\n  }\n\n  private buildNumber (value: string) {\n    if (!value) return undefined\n\n    return parseInt(value, 10)\n  }\n\n  private buildBoolean (value: string) {\n    if (value === 'true') return true\n    if (value === 'false') return false\n\n    return undefined\n  }\n\n  private buildArrayNumber (value: string) {\n    if (!value) return undefined\n\n    return value.split(',').map(v => parseInt(v, 10))\n  }\n\n  private buildArrayString (value: string) {\n    if (!value) return undefined\n\n    return value.split(',')\n  }\n}\n"]}