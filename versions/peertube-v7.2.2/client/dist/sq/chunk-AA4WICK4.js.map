{"version":3,"mappings":"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","names":["UserAdminService","authHttp","inject","HttpClient","restExtractor","RestExtractor","restService","RestService","serverService","ServerService","addUser","userCreate","post","UserService","BASE_USERS_URL","pipe","catchError","err","handleError","updateUser","userId","userUpdate","put","updateUsers","users","from","concatMap","u","id","toArray","getUsers","parameters","pagination","sort","search","params","HttpParams","addRestGetParams","filters","parseQueryStringFilter","blocked","prefix","isBoolean","addObjectParams","get","switchMap","data","getServerLocale","map","translations","applyToResultListData","formatUser","bind","removeUsers","usersArg","arrayify","delete","banUsers","reason","body","unbanUsers","user","videoQuota","getBytes","videoQuotaUsed","videoQuotaDaily","videoQuotaUsedDaily","Object","assign","role","label","peertubeTranslate","rawVideoQuota","rawVideoQuotaUsed","rawVideoQuotaDaily","rawVideoQuotaUsedDaily","f","factory","ɵfac","_UserAdminService","Ie","ke","s","ze","i","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","a","p","ɵɵadvance","ɵɵtextInterpolate1","ctx_r1","formErrors","we","T","ɵɵi18n","ɵɵlistener","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","hide","ɵɵelement","banUser","ɵɵtemplate","UserBanModalComponent_ng_template_0_div_11_Template","ɵɵi18nExp","getModalTitle","oe","ɵɵproperty","form","ɵɵpureFunction1","_c1","valid","UserBanModalComponent","FormReactive","formReactiveService","FormReactiveService","modalService","NgbModal","notifier","Notifier","userAdminService","blocklistService","BlocklistService","modal","viewChild","userBanned","output","usersToBan","openedModal","modalMessage","ngOnInit","buildForm","USER_BAN_REASON_VALIDATOR","mute","openModal","open","centered","undefined","close","value","observables","push","muteAccounts","forkJoin","subscribe","next","message","Array","isArray","formatICU","count","length","username","success","emit","error","accounts","Account","account","blockAccountByInstance","__ngFactoryType__","selectors","viewQuery","rf","ctx","I","r","t","k","outputs","features","K","decls","vars","consts","e","$localize","o","UserBanModalComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","dependencies","GlobalIconComponent","FormsModule","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","NgClass","NgIf","PeertubeCheckboxComponent","styles","_UserBanModalComponent","Pe","He","Le","ɵɵelementContainerStart","onUserBanned","ee","userActions","ɵɵpureFunction2","buttonSize","placement","container","buttonStyled","UserModerationDropdownComponent","authService","AuthService","confirmService","ConfirmService","bulkService","BulkService","hooks","HooksService","userBanModal","input","prependActions","displayOptions","myAccount","instanceAccount","instanceUser","userChanged","userDeleted","requiresEmailVerification","getConfig","config","signup","ngOnChanges","buildActions","openBanUserModal","unbanUser","__async","confirm","removeUser","setEmailAsVerified","emailVerified","blockAccountByUser","nameWithHost","mutedByUser","unblockAccountByUser","blockServerByUser","host","mutedServerByUser","unblockServerByUser","mutedByInstance","unblockAccountByInstance","blockServerByInstance","mutedServerByInstance","unblockServerByInstance","bulkRemoveCommentsOf","removeCommentsOf","getRouterUserEditLink","isMyUser","getUser","isMyAccount","myAccountModerationActions","buildMyAccountModerationActions","instanceModerationActions","buildInstanceModerationActions","wrapObject","isLoggedIn","class","isHeader","description","isDisplayed","handler","accountName","scope","authUser","instanceActions","userValue","hasRight","UserRight","MANAGE_USERS","canManage","concat","linkBuilder","accountValue","MANAGE_ACCOUNTS_BLOCKLIST","MANAGE_SERVERS_BLOCKLIST","MANAGE_ANY_VIDEO_COMMENT","inputs","Y","template","UserModerationDropdownComponent_ng_container_0_Template","ActionDropdownComponent","encapsulation","_UserModerationDropdownComponent","V","Te","b","Ut","c"],"ignoreList":[],"sources":["src/app/shared/shared-users/user-admin.service.ts","src/app/shared/shared-moderation/user-ban-modal.component.html","src/app/shared/shared-moderation/user-ban-modal.component.ts","src/app/shared/shared-moderation/user-moderation-dropdown.component.html","src/app/shared/shared-moderation/user-moderation-dropdown.component.ts"],"sourcesContent":["import { SortMeta } from 'primeng/api'\nimport { from, Observable } from 'rxjs'\nimport { catchError, concatMap, map, switchMap, toArray } from 'rxjs/operators'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, RestPagination, RestService, ServerService, UserService } from '@app/core'\nimport { getBytes } from '@root-helpers/bytes'\nimport { arrayify, peertubeTranslate } from '@peertube/peertube-core-utils'\nimport { ResultList, User as UserServerModel, UserCreate, UserUpdate } from '@peertube/peertube-models'\n\n@Injectable()\nexport class UserAdminService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n  private restService = inject(RestService)\n  private serverService = inject(ServerService)\n\n  addUser (userCreate: UserCreate) {\n    return this.authHttp.post(UserService.BASE_USERS_URL, userCreate)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  updateUser (userId: number, userUpdate: UserUpdate) {\n    return this.authHttp.put(UserService.BASE_USERS_URL + userId, userUpdate)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  updateUsers (users: UserServerModel[], userUpdate: UserUpdate) {\n    return from(users)\n      .pipe(\n        concatMap(u => this.authHttp.put(UserService.BASE_USERS_URL + u.id, userUpdate)),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  getUsers (parameters: {\n    pagination: RestPagination\n    sort: SortMeta\n    search?: string\n  }): Observable<ResultList<UserServerModel>> {\n    const { pagination, sort, search } = parameters\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (search) {\n      const filters = this.restService.parseQueryStringFilter(search, {\n        blocked: {\n          prefix: 'banned:',\n          isBoolean: true\n        }\n      })\n\n      params = this.restService.addObjectParams(params, filters)\n    }\n\n    return this.authHttp.get<ResultList<UserServerModel>>(UserService.BASE_USERS_URL, { params })\n      .pipe(\n        switchMap(data => {\n          return this.serverService.getServerLocale()\n            .pipe(map(translations => ({ data, translations })))\n        }),\n        map(({ data, translations }) => {\n          return this.restExtractor.applyToResultListData(data, this.formatUser.bind(this), [ translations ])\n        }),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  removeUsers (usersArg: UserServerModel | UserServerModel[]) {\n    const users = arrayify(usersArg)\n\n    return from(users)\n      .pipe(\n        concatMap(u => this.authHttp.delete(UserService.BASE_USERS_URL + u.id)),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  banUsers (usersArg: UserServerModel | UserServerModel[], reason?: string) {\n    const body = reason ? { reason } : {}\n    const users = arrayify(usersArg)\n\n    return from(users)\n      .pipe(\n        concatMap(u => this.authHttp.post(UserService.BASE_USERS_URL + u.id + '/block', body)),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  unbanUsers (usersArg: UserServerModel | UserServerModel[]) {\n    const users = arrayify(usersArg)\n\n    return from(users)\n      .pipe(\n        concatMap(u => this.authHttp.post(UserService.BASE_USERS_URL + u.id + '/unblock', {})),\n        toArray(),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n\n  private formatUser (user: UserServerModel, translations: { [id: string]: string } = {}) {\n    let videoQuota\n    if (user.videoQuota === -1) {\n      videoQuota = '∞'\n    } else {\n      videoQuota = getBytes(user.videoQuota, 0)\n    }\n\n    const videoQuotaUsed = getBytes(user.videoQuotaUsed, 0)\n\n    let videoQuotaDaily: string\n    let videoQuotaUsedDaily: string\n    if (user.videoQuotaDaily === -1) {\n      videoQuotaDaily = '∞'\n      videoQuotaUsedDaily = getBytes(0, 0) + ''\n    } else {\n      videoQuotaDaily = getBytes(user.videoQuotaDaily, 0) + ''\n      videoQuotaUsedDaily = getBytes(user.videoQuotaUsedDaily || 0, 0) + ''\n    }\n\n    return Object.assign(user, {\n      role: {\n        id: user.role.id,\n        label: peertubeTranslate(user.role.label, translations)\n      },\n      videoQuota,\n      videoQuotaUsed,\n      rawVideoQuota: user.videoQuota,\n      rawVideoQuotaUsed: user.videoQuotaUsed,\n      videoQuotaDaily,\n      videoQuotaUsedDaily,\n      rawVideoQuotaDaily: user.videoQuotaDaily,\n      rawVideoQuotaUsedDaily: user.videoQuotaUsedDaily\n    })\n  }\n}\n","<ng-template #modal>\n  <div class=\"modal-header\">\n    <h4 i18n class=\"modal-title\">{{ getModalTitle() }}</h4>\n\n    <button class=\"border-0 p-0\" title=\"Close this modal\" i18n-title (click)=\"hide()\">\n      <my-global-icon iconName=\"cross\"></my-global-icon>\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n    <div class=\"description\" i18n>\n      A banned user will no longer be able to login.\n    </div>\n\n    <form novalidate [formGroup]=\"form\" (ngSubmit)=\"banUser()\">\n      <div class=\"form-group\">\n        <textarea\n          i18n-placeholder placeholder=\"Reason...\" formControlName=\"reason\"\n          class=\"form-control\" [ngClass]=\"{ 'input-error': formErrors['reason'] }\"\n        ></textarea>\n        <div *ngIf=\"formErrors.reason\" class=\"form-error\" role=\"alert\">\n          {{ formErrors.reason }}\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <my-peertube-checkbox\n          inputName=\"banMute\" formControlName=\"mute\"\n          i18n-labelText labelText=\"Mute to also hide videos/comments\"\n        >\n        </my-peertube-checkbox>\n      </div>\n\n      <div class=\"form-group inputs\">\n        <input\n          type=\"button\" role=\"button\" i18n-value value=\"Cancel\" class=\"peertube-button secondary-button\"\n          (click)=\"hide()\" (key.enter)=\"hide()\"\n        >\n\n        <input type=\"submit\" i18n-value [value]=\"getModalTitle()\" class=\"peertube-button primary-button\" [disabled]=\"!form.valid\" />\n      </div>\n    </form>\n  </div>\n\n</ng-template>\n","import { forkJoin } from 'rxjs'\nimport { Component, OnInit, inject, output, viewChild } from '@angular/core'\nimport { Notifier } from '@app/core'\nimport { formatICU } from '@app/helpers'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap/modal/modal-ref'\nimport { User } from '@peertube/peertube-models'\nimport { USER_BAN_REASON_VALIDATOR } from '../form-validators/user-validators'\nimport { Account } from '../shared-main/account/account.model'\nimport { BlocklistService } from './blocklist.service'\nimport { PeertubeCheckboxComponent } from '../shared-forms/peertube-checkbox.component'\nimport { NgClass, NgIf } from '@angular/common'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { UserAdminService } from '../shared-users/user-admin.service'\n\n@Component({\n  selector: 'my-user-ban-modal',\n  templateUrl: './user-ban-modal.component.html',\n  styleUrls: [ './user-ban-modal.component.scss' ],\n  imports: [ GlobalIconComponent, FormsModule, ReactiveFormsModule, NgClass, NgIf, PeertubeCheckboxComponent ]\n})\nexport class UserBanModalComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private modalService = inject(NgbModal)\n  private notifier = inject(Notifier)\n  private userAdminService = inject(UserAdminService)\n  private blocklistService = inject(BlocklistService)\n\n  readonly modal = viewChild<NgbModal>('modal')\n  readonly userBanned = output<User | User[]>()\n\n  private usersToBan: User | User[]\n  private openedModal: NgbModalRef\n  modalMessage = ''\n\n  ngOnInit () {\n    this.buildForm({\n      reason: USER_BAN_REASON_VALIDATOR,\n      mute: null\n    })\n  }\n\n  openModal (user: User | User[]) {\n    this.usersToBan = user\n    this.openedModal = this.modalService.open(this.modal(), { centered: true })\n  }\n\n  hide () {\n    this.usersToBan = undefined\n    this.openedModal.close()\n  }\n\n  banUser () {\n    const reason = this.form.value['reason'] || undefined\n    const mute = this.form.value['mute']\n\n    const observables = [\n      this.userAdminService.banUsers(this.usersToBan, reason)\n    ]\n\n    if (mute) observables.push(this.muteAccounts())\n\n    forkJoin(observables)\n      .subscribe({\n        next: () => {\n          let message: string\n\n          if (Array.isArray(this.usersToBan)) {\n            message = formatICU(\n              $localize`{count, plural, =1 {1 user banned.} other {{count} users banned.}}`,\n              { count: this.usersToBan.length }\n            )\n          } else {\n            message = $localize`User ${this.usersToBan.username} banned.`\n          }\n\n          this.notifier.success(message)\n\n          this.userBanned.emit(this.usersToBan)\n\n          this.hide()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  getModalTitle () {\n    if (Array.isArray(this.usersToBan)) {\n      return formatICU(\n        $localize`Ban {count, plural, =1 {1 user} other {{count} users}}`,\n        { count: this.usersToBan.length }\n      )\n    }\n\n    return $localize`Ban \"${this.usersToBan.username}\"`\n  }\n\n  private muteAccounts () {\n    const accounts = Array.isArray(this.usersToBan)\n      ? this.usersToBan.map(u => new Account(u.account))\n      : new Account(this.usersToBan.account)\n\n    return this.blocklistService.blockAccountByInstance(accounts)\n  }\n}\n","<ng-container *ngIf=\"userActions.length !== 0\">\n  <my-user-ban-modal #userBanModal (userBanned)=\"onUserBanned()\"></my-user-ban-modal>\n\n  <my-action-dropdown\n    [actions]=\"userActions\" [entry]=\"{ user: user(), account: account() }\"\n    [buttonSize]=\"buttonSize()\" [placement]=\"placement()\" [label]=\"label()\"\n    [container]=\"container()\" [buttonStyled]=\"buttonStyled()\"\n  ></my-action-dropdown>\n</ng-container>\n","import { NgIf } from '@angular/common'\nimport { Component, OnChanges, OnInit, inject, input, output, viewChild } from '@angular/core'\nimport { AuthService, ConfirmService, HooksService, Notifier, ServerService } from '@app/core'\nimport { BulkRemoveCommentsOfBody, User, UserRight } from '@peertube/peertube-models'\nimport { Account } from '../shared-main/account/account.model'\nimport { ActionDropdownComponent, DropdownAction } from '../shared-main/buttons/action-dropdown.component'\nimport { UserAdminService } from '../shared-users/user-admin.service'\nimport { BlocklistService } from './blocklist.service'\nimport { BulkService } from './bulk.service'\nimport { UserBanModalComponent } from './user-ban-modal.component'\n\nexport type AccountMutedStatus = Pick<\n  Account,\n  'id' | 'nameWithHost' | 'host' | 'userId' | 'mutedByInstance' | 'mutedByUser' | 'mutedServerByInstance' | 'mutedServerByUser'\n>\n\nexport type UserModerationDisplayType = {\n  myAccount?: boolean\n  instanceAccount?: boolean\n  instanceUser?: boolean\n}\n\n@Component({\n  selector: 'my-user-moderation-dropdown',\n  templateUrl: './user-moderation-dropdown.component.html',\n  imports: [ NgIf, UserBanModalComponent, ActionDropdownComponent ]\n})\nexport class UserModerationDropdownComponent implements OnInit, OnChanges {\n  private authService = inject(AuthService)\n  private notifier = inject(Notifier)\n  private confirmService = inject(ConfirmService)\n  private serverService = inject(ServerService)\n  private userAdminService = inject(UserAdminService)\n  private blocklistService = inject(BlocklistService)\n  private bulkService = inject(BulkService)\n  private hooks = inject(HooksService)\n\n  readonly userBanModal = viewChild<UserBanModalComponent>('userBanModal')\n\n  readonly user = input<User>(undefined)\n  readonly account = input<AccountMutedStatus>(undefined)\n  readonly prependActions = input<DropdownAction<{\n    user: User\n    account: AccountMutedStatus\n  }>[]>(undefined)\n\n  readonly buttonSize = input<'normal' | 'small'>('normal')\n  readonly buttonStyled = input(true)\n  readonly placement = input('right-top right-bottom auto')\n  readonly label = input<string>(undefined)\n  readonly container = input<'body' | undefined>(undefined)\n\n  readonly displayOptions = input<UserModerationDisplayType>({\n    myAccount: true,\n    instanceAccount: true,\n    instanceUser: true\n  })\n\n  readonly userChanged = output()\n  readonly userDeleted = output()\n\n  userActions: DropdownAction<{ user: User, account: AccountMutedStatus }>[][] = []\n\n  requiresEmailVerification = false\n\n  ngOnInit () {\n    this.serverService.getConfig()\n      .subscribe(config => this.requiresEmailVerification = config.signup.requiresEmailVerification)\n  }\n\n  ngOnChanges () {\n    this.buildActions()\n  }\n\n  openBanUserModal (user: User) {\n    if (user.username === 'root') {\n      this.notifier.error($localize`You cannot ban root.`)\n      return\n    }\n\n    this.userBanModal().openModal(user)\n  }\n\n  onUserBanned () {\n    this.userChanged.emit()\n  }\n\n  async unbanUser (user: User) {\n    const res = await this.confirmService.confirm($localize`Do you really want to unban ${user.username}?`, $localize`Unban`)\n    if (res === false) return\n\n    this.userAdminService.unbanUsers(user)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`User ${user.username} unbanned.`)\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  async removeUser (user: User) {\n    if (user.username === 'root') {\n      this.notifier.error($localize`You cannot delete root.`)\n      return\n    }\n\n    const message =\n      // eslint-disable-next-line max-len\n      $localize`If you remove this user, you won't be able to create another user or channel with <strong>${user.username}</strong> username!`\n    const res = await this.confirmService.confirm(message, $localize`Delete ${user.username}`)\n    if (res === false) return\n\n    this.userAdminService.removeUsers(user)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`User ${user.username} deleted.`)\n          this.userDeleted.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  setEmailAsVerified (user: User) {\n    this.userAdminService.updateUser(user.id, { emailVerified: true })\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`User ${user.username} email set as verified`)\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  blockAccountByUser (account: AccountMutedStatus) {\n    this.blocklistService.blockAccountByUser(account)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Account ${account.nameWithHost} muted.`)\n\n          this.account().mutedByUser = true\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  unblockAccountByUser (account: AccountMutedStatus) {\n    this.blocklistService.unblockAccountByUser(account)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Account ${account.nameWithHost} unmuted.`)\n\n          this.account().mutedByUser = false\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  blockServerByUser (host: string) {\n    this.blocklistService.blockServerByUser(host)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`${host} muted.`)\n\n          this.account().mutedServerByUser = true\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  unblockServerByUser (host: string) {\n    this.blocklistService.unblockServerByUser(host)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`${host} unmuted.`)\n\n          this.account().mutedServerByUser = false\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  blockAccountByInstance (account: AccountMutedStatus) {\n    this.blocklistService.blockAccountByInstance(account)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Account ${account.nameWithHost} muted by your platform.`)\n\n          this.account().mutedByInstance = true\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  unblockAccountByInstance (account: AccountMutedStatus) {\n    this.blocklistService.unblockAccountByInstance(account)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Account ${account.nameWithHost} unmuted by your platform.`)\n\n          this.account().mutedByInstance = false\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  blockServerByInstance (host: string) {\n    this.blocklistService.blockServerByInstance(host)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Instance ${host} muted by the instance.`)\n\n          this.account().mutedServerByInstance = true\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  unblockServerByInstance (host: string) {\n    this.blocklistService.unblockServerByInstance(host)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Instance ${host} unmuted by the instance.`)\n\n          this.account().mutedServerByInstance = false\n          this.userChanged.emit()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  async bulkRemoveCommentsOf (body: BulkRemoveCommentsOfBody) {\n    const message = $localize`Are you sure you want to remove all the comments of this account?`\n    const res = await this.confirmService.confirm(message, $localize`Delete account comments`)\n    if (res === false) return\n\n    this.bulkService.removeCommentsOf(body)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Will remove comments of this account (may take several minutes).`)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  getRouterUserEditLink (user: User) {\n    return [ '/admin', 'overview', 'users', 'update', user.id ]\n  }\n\n  private isMyUser (user: User) {\n    return user && this.authService.getUser().id === user.id\n  }\n\n  private isMyAccount (account: AccountMutedStatus) {\n    return account && this.authService.getUser().account.id === account.id\n  }\n\n  private async buildActions () {\n    const userActions: DropdownAction<{ user: User, account: AccountMutedStatus }>[][] = []\n\n    const prependActions = this.prependActions()\n    if (prependActions && prependActions.length !== 0) {\n      userActions.push(prependActions)\n    }\n\n    const myAccountModerationActions = this.buildMyAccountModerationActions()\n    const instanceModerationActions = this.buildInstanceModerationActions()\n\n    if (myAccountModerationActions.length !== 0) userActions.push(myAccountModerationActions)\n    if (instanceModerationActions.length !== 0) userActions.push(instanceModerationActions)\n\n    this.userActions = await this.hooks.wrapObject(userActions, 'moderation', 'filter:user-moderation.actions.create.result')\n  }\n\n  private buildMyAccountModerationActions () {\n    if (!this.account() || !this.displayOptions().myAccount || !this.authService.isLoggedIn()) return []\n\n    const myAccountActions: DropdownAction<{ user: User, account: AccountMutedStatus }>[] = [\n      {\n        label: $localize`My account moderation`,\n        class: [ 'red' ],\n        isHeader: true\n      },\n      {\n        label: $localize`Mute this account`,\n        description: $localize`Hide any content from that user from you.`,\n        isDisplayed: ({ account }) => !this.isMyAccount(account) && account.mutedByUser === false,\n        handler: ({ account }) => this.blockAccountByUser(account)\n      },\n      {\n        label: $localize`Unmute this account`,\n        description: $localize`Show back content from that user for you.`,\n        isDisplayed: ({ account }) => !this.isMyAccount(account) && account.mutedByUser === true,\n        handler: ({ account }) => this.unblockAccountByUser(account)\n      },\n      {\n        label: $localize`Mute the platform`,\n        description: $localize`Hide any content from that platform for you.`,\n        isDisplayed: ({ account }) => !account.userId && account.mutedServerByUser === false,\n        handler: ({ account }) => this.blockServerByUser(account.host)\n      },\n      {\n        label: $localize`Unmute the platform`,\n        description: $localize`Show back content from that platform for you.`,\n        isDisplayed: ({ account }) => !account.userId && account.mutedServerByUser === true,\n        handler: ({ account }) => this.unblockServerByUser(account.host)\n      },\n      {\n        label: $localize`Remove comments from your videos`,\n        description: $localize`Remove comments made by this account on your videos.`,\n        isDisplayed: ({ account }) => !this.isMyAccount(account),\n        handler: ({ account }) => this.bulkRemoveCommentsOf({ accountName: account.nameWithHost, scope: 'my-videos' })\n      }\n    ]\n\n    return myAccountActions\n  }\n\n  private buildInstanceModerationActions () {\n    if (!this.authService.isLoggedIn()) return []\n\n    const authUser = this.authService.getUser()\n\n    let instanceActions: DropdownAction<{ user: User, account: AccountMutedStatus }>[] = []\n\n    const displayOptions = this.displayOptions()\n    const userValue = this.user()\n    if (userValue && displayOptions.instanceUser && authUser.hasRight(UserRight.MANAGE_USERS) && authUser.canManage(userValue)) {\n      instanceActions = instanceActions.concat([\n        {\n          label: $localize`Edit user`,\n          description: $localize`Change quota, role, and more.`,\n          linkBuilder: ({ user }) => this.getRouterUserEditLink(user)\n        },\n        {\n          label: $localize`Delete user`,\n          description: $localize`Videos will be deleted, comments will be tombstoned.`,\n          isDisplayed: ({ user }) => !this.isMyUser(user),\n          handler: ({ user }) => this.removeUser(user)\n        },\n        {\n          label: $localize`Ban`,\n          description: $localize`User won't be able to login anymore, but videos and comments will be kept as is.`,\n          handler: ({ user }) => this.openBanUserModal(user),\n          isDisplayed: ({ user }) => !this.isMyUser(user) && !user.blocked\n        },\n        {\n          label: $localize`Unban user`,\n          description: $localize`Allow the user to login and create videos/comments again`,\n          handler: ({ user }) => this.unbanUser(user),\n          isDisplayed: ({ user }) => !this.isMyUser(user) && user.blocked\n        },\n        {\n          label: $localize`Set Email as Verified`,\n          handler: ({ user }) => this.setEmailAsVerified(user),\n          isDisplayed: ({ user }) => !user.blocked && user.emailVerified !== true\n        }\n      ])\n    }\n\n    // Instance actions on account blocklists\n    const accountValue = this.account()\n    if (accountValue && displayOptions.instanceAccount && authUser.hasRight(UserRight.MANAGE_ACCOUNTS_BLOCKLIST)) {\n      instanceActions = instanceActions.concat([\n        {\n          label: $localize`Mute this account`,\n          description: $localize`Hide any content from that user from you, your platform and its users.`,\n          isDisplayed: ({ account }) => !this.isMyAccount(account) && account.mutedByInstance === false,\n          handler: ({ account }) => this.blockAccountByInstance(account)\n        },\n        {\n          label: $localize`Unmute this account`,\n          description: $localize`Show this user's content to the users of this platform again.`,\n          isDisplayed: ({ account }) => !this.isMyAccount(account) && account.mutedByInstance === true,\n          handler: ({ account }) => this.unblockAccountByInstance(account)\n        }\n      ])\n    }\n\n    // Instance actions on server blocklists\n    if (accountValue && displayOptions.instanceAccount && authUser.hasRight(UserRight.MANAGE_SERVERS_BLOCKLIST)) {\n      instanceActions = instanceActions.concat([\n        {\n          label: $localize`Mute the platform`,\n          description: $localize`Hide any content from that platform from you, your platform and its users.`,\n          isDisplayed: ({ account }) => !account.userId && account.mutedServerByInstance === false,\n          handler: ({ account }) => this.blockServerByInstance(account.host)\n        },\n        {\n          label: $localize`Unmute the platform by your platform`,\n          description: $localize`Show back content from that platform for you, your platform and its users.`,\n          isDisplayed: ({ account }) => !account.userId && account.mutedServerByInstance === true,\n          handler: ({ account }) => this.unblockServerByInstance(account.host)\n        }\n      ])\n    }\n\n    if (accountValue && displayOptions.instanceAccount && authUser.hasRight(UserRight.MANAGE_ANY_VIDEO_COMMENT)) {\n      instanceActions = instanceActions.concat([\n        {\n          label: $localize`Remove comments from your platform`,\n          description: $localize`Remove comments made by this account from your platform.`,\n          isDisplayed: ({ account }) => !this.isMyAccount(account),\n          handler: ({ account }) => this.bulkRemoveCommentsOf({ accountName: account.nameWithHost, scope: 'instance' })\n        }\n      ])\n    }\n\n    if (instanceActions.length === 0) return []\n\n    return [ { label: $localize`Platform moderation`, isHeader: true }, ...instanceActions ]\n  }\n}\n"]}