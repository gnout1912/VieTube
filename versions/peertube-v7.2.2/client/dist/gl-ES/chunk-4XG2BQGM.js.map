{
  "version": 3,
  "sources": ["src/app/shared/shared-main/video/redundancy.service.ts", "src/app/shared/shared-main/video/video-file-token.service.ts"],
  "sourcesContent": ["import { SortMeta } from 'primeng/api'\nimport { concat, Observable } from 'rxjs'\nimport { catchError, toArray } from 'rxjs/operators'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, RestPagination, RestService } from '@app/core'\nimport { ResultList, Video, VideoRedundanciesTarget, VideoRedundancy } from '@peertube/peertube-models'\nimport { environment } from '../../../../environments/environment'\n\n@Injectable()\nexport class RedundancyService {\n  private authHttp = inject(HttpClient)\n  private restService = inject(RestService)\n  private restExtractor = inject(RestExtractor)\n\n  static BASE_REDUNDANCY_URL = environment.apiUrl + '/api/v1/server/redundancy'\n\n  updateRedundancy (host: string, redundancyAllowed: boolean) {\n    const url = RedundancyService.BASE_REDUNDANCY_URL + '/' + host\n\n    const body = { redundancyAllowed }\n\n    return this.authHttp.put(url, body)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  listVideoRedundancies (options: {\n    pagination: RestPagination\n    sort: SortMeta\n    target?: VideoRedundanciesTarget\n  }): Observable<ResultList<VideoRedundancy>> {\n    const { pagination, sort, target } = options\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    if (target) params = params.append('target', target)\n\n    return this.authHttp.get<ResultList<VideoRedundancy>>(RedundancyService.BASE_REDUNDANCY_URL + '/videos', { params })\n      .pipe(\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  addVideoRedundancy (video: Video) {\n    return this.authHttp.post(RedundancyService.BASE_REDUNDANCY_URL + '/videos', { videoId: video.id })\n      .pipe(\n        catchError(res => this.restExtractor.handleError(res))\n      )\n  }\n\n  removeVideoRedundancies (redundancy: VideoRedundancy) {\n    const observables = redundancy.redundancies.streamingPlaylists.map(r => r.id)\n      .map(id => this.removeRedundancy(id))\n\n    return concat(...observables)\n      .pipe(toArray())\n  }\n\n  private removeRedundancy (redundancyId: number) {\n    return this.authHttp.delete(RedundancyService.BASE_REDUNDANCY_URL + '/videos/' + redundancyId)\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n}\n", "import { catchError, map, of, tap } from 'rxjs'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor } from '@app/core'\nimport { VideoToken } from '@peertube/peertube-models'\nimport { VideoService } from './video.service'\nimport { VideoPasswordService } from './video-password.service'\n\n@Injectable()\nexport class VideoFileTokenService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n\n  private readonly store = new Map<string, { token: string, expires: Date }>()\n\n  getVideoFileToken ({ videoUUID, videoPassword }: { videoUUID: string, videoPassword?: string }) {\n    const existing = this.store.get(videoUUID)\n    if (existing) return of(existing)\n\n    return this.createVideoFileToken(videoUUID, videoPassword)\n      .pipe(tap(result => this.store.set(videoUUID, { token: result.token, expires: new Date(result.expires) })))\n  }\n\n  private createVideoFileToken (videoUUID: string, videoPassword?: string) {\n    const headers = VideoPasswordService.buildVideoPasswordHeader(videoPassword)\n\n    return this.authHttp.post<VideoToken>(`${VideoService.BASE_VIDEO_URL}/${videoUUID}/token`, {}, { headers })\n      .pipe(\n        map(({ files }) => files),\n        catchError(err => this.restExtractor.handleError(err))\n      )\n  }\n}\n"],
  "mappings": "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",
  "names": ["RedundancyService", "authHttp", "inject", "HttpClient", "restService", "RestService", "restExtractor", "RestExtractor", "updateRedundancy", "host", "redundancyAllowed", "url", "BASE_REDUNDANCY_URL", "body", "put", "pipe", "catchError", "err", "handleError", "listVideoRedundancies", "options", "pagination", "sort", "target", "params", "HttpParams", "addRestGetParams", "append", "get", "res", "addVideoRedundancy", "video", "post", "videoId", "id", "removeVideoRedundancies", "redundancy", "observables", "redundancies", "streamingPlaylists", "map", "r", "removeRedundancy", "concat", "toArray", "redundancyId", "delete", "__publicField", "environment", "apiUrl", "factory", "\u0275fac", "_RedundancyService", "VideoFileTokenService", "authHttp", "inject", "HttpClient", "restExtractor", "RestExtractor", "store", "Map", "getVideoFileToken", "videoUUID", "videoPassword", "existing", "get", "of", "createVideoFileToken", "pipe", "tap", "result", "set", "token", "expires", "Date", "headers", "VideoPasswordService", "buildVideoPasswordHeader", "post", "VideoService", "BASE_VIDEO_URL", "map", "files", "catchError", "err", "handleError", "factory", "\u0275fac", "_VideoFileTokenService"]
}
