{"version":3,"mappings":"oHAKM,QAAUA,GAAcC,EAAa,CAMzC,MAJoB,IAAIC,QACtB,0GAA0G,EAGzFC,KAAKF,CAAK,CAC/B,EAEM,QAAUG,GAAgBH,EAAa,CAC3C,MAAKA,GAEEA,EAAMI,SAAS,GAAG,EAFN,EAGrB,EAEA,GAAMC,GAA2BC,GAA4B,CAC3D,GAAI,CAACA,EAAQN,MAAO,MAAO,MAE3B,GAAMO,GAAS,GACTC,EAAQC,EAAoBH,EAAQN,KAAK,EAE/C,OAAWU,KAAQF,GACbT,EAAaW,CAAI,IAAM,IACzBH,EAAOI,QAAiBD,CAAI,uBAAe,EAK/C,MAAIH,GAAOK,SAAW,EAAU,KAEzB,CACLP,WAAY,CACVQ,OAAQ,UACRb,MAAOO,EAAOO,KAAK,IAAI,EAAI,KAGjC,GAEMC,EAAoCT,GAA4B,CACpE,GAAI,CAACA,EAAQN,MAAO,MAAO,MAE3B,GAAMO,GAAS,GACTS,EAAQP,EAAoBH,EAAQN,KAAK,EAE/C,OAAWiB,KAAQD,GACbjB,EAAakB,CAAI,IAAM,IAASd,EAAec,CAAI,IAAM,IAC3DV,EAAOI,QAAiBM,CAAI,uBAAe,EAK/C,MAAIV,GAAOK,SAAW,EAAU,KAEzB,CACLG,oBAAqB,CACnBF,OAAQ,UACRb,MAAOO,EAAOO,KAAK,IAAI,EAAI,KAGjC,GAIaI,EAA6C,CACxDC,WAAY,CAAEC,EAAWC,SAAUhB,EAAYiB,CAAM,EACrDC,SAAU,CACRF,mCAAUG,CACVnB,uDAAYmB,CACZF,qDAAQE,GAICC,EAAuD,CAClEN,WAAY,CAAEC,EAAWC,SAAUN,EAAqBO,CAAM,EAC9DC,SAAU,CACRF,mCAAUG,CACVT,+DAAqBS,CACrBF,uDAAQE","names":["validateHost","value","RegExp","test","validateHandle","includes","validHosts","control","errors","hosts","splitAndGetNotEmpty","host","push","length","reason","join","validHostsOrHandles","lines","line","UNIQUE_HOSTS_VALIDATOR","VALIDATORS","Validators","required","unique","MESSAGES","$localize","UNIQUE_HOSTS_OR_HANDLE_VALIDATOR"],"ignoreList":[],"sources":["src/app/shared/form-validators/host-validators.ts"],"sourcesContent":["import { AbstractControl, ValidatorFn, Validators } from '@angular/forms'\nimport { splitAndGetNotEmpty } from '@root-helpers/string'\nimport { BuildFormValidator } from './form-validator.model'\nimport { unique } from './shared/validator-utils'\n\nexport function validateHost (value: string) {\n  // Thanks to http://stackoverflow.com/a/106223\n  const HOST_REGEXP = new RegExp(\n    '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]).)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$'\n  )\n\n  return HOST_REGEXP.test(value)\n}\n\nexport function validateHandle (value: string) {\n  if (!value) return false\n\n  return value.includes('@')\n}\n\nconst validHosts: ValidatorFn = (control: AbstractControl) => {\n  if (!control.value) return null\n\n  const errors = []\n  const hosts = splitAndGetNotEmpty(control.value)\n\n  for (const host of hosts) {\n    if (validateHost(host) === false) {\n      errors.push($localize`${host} is not valid`)\n    }\n  }\n\n  // valid\n  if (errors.length === 0) return null\n\n  return {\n    validHosts: {\n      reason: 'invalid',\n      value: errors.join('. ') + '.'\n    }\n  }\n}\n\nconst validHostsOrHandles: ValidatorFn = (control: AbstractControl) => {\n  if (!control.value) return null\n\n  const errors = []\n  const lines = splitAndGetNotEmpty(control.value)\n\n  for (const line of lines) {\n    if (validateHost(line) === false && validateHandle(line) === false) {\n      errors.push($localize`${line} is not valid`)\n    }\n  }\n\n  // valid\n  if (errors.length === 0) return null\n\n  return {\n    validHostsOrHandles: {\n      reason: 'invalid',\n      value: errors.join('. ') + '.'\n    }\n  }\n}\n\n// ---------------------------------------------------------------------------\n\nexport const UNIQUE_HOSTS_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, validHosts, unique ],\n  MESSAGES: {\n    required: $localize`Domain is required.`,\n    validHosts: $localize`Hosts entered are invalid.`,\n    unique: $localize`Hosts entered contain duplicates.`\n  }\n}\n\nexport const UNIQUE_HOSTS_OR_HANDLE_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, validHostsOrHandles, unique ],\n  MESSAGES: {\n    required: $localize`Domain is required.`,\n    validHostsOrHandles: $localize`Hosts or handles are invalid.`,\n    unique: $localize`Hosts or handles contain duplicates.`\n  }\n}\n"]}