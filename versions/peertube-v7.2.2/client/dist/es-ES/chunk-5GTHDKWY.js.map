{"version":3,"mappings":"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","names":["ɵɵelement","e","n","c","ɵɵadvance","ɵɵproperty","ctx_r1","previewHTML","ɵɵsanitizeHtml","xe","r","ɵɵelementContainer","ve","ɵɵelementStart","ɵɵtemplate","MarkdownTextareaComponent_div_6_ng_container_1_Template","ɵɵelementEnd","D","previewContent_r3","Ee","ɵɵelementContainerStart","ɵɵi18n","h","Te","Se","E","ɵɵlistener","ɵɵrestoreView","_r5","ɵɵnextContext","ɵɵresetView","previewCollapsed","MarkdownTextareaComponent_div_7_button_1_Conditional_2_Template","MarkdownTextareaComponent_div_7_button_1_Conditional_3_Template","N","inputId","ɵɵpureFunction1","_c5","ɵɵconditional","Oe","Re","be","MarkdownTextareaComponent_div_7_button_1_Template","_r4","onMaximizeClick","MarkdownTextareaComponent_div_7_Conditional_3_Template","MarkdownTextareaComponent_div_7_Conditional_4_Template","maximized","disabled","Pe","Ae","ɵɵtwoWayListener","$event","_r6","i0","ɵɵtwoWayBindingSet","MarkdownTextareaComponent_div_8_ng_container_3_Template","t","_c6","truncated","ɵɵtwoWayProperty","ke","ye","Ne","_r7","MarkdownTextareaComponent_Conditional_9_Conditional_0_Conditional_1_Template","MarkdownTextareaComponent_Conditional_9_Conditional_0_Conditional_2_Template","He","ɵɵtext","ɵɵtextInterpolate","formError","De","MarkdownTextareaComponent_Conditional_9_Conditional_0_Template","MarkdownTextareaComponent_Conditional_9_div_1_Template","withShowMoreButton","hasEllipsis","MarkdownTextareaComponent","viewportScroller","inject","ViewportScroller","screenService","ScreenService","markdownService","MarkdownService","previewEl","viewChild","content","model","input","undefined","markdownType","customMarkdownRenderer","debounceTime","markdownVideo","required","dir","withPreview","transform","booleanAttribute","withHtml","withEmoji","monospace","textareaElement","previewElement","contentChanged","Subject","scrollPosition","ngOnInit","pipe","distinctUntilChanged","subscribe","updatePreviews","next","ngOnDestroy","unlockBodyScroll","propagateChange","_","writeValue","description","set","registerOnChange","fn","registerOnTouched","onModelChange","isInTouchScreen","nativeElement","focus","lockBodyScroll","setDisabledState","isDisabled","el","offsetHeight","scrollHeight","getScrollPosition","document","getElementById","classList","add","remove","scrollToPosition","__async","markdownRender","text","html","result","HTMLElement","setTimeout","wrapperElement","innerHTML","appendChild","textMarkdownToHTML","markdown","enhancedMarkdownToHTML","markdownToUnsafeHTML","processVideoTimestamps","shortUUID","k","selectors","viewQuery","rf","ctx","P","i","pe","ue","ge","o","j","inputs","outputs","features","Q","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","i18n_0","$localize","MarkdownTextareaComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","_r1","MarkdownTextareaComponent_div_6_Template","MarkdownTextareaComponent_div_7_Template","MarkdownTextareaComponent_div_8_Template","MarkdownTextareaComponent_Conditional_9_Template","ɵɵpureFunction2","_c3","_c4","dependencies","CommonModule","NgClass","NgIf","NgTemplateOutlet","FormsModule","DefaultValueAccessor","NgControlStatus","NgModel","NgbCollapseModule","NgbCollapse","GlobalIconComponent","styles","_MarkdownTextareaComponent","Qe","a"],"ignoreList":[],"sources":["src/app/shared/shared-forms/markdown-textarea.component.html","src/app/shared/shared-forms/markdown-textarea.component.ts"],"sourcesContent":["<ng-template #previewContent>\n  <div #previewElement></div>\n  <div [innerHTML]=\"previewHTML\"></div>\n</ng-template>\n\n<div class=\"root\" [ngClass]=\"{ 'maximized': maximized, monospace: monospace() }\">\n\n  <textarea #textarea\n    [(ngModel)]=\"content\" (ngModelChange)=\"onModelChange()\"\n    [ngClass]=\"{ 'input-error': formError() }\"\n    [attr.disabled]=\"disabled || null\"\n    [id]=\"inputId()\" [name]=\"inputId()\" [dir]=\"dir()\">\n  </textarea>\n\n  <div *ngIf=\"maximized\" class=\"preview-maximized muted-2\">\n    <ng-container *ngTemplateOutlet=\"previewContent\"></ng-container>\n  </div>\n\n  <div *ngIf=\"withPreview()\" class=\"buttons mt-3\">\n    <button\n      *ngIf=\"!maximized\"\n      type=\"button\" class=\"peertube-button secondary-button\" (click)=\"previewCollapsed = !previewCollapsed\"\n\t\t  [attr.aria-expanded]=\"!previewCollapsed\" [attr.aria-controls]=\"inputId() + '-collapse'\"\n    >\n      <my-global-icon iconName=\"arrow-down\" [ngClass]=\"{ 'scale-y--1': !previewCollapsed }\"></my-global-icon>\n\n      @if (previewCollapsed) {\n        <ng-container i18n>Show preview</ng-container>\n      } @else {\n        <ng-container i18n>Hide preview</ng-container>\n      }\n    </button>\n\n    <button type=\"button\" (click)=\"onMaximizeClick()\" class=\"maximize-button button-as-link\" [disabled]=\"disabled\">\n      @if (maximized) {\n        <ng-container i18n>Exit full-screen editor</ng-container>\n      } @else {\n        <ng-container i18n>Full-screen editor</ng-container>\n      }\n    </button>\n  </div>\n\n  <div\n    *ngIf=\"!maximized\" class=\"preview-collapse preview mt-3 muted-2\"\n    [ngClass]=\"{ 'ellipsis-multiline-3': truncated }\"\n    #collapse=\"ngbCollapse\" [(ngbCollapse)]=\"previewCollapsed\" [id]=\"inputId() + '-collapse'\" #previewEl\n  >\n    <ng-container *ngTemplateOutlet=\"previewContent\"></ng-container>\n  </div>\n</div>\n\n@if (!maximized) {\n  @if (withShowMoreButton() && (!truncated || hasEllipsis())) {\n    <button type=\"button\" (click)=\"truncated = !truncated\" class=\"button-unstyle show-more-toggle\">\n      @if (truncated) {\n        <ng-container i18n>Show more</ng-container>\n        <span class=\"chevron-down\"></span>\n      } @else {\n        <ng-container i18n>Show less</ng-container>\n        <span class=\"chevron-up\"></span>\n      }\n    </button>\n  }\n\n  <div *ngIf=\"formError()\" class=\"form-error\" role=\"alert\">{{ formError() }}</div>\n}\n","import { CommonModule, ViewportScroller } from '@angular/common'\nimport { booleanAttribute, Component, ElementRef, forwardRef, inject, input, model, OnDestroy, OnInit, viewChild } from '@angular/core'\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms'\nimport { SafeHtml } from '@angular/platform-browser'\nimport { MarkdownService, ScreenService } from '@app/core'\nimport { NgbCollapseModule } from '@ng-bootstrap/ng-bootstrap'\nimport { Video } from '@peertube/peertube-models'\nimport { Subject } from 'rxjs'\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { FormReactiveErrors } from './form-reactive.service'\n\n@Component({\n  selector: 'my-markdown-textarea',\n  templateUrl: './markdown-textarea.component.html',\n  styleUrls: [ './markdown-textarea.component.scss' ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MarkdownTextareaComponent),\n      multi: true\n    }\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgbCollapseModule,\n    GlobalIconComponent\n  ]\n})\nexport class MarkdownTextareaComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  private viewportScroller = inject(ViewportScroller)\n  private screenService = inject(ScreenService)\n  private markdownService = inject(MarkdownService)\n\n  readonly previewEl = viewChild<ElementRef<HTMLElement>>('previewEl')\n\n  readonly content = model('')\n\n  readonly formError = input<string | FormReactiveErrors | FormReactiveErrors[]>(undefined)\n\n  readonly markdownType = input<'text' | 'enhanced' | 'to-unsafe-html'>('text')\n  readonly customMarkdownRenderer = input<(text: string) => Promise<string | HTMLElement>>(undefined)\n\n  readonly debounceTime = input(150)\n\n  readonly markdownVideo = input<Pick<Video, 'shortUUID'>>(undefined)\n\n  readonly inputId = input.required<string>()\n\n  readonly dir = input<string>(undefined)\n\n  readonly withPreview = input(true, { transform: booleanAttribute })\n  readonly withHtml = input(false, { transform: booleanAttribute })\n  readonly withEmoji = input(false, { transform: booleanAttribute })\n  readonly withShowMoreButton = input(false, { transform: booleanAttribute })\n\n  readonly monospace = input(false, { transform: booleanAttribute })\n\n  readonly textareaElement = viewChild<ElementRef>('textarea')\n  readonly previewElement = viewChild<ElementRef>('previewElement')\n\n  previewHTML: SafeHtml | string = ''\n\n  maximized = false\n  disabled = false\n  previewCollapsed = true\n  truncated = false\n\n  private contentChanged = new Subject<string>()\n  private scrollPosition: [number, number]\n\n  ngOnInit () {\n    this.contentChanged\n      .pipe(\n        debounceTime(this.debounceTime()),\n        distinctUntilChanged()\n      )\n      .subscribe(() => this.updatePreviews())\n\n    this.contentChanged.next(this.content())\n\n    this.truncated = this.withShowMoreButton()\n  }\n\n  ngOnDestroy () {\n    this.unlockBodyScroll()\n  }\n\n  propagateChange = (_: any) => {\n    // empty\n  }\n\n  writeValue (description: string) {\n    this.content.set(description)\n\n    this.contentChanged.next(this.content())\n  }\n\n  registerOnChange (fn: (_: any) => void) {\n    this.propagateChange = fn\n  }\n\n  registerOnTouched () {\n    // Unused\n  }\n\n  onModelChange () {\n    const content = this.content()\n    this.propagateChange(content)\n\n    this.contentChanged.next(content)\n  }\n\n  onMaximizeClick () {\n    if (this.disabled) return\n\n    this.maximized = !this.maximized\n\n    // Make sure textarea have the focus\n    // Except on touchscreens devices, the virtual keyboard may move up and hide the textarea in maximized mode\n    if (!this.screenService.isInTouchScreen()) {\n      this.textareaElement().nativeElement.focus()\n    }\n\n    // Make sure the window has no scrollbars\n    if (!this.maximized) {\n      this.unlockBodyScroll()\n    } else {\n      this.lockBodyScroll()\n    }\n  }\n\n  setDisabledState (isDisabled: boolean) {\n    this.disabled = isDisabled\n  }\n\n  hasEllipsis () {\n    const el = this.previewEl()?.nativeElement\n    if (!el) return false\n\n    return el.offsetHeight < el.scrollHeight\n  }\n\n  private lockBodyScroll () {\n    this.scrollPosition = this.viewportScroller.getScrollPosition()\n    document.getElementById('content').classList.add('lock-scroll')\n  }\n\n  private unlockBodyScroll () {\n    document.getElementById('content').classList.remove('lock-scroll')\n\n    if (this.scrollPosition) {\n      this.viewportScroller.scrollToPosition(this.scrollPosition)\n    }\n  }\n\n  private async updatePreviews () {\n    const content = this.content()\n    if (content === null || content === undefined) return\n\n    this.previewHTML = await this.markdownRender(content)\n  }\n\n  private async markdownRender (text: string) {\n    let html: string\n\n    const customMarkdownRenderer = this.customMarkdownRenderer()\n    const markdownType = this.markdownType()\n    if (customMarkdownRenderer) {\n      const result = await customMarkdownRenderer(text)\n\n      if (result instanceof HTMLElement) {\n        setTimeout(() => {\n          const wrapperElement = this.previewElement()?.nativeElement as HTMLElement\n          if (!wrapperElement) return\n\n          wrapperElement.innerHTML = ''\n          wrapperElement.appendChild(result)\n        })\n\n        return\n      }\n\n      html = result\n    } else if (markdownType === 'text') {\n      html = await this.markdownService.textMarkdownToHTML({ markdown: text, withEmoji: this.withEmoji(), withHtml: this.withHtml() })\n    } else if (markdownType === 'enhanced') {\n      html = await this.markdownService.enhancedMarkdownToHTML({ markdown: text, withEmoji: this.withEmoji(), withHtml: this.withHtml() })\n    } else if (markdownType === 'to-unsafe-html') {\n      html = await this.markdownService.markdownToUnsafeHTML({ markdown: text })\n    }\n\n    const markdownVideo = this.markdownVideo()\n    if (markdownVideo) {\n      html = this.markdownService.processVideoTimestamps(markdownVideo.shortUUID, html)\n    }\n\n    return html\n  }\n}\n"]}