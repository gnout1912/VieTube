{"version":3,"sources":["node_modules/markdown-it-emoji/lib/light.mjs","node_modules/markdown-it-emoji/lib/data/shortcuts.mjs","node_modules/markdown-it-emoji/lib/render.mjs","node_modules/markdown-it-emoji/lib/replace.mjs","node_modules/markdown-it-emoji/lib/normalize_opts.mjs","node_modules/markdown-it-emoji/lib/bare.mjs"],"sourcesContent":["import emojies_defs from './data/light.mjs';\nimport emojies_shortcuts from './data/shortcuts.mjs';\nimport bare_emoji_plugin from './bare.mjs';\nexport default function emoji_plugin(md, options) {\n  const defaults = {\n    defs: emojies_defs,\n    shortcuts: emojies_shortcuts,\n    enabled: []\n  };\n  const opts = md.utils.assign({}, defaults, options || {});\n  bare_emoji_plugin(md, opts);\n}\n;","// Emoticons -> Emoji mapping.\n//\n// (!) Some patterns skipped, to avoid collisions\n// without increase matcher complicity. Than can change in future.\n//\n// Places to look for more emoticons info:\n//\n// - http://en.wikipedia.org/wiki/List_of_emoticons#Western\n// - https://github.com/wooorm/emoticon/blob/master/Support.md\n// - http://factoryjoe.com/projects/emoticons/\n//\n\n/* eslint-disable key-spacing */\n\nexport default {\n  angry: ['>:(', '>:-('],\n  blush: [':\")', ':-\")'],\n  broken_heart: ['</3', '<\\\\3'],\n  // :\\ and :-\\ not used because of conflict with markdown escaping\n  confused: [':/', ':-/'],\n  // twemoji shows question\n  cry: [\":'(\", \":'-(\", ':,(', ':,-('],\n  frowning: [':(', ':-('],\n  heart: ['<3'],\n  imp: [']:(', ']:-('],\n  innocent: ['o:)', 'O:)', 'o:-)', 'O:-)', '0:)', '0:-)'],\n  joy: [\":')\", \":'-)\", ':,)', ':,-)', \":'D\", \":'-D\", ':,D', ':,-D'],\n  kissing: [':*', ':-*'],\n  laughing: ['x-)', 'X-)'],\n  neutral_face: [':|', ':-|'],\n  open_mouth: [':o', ':-o', ':O', ':-O'],\n  rage: [':@', ':-@'],\n  smile: [':D', ':-D'],\n  smiley: [':)', ':-)'],\n  smiling_imp: [']:)', ']:-)'],\n  sob: [\":,'(\", \":,'-(\", ';(', ';-('],\n  stuck_out_tongue: [':P', ':-P'],\n  sunglasses: ['8-)', 'B-)'],\n  sweat: [',:(', ',:-('],\n  sweat_smile: [',:)', ',:-)'],\n  unamused: [':s', ':-S', ':z', ':-Z', ':$', ':-$'],\n  wink: [';)', ';-)']\n};","export default function emoji_html(tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n}\n;","// Emojies & shortcuts replacement logic.\n//\n// Note: In theory, it could be faster to parse :smile: in inline chain and\n// leave only shortcuts here. But, who care...\n//\nexport default function create_rule(md, emojies, shortcuts, scanRE, replaceRE) {\n  const arrayReplaceAt = md.utils.arrayReplaceAt;\n  const ucm = md.utils.lib.ucmicro;\n  const has = md.utils.has;\n  const ZPCc = new RegExp([ucm.Z.source, ucm.P.source, ucm.Cc.source].join('|'));\n  function splitTextToken(text, level, Token) {\n    let last_pos = 0;\n    const nodes = [];\n    text.replace(replaceRE, function (match, offset, src) {\n      let emoji_name;\n      // Validate emoji name\n      if (has(shortcuts, match)) {\n        // replace shortcut with full name\n        emoji_name = shortcuts[match];\n\n        // Don't allow letters before any shortcut (as in no \":/\" in http://)\n        if (offset > 0 && !ZPCc.test(src[offset - 1])) return;\n\n        // Don't allow letters after any shortcut\n        if (offset + match.length < src.length && !ZPCc.test(src[offset + match.length])) {\n          return;\n        }\n      } else {\n        emoji_name = match.slice(1, -1);\n      }\n\n      // Add new tokens to pending list\n      if (offset > last_pos) {\n        const token = new Token('text', '', 0);\n        token.content = text.slice(last_pos, offset);\n        nodes.push(token);\n      }\n      const token = new Token('emoji', '', 0);\n      token.markup = emoji_name;\n      token.content = emojies[emoji_name];\n      nodes.push(token);\n      last_pos = offset + match.length;\n    });\n    if (last_pos < text.length) {\n      const token = new Token('text', '', 0);\n      token.content = text.slice(last_pos);\n      nodes.push(token);\n    }\n    return nodes;\n  }\n  return function emoji_replace(state) {\n    let token;\n    const blockTokens = state.tokens;\n    let autolinkLevel = 0;\n    for (let j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') {\n        continue;\n      }\n      let tokens = blockTokens[j].children;\n\n      // We scan from the end, to keep position when new tags added.\n      // Use reversed logic in links start/end match\n      for (let i = tokens.length - 1; i >= 0; i--) {\n        token = tokens[i];\n        if (token.type === 'link_open' || token.type === 'link_close') {\n          if (token.info === 'auto') {\n            autolinkLevel -= token.nesting;\n          }\n        }\n        if (token.type === 'text' && autolinkLevel === 0 && scanRE.test(token.content)) {\n          // replace current node\n          blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, splitTextToken(token.content, token.level, state.Token));\n        }\n      }\n    }\n  };\n}\n;","// Convert input options to more useable format\n// and compile search regexp\n\nfunction quoteRE(str) {\n  return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n}\nexport default function normalize_opts(options) {\n  let emojies = options.defs;\n\n  // Filter emojies by whitelist, if needed\n  if (options.enabled.length) {\n    emojies = Object.keys(emojies).reduce((acc, key) => {\n      if (options.enabled.indexOf(key) >= 0) acc[key] = emojies[key];\n      return acc;\n    }, {});\n  }\n\n  // Flatten shortcuts to simple object: { alias: emoji_name }\n  const shortcuts = Object.keys(options.shortcuts).reduce((acc, key) => {\n    // Skip aliases for filtered emojies, to reduce regexp\n    if (!emojies[key]) return acc;\n    if (Array.isArray(options.shortcuts[key])) {\n      options.shortcuts[key].forEach(alias => {\n        acc[alias] = key;\n      });\n      return acc;\n    }\n    acc[options.shortcuts[key]] = key;\n    return acc;\n  }, {});\n  const keys = Object.keys(emojies);\n  let names;\n\n  // If no definitions are given, return empty regex to avoid replacements with 'undefined'.\n  if (keys.length === 0) {\n    names = '^$';\n  } else {\n    // Compile regexp\n    names = keys.map(name => {\n      return `:${name}:`;\n    }).concat(Object.keys(shortcuts)).sort().reverse().map(name => {\n      return quoteRE(name);\n    }).join('|');\n  }\n  const scanRE = RegExp(names);\n  const replaceRE = RegExp(names, 'g');\n  return {\n    defs: emojies,\n    shortcuts,\n    scanRE,\n    replaceRE\n  };\n}\n;","import emoji_html from './render.mjs';\nimport emoji_replace from './replace.mjs';\nimport normalize_opts from './normalize_opts.mjs';\nexport default function emoji_plugin(md, options) {\n  const defaults = {\n    defs: {},\n    shortcuts: {},\n    enabled: []\n  };\n  const opts = normalize_opts(md.utils.assign({}, defaults, options || {}));\n  md.renderer.rules.emoji = emoji_html;\n  md.core.ruler.after('linkify', 'emoji', emoji_replace(md, opts.defs, opts.shortcuts, opts.scanRE, opts.replaceRE));\n}\n;"],"mappings":"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","names":["init_light","shortcuts_default","emoji_html","tokens","idx","create_rule","md","emojies","shortcuts","scanRE","replaceRE","arrayReplaceAt","ucm","has","ZPCc","splitTextToken","text","level","Token","last_pos","nodes","match","offset","src","emoji_name","token","state","blockTokens","autolinkLevel","j","l","tokens","i","quoteRE","str","normalize_opts","options","emojies","acc","key","shortcuts","alias","keys","names","name","scanRE","replaceRE","emoji_plugin","md","options","defaults","opts","normalize_opts","emoji_html","create_rule","emoji_plugin","md","options","defaults","light_default","shortcuts_default","opts"],"x_google_ignoreList":[0,1,2,3,4,5]}