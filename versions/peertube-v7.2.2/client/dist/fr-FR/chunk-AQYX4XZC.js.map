{"version":3,"mappings":"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","names":["MyAccountAbusesListComponent","u","selectors","decls","vars","consts","template","rf","ctx","ɵɵelement","dependencies","AbuseListTableComponent","encapsulation","_MyAccountAbusesListComponent","MyAccountApplicationsComponent","authService","inject","AuthService","scopedTokensService","ScopedTokensService","videoService","VideoService","notifier","Notifier","confirmService","ConfirmService","feedUrl","feedToken","baseURL","environment","originServerUrl","window","location","origin","ngOnInit","getScopedTokens","subscribe","next","tokens","regenApplications","error","err","message","renewToken","__async","confirm","renewScopedTokens","success","user","getUser","feeds","getVideoSubscriptionFeedUrls","account","id","find","f","format","FeedFormat","RSS","url","i18n_0","$localize","ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","ɵɵlistener","e","ɵɵadvance","ɵɵproperty","InputTextComponent","styles","_MyAccountApplicationsComponent","io","n","i","a","y","$event","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","onSearch","_o","ɵɵi18nStart","ɵɵi18nEnd","c","sortTooltip","ro","accountBlock_r4","_r3","$implicit","unblockAccount","ɵɵtext","K","blockedAccount","ɵɵsanitizeUrl","ɵɵtextInterpolate1","displayName","ɵɵtextInterpolate","nameWithHost","ɵɵpipeBind2","createdAt","ao","ɵɵelementContainerStart","I","lo","so","ɵɵtemplate","MyAccountBlocklistComponent_ng_template_4_ng_container_3_Template","MyAccountBlocklistComponent_ng_template_4_ng_container_4_Template","search","MyAccountBlocklistComponent","GenericAccountBlocklistComponent","mode","BlocklistComponentType","Account","getIdentifier","__ngFactoryType__","features","ɵɵInheritDefinitionFeature","T","loadLazy","MyAccountBlocklistComponent_ng_template_1_Template","MyAccountBlocklistComponent_ng_template_2_Template","MyAccountBlocklistComponent_ng_template_3_Template","MyAccountBlocklistComponent_ng_template_4_Template","blockedAccounts","totalRecords","rowsPerPage","rowsPerPageOptions","pagination","start","sort","field","order","getPaginationTemplate","TableModule","Table","PrimeTemplate","SortableColumn","SortIcon","SharedModule","AdvancedInputFilterComponent","NgbTooltip","ActorAvatarComponent","AutoColspanDirective","NgIf","PTDatePipe","_MyAccountBlocklistComponent","Co","_r2","ctx_r2","addServersToBlock","co","To","serverBlock_r5","_r4","unblockServer","blockedServer","host","uo","po","Mo","MyAccountServerBlocklistComponent_ng_template_4_ng_container_3_Template","MyAccountServerBlocklistComponent_ng_template_4_ng_container_4_Template","MyAccountServerBlocklistComponent","GenericServerBlocklistComponent","M","i0","MyAccountServerBlocklistComponent_ng_template_1_Template","MyAccountServerBlocklistComponent_ng_template_2_Template","MyAccountServerBlocklistComponent_ng_template_3_Template","MyAccountServerBlocklistComponent_ng_template_4_Template","onDomainsToBlock","blockedServers","GlobalIconComponent","BatchDomainsModalComponent","_MyAccountServerBlocklistComponent","UserImportExportService","authHttp","HttpClient","restExtractor","RestExtractor","server","ServerService","listUserExports","options","userId","BASE_USER_EXPORTS_URL","get","pipe","catchError","handleError","requestNewUserExport","withVideoFiles","post","deleteUserExport","userExportId","delete","getLatestImport","BASE_USER_IMPORTS_URL","forkJoin","getServerLocale","map","latestImport","translations","state","label","peertubeTranslate","status","HttpStatusCode","NOT_FOUND_404","of","undefined","__publicField","apiUrl","factory","ɵfac","_UserImportExportService","Oo","ctx_r0","No","Ao","Eo","cancelUpload","retryUpload","MyAccountImportComponent_Conditional_5_Conditional_37_my_alert_1_Template","onFileChange","uploadingArchive","uploadPercents","archiveUploadFinished","enableRetryAfterError","go","MyAccountImportComponent_Conditional_5_p_34_Template","MyAccountImportComponent_Conditional_5_div_35_Template","MyAccountImportComponent_Conditional_5_Conditional_36_Template","MyAccountImportComponent_Conditional_5_Conditional_37_Template","isEmailEnabled","ɵɵconditional","hasPendingImport","So","MyAccountImportComponent","userImportExportService","resumableUploadService","UploadxService","videoQuotaUsed","input","fileToUpload","uploadServiceSubscription","alreadyRefreshedToken","res","events","onUploadOngoing","ngOnDestroy","disconnect","unsubscribe","canDeactivate","text","isImportEnabled","getHTMLConfig","import","users","enabled","email","responseStatus","UNAUTHORIZED_401","refreshTokenAndRetryUpload","handleUploadError","buildHTTPErrorResponse","progress","event","inputEl","target","file","files","videoQuota","size","bytePipes","BytesPipe","fileSizeBytes","transform","videoQuotaUsedBytes","videoQuotaBytes","value","uploadFile","control","action","UserImportState","PENDING","PROCESSING","handleFiles","endpoint","multiple","maxChunkSize","client","videos","resumableUpload","token","getAccessToken","uploaderClass","UploaderX","retryConfig","getUploadXRetryConfig","metadata","filename","name","genericUploadErrorHandler","sticky","UNSUPPORTED_MEDIA_TYPE_415","refreshAccessToken","inputs","Ye","MyAccountImportComponent_Conditional_5_Template","MyAccountImportComponent_Conditional_6_Template","UploadProgressComponent","AlertComponent","_MyAccountImportComponent","fo","Po","Ro","ɵɵpipeBind1","export_r2","Io","expiresOn","yo","privateDownloadUrl","Uo","MyAccountExportComponent_Conditional_5_table_33_tr_11_ng_container_7_Template","MyAccountExportComponent_Conditional_5_table_33_tr_11_ng_container_9_Template","MyAccountExportComponent_Conditional_5_table_33_tr_11_a_11_Template","ho","MyAccountExportComponent_Conditional_5_table_33_tr_11_Template","userExports","vo","MyAccountExportComponent_Conditional_5_Conditional_32_Template","MyAccountExportComponent_Conditional_5_table_33_Template","openNewArchiveModal","length","isRequestArchiveDisabled","Yo","$o","bo","errorInModal","wo","ɵɵi18nExp","archiveWeightEstimation","_e","Lo","hide_r5","close","MyAccountExportComponent_ng_template_7_my_alert_6_Template","MyAccountExportComponent_ng_template_7_my_alert_7_Template","ɵɵtwoWayListener","ɵɵtwoWayBindingSet","exportWithVideosFiles","MyAccountExportComponent_ng_template_7_div_12_Template","requestNewArchive","hasAlreadyACompletedArchive","ɵɵtwoWayProperty","MyAccountExportComponent","modalService","NgbModal","exportModal","viewChild","exportModalOpened","requestingArchive","reloadUserExports","isExportEnabled","export","some","UserExportState","COMPLETED","open","centered","baseObs","from","concatMap","getUserId","toArray","switchMap","body","code","ServerErrorCode","MAX_USER_VIDEO_QUOTA_EXCEEDED_FOR_USER_EXPORT","data","viewQuery","Se","o","fe","t","O","P","U","$","h","X","he","ve","$e","be","we","Le","Fe","xe","Ge","Xe","ke","v","mt","Ot","Nt","At","dt","ut","pt","Mt","MyAccountExportComponent_Conditional_5_Template","MyAccountExportComponent_Conditional_6_Template","MyAccountExportComponent_ng_template_7_Template","ɵɵtemplateRefExtractor","NgFor","PeertubeCheckboxComponent","FormsModule","NgControlStatus","NgModel","_MyAccountExportComponent","Fo","MyAccountImportExportComponent","userService","UserService","accountImport","getMyVideoQuotaUsed","_MyAccountImportExportComponent","xo","Go","Xo","MyAccountNotificationsComponent","userNotification","_notificationSortType","notificationSortType","hasUnreadNotifications","type","markAllAsRead","notifications","filter","read","onChangeSortColumn","changeSortColumn","MyAccountNotificationsComponent_ng_container_12_Template","MyAccountNotificationsComponent_ng_container_13_Template","RouterLink","NgSelectOption","ɵNgSelectMultipleOption","SelectControlValueAccessor","UserNotificationsComponent","_MyAccountNotificationsComponent","MyAccountDangerZoneComponent","redirectService","RedirectService","deleteMe","confirmWithExpectedInput","username","logout","redirectToHomepage","_MyAccountDangerZoneComponent","ko","Do","zo","Vo","Bo","resendVerificationEmail","Wo","MyAccountChangeEmailComponent_div_2_Conditional_4_Template","MyAccountChangeEmailComponent_div_2_Conditional_5_Template","pendingEmail","verificationEmailSent","Ho","formErrors","MyAccountChangeEmailComponent","FormReactive","formReactiveService","FormReactiveService","serverService","buildForm","USER_EMAIL_VALIDATOR","password","LOGIN_PASSWORD_VALIDATOR","changeEmail","form","getConfig","tap","refreshUserInformation","config","reset","signup","requiresEmailVerification","askSendVerifyEmail","MyAccountChangeEmailComponent_my_alert_0_Template","MyAccountChangeEmailComponent_my_alert_1_Template","MyAccountChangeEmailComponent_div_2_Template","MyAccountChangeEmailComponent_div_11_Template","ɵɵpureFunction1","_c0","valid","ɵNgNoValidate","DefaultValueAccessor","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","NgClass","_MyAccountChangeEmailComponent","Ko","qo","MyAccountEmailPreferencesComponent","model","patchValue","emailPublic","updateEmailPublic","details","updateMyProfile","update","__spreadProps","__spreadValues","outputs","MyAccountEmailPreferencesComponent_Conditional_5_Template","MyAccountEmailPreferencesComponent_Conditional_6_Template","emailVerified","_MyAccountEmailPreferencesComponent","Qo","jo","ɵɵpureFunction0","Zo","disableTwoFactor","MyAccountTwoFactorButtonComponent","twoFactorService","TwoFactorService","auth","twoFactorEnabled","confirmed","confirmWithPassword","title","currentPassword","MyAccountTwoFactorButtonComponent_ng_container_1_Template","MyAccountTwoFactorButtonComponent_ng_container_2_Template","ButtonComponent","_MyAccountTwoFactorButtonComponent","Jo","MyAccountChangePasswordComponent","USER_EXISTING_PASSWORD_VALIDATOR","USER_PASSWORD_VALIDATOR","USER_CONFIRM_PASSWORD_VALIDATOR","confirmPasswordControl","valueChanges","setErrors","matchPassword","changePassword","newPassword","MyAccountChangePasswordComponent_my_alert_0_Template","_MyAccountChangePasswordComponent","ei","ti","notificationType_r2","emailNotifications","updateEmailSetting","getEmailLabel","ni","webNotifications","updateWebSetting","MyAccountNotificationPreferencesComponent_div_0_ng_container_1_ng_container_1_ng_container_7_div_1_div_5_Template","labelNotifications","getWebLabel","emailEnabled","oi","MyAccountNotificationPreferencesComponent_div_0_ng_container_1_ng_container_1_ng_container_7_div_1_Template","hasUserRight","ii","MyAccountNotificationPreferencesComponent_div_0_ng_container_1_ng_container_1_div_6_Template","MyAccountNotificationPreferencesComponent_div_0_ng_container_1_ng_container_1_ng_container_7_Template","group_r5","keys","_i","MyAccountNotificationPreferencesComponent_div_0_ng_container_1_ng_container_1_Template","hasNotificationsInGroup","ri","MyAccountNotificationPreferencesComponent_div_0_ng_container_1_Template","notificationSettingGroups","MyAccountNotificationPreferencesComponent","userNotificationService","UserNotificationService","rightNotifications","savePreferences","debounce","savePreferencesImpl","bind","constructor","abuseAsModerator","UserRight","MANAGE_ABUSES","videoAutoBlacklistAsModerator","MANAGE_VIDEO_BLACKLIST","newUserRegistration","MANAGE_USERS","newInstanceFollower","MANAGE_SERVER_FOLLOW","autoInstanceFollowing","MANAGE_CONFIGURATION","newPeerTubeVersion","MANAGE_DEBUG","newPluginVersion","newVideoFromSubscription","newCommentOnMyVideo","blacklistOnMyVideo","myVideoPublished","myVideoImportFinished","instance","newFollow","commentMention","abuseNewMessage","abuseStateChange","myVideoStudioEditionFinished","myVideoTranscriptionGenerated","loadNotificationSettings","rightToHave","hasRight","group","k","notificationType","notificationSettings","UserNotificationSettingValue","EMAIL","WEB","updateNotificationSettings","key","objectKeysTyped","MyAccountNotificationPreferencesComponent_div_0_Template","InputSwitchComponent","_MyAccountNotificationPreferencesComponent","ai","li","si","Ci","description","MyAccountProfileComponent","USER_DISPLAY_NAME_REQUIRED_VALIDATOR","USER_DESCRIPTION_VALIDATOR","controls","disable","instanceHost","MyAccountProfileComponent_my_alert_0_Template","MyAccountProfileComponent_div_12_Template","MyAccountProfileComponent_div_18_Template","HelpComponent","MarkdownTextareaComponent","_MyAccountProfileComponent","ci","onAvatarChange","onAvatarDelete","avatars","followersCount","Ti","di","ui","MyAccountSettingsComponent","viewportScroller","ViewportScroller","lastScrollHash","userInformationLoaded","ngAfterViewChecked","hash","scrollToAnchor","replace","formData","changeAvatar","updateAccountAvatar","shallowCopy","deleteAvatar","MyAccountSettingsComponent_my_actor_avatar_edit_7_Template","MyAccountSettingsComponent_div_30_Template","MyAccountSettingsComponent_div_31_Template","MyAccountSettingsComponent_div_32_Template","pluginAuth","ActorAvatarEditComponent","UserQuotaComponent","UserInterfaceSettingsComponent","UserVideoSettingsComponent","_MyAccountSettingsComponent","pi","Mi","requestTwoFactor","formPassword","formErrorsPassword","mi","confirmTwoFactor","twoFactorURI","twoFactorSecret","formOTP","formErrorsOTP","Oi","MyAccountTwoFactorComponent_div_1_ng_container_1_Template","MyAccountTwoFactorComponent_div_1_ng_container_2_Template","step","MyAccountTwoFactorComponent","router","Router","twoFactorAlreadyEnabled","inPasswordStep","requestToken","buildPasswordForm","buildOTPForm","otpRequest","uri","secret","trim","confirmTwoFactorRequest","otpToken","navigateByUrl","USER_OTP_TOKEN_VALIDATOR","MyAccountTwoFactorComponent_div_0_Template","MyAccountTwoFactorComponent_div_1_Template","QRCodeComponent","_MyAccountTwoFactorComponent","MyAccountComponent","pluginService","PluginService","menuEntries","ensurePluginsAreLoaded","then","buildMenu","clientRoutes","getAllRegisteredClientRoutesForParent","routerLink","children","Object","values","clientRoute","menuItem","route","myAccountContent_r2","ɵɵreference","preventDefault","focus","HorizontalMenuComponent","RouterOutlet","_MyAccountComponent","routes_default","path","component","providers","BlocklistService","AbuseService","VideoBlockService","BulkService","VideoCommentService","resolve","userResolver","canActivateChild","LoginGuard","redirectTo","pathMatch","meta","CanDeactivateGuard","PluginPagesComponent","parentRoute","pluginScope","Fl","default"],"ignoreList":[],"sources":["src/app/+my-account/my-account-abuses/my-account-abuses-list.component.ts","src/app/+my-account/my-account-abuses/my-account-abuses-list.component.html","src/app/+my-account/my-account-applications/my-account-applications.component.ts","src/app/+my-account/my-account-applications/my-account-applications.component.html","src/app/shared/shared-moderation/account-blocklist.component.html","src/app/+my-account/my-account-blocklist/my-account-blocklist.component.ts","src/app/shared/shared-moderation/server-blocklist.component.html","src/app/+my-account/my-account-blocklist/my-account-server-blocklist.component.ts","src/app/+my-account/my-account-import-export/user-import-export.service.ts","src/app/+my-account/my-account-import-export/my-account-import.component.html","src/app/+my-account/my-account-import-export/my-account-import.component.ts","src/app/+my-account/my-account-import-export/my-account-export.component.html","src/app/+my-account/my-account-import-export/my-account-export.component.ts","src/app/+my-account/my-account-import-export/my-account-import-export.component.ts","src/app/+my-account/my-account-import-export/my-account-import-export.component.html","src/app/+my-account/my-account-notifications/my-account-notifications.component.html","src/app/+my-account/my-account-notifications/my-account-notifications.component.ts","src/app/+my-account/my-account-settings/my-account-danger-zone/my-account-danger-zone.component.ts","src/app/+my-account/my-account-settings/my-account-danger-zone/my-account-danger-zone.component.html","src/app/+my-account/my-account-settings/my-account-change-email/my-account-change-email.component.html","src/app/+my-account/my-account-settings/my-account-change-email/my-account-change-email.component.ts","src/app/+my-account/my-account-settings/my-account-email-preferences/my-account-email-preferences.component.html","src/app/+my-account/my-account-settings/my-account-email-preferences/my-account-email-preferences.component.ts","src/app/+my-account/my-account-settings/my-account-two-factor/my-account-two-factor-button.component.html","src/app/+my-account/my-account-settings/my-account-two-factor/my-account-two-factor-button.component.ts","src/app/+my-account/my-account-settings/my-account-change-password/my-account-change-password.component.html","src/app/+my-account/my-account-settings/my-account-change-password/my-account-change-password.component.ts","src/app/+my-account/my-account-settings/my-account-notification-preferences/my-account-notification-preferences.component.html","src/app/+my-account/my-account-settings/my-account-notification-preferences/my-account-notification-preferences.component.ts","src/app/+my-account/my-account-settings/my-account-profile/my-account-profile.component.html","src/app/+my-account/my-account-settings/my-account-profile/my-account-profile.component.ts","src/app/+my-account/my-account-settings/my-account-settings.component.html","src/app/+my-account/my-account-settings/my-account-settings.component.ts","src/app/+my-account/my-account-settings/my-account-two-factor/my-account-two-factor.component.html","src/app/+my-account/my-account-settings/my-account-two-factor/my-account-two-factor.component.ts","src/app/+my-account/my-account.component.ts","src/app/+my-account/my-account.component.html","src/app/+my-account/routes.ts"],"sourcesContent":["import { Component } from '@angular/core'\nimport { AbuseListTableComponent } from '../../shared/shared-abuse-list/abuse-list-table.component'\n\n@Component({\n  selector: 'my-account-abuses-list',\n  templateUrl: './my-account-abuses-list.component.html',\n  styleUrls: [],\n  imports: [ AbuseListTableComponent ]\n})\nexport class MyAccountAbusesListComponent {\n}\n","<my-abuse-list-table viewType=\"user\"></my-abuse-list-table>\n","import { Component, OnInit, inject } from '@angular/core'\nimport { AuthService, ConfirmService, Notifier, ScopedTokensService } from '@app/core'\nimport { VideoService } from '@app/shared/shared-main/video/video.service'\nimport { FeedFormat, ScopedToken } from '@peertube/peertube-models'\nimport { environment } from '../../../environments/environment'\nimport { InputTextComponent } from '../../shared/shared-forms/input-text.component'\n\n@Component({\n  selector: 'my-account-applications',\n  templateUrl: './my-account-applications.component.html',\n  styleUrls: [ './my-account-applications.component.scss' ],\n  imports: [ InputTextComponent ]\n})\nexport class MyAccountApplicationsComponent implements OnInit {\n  private authService = inject(AuthService)\n  private scopedTokensService = inject(ScopedTokensService)\n  private videoService = inject(VideoService)\n  private notifier = inject(Notifier)\n  private confirmService = inject(ConfirmService)\n\n  feedUrl: string\n  feedToken: string\n\n  private baseURL = environment.originServerUrl || window.location.origin\n\n  ngOnInit () {\n    this.feedUrl = this.baseURL\n\n    this.scopedTokensService.getScopedTokens()\n      .subscribe({\n        next: tokens => this.regenApplications(tokens),\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  async renewToken () {\n    const res = await this.confirmService.confirm(\n      // eslint-disable-next-line max-len\n      $localize`Renewing the token will disallow previously configured clients from retrieving the feed until they use the new token. Proceed?`,\n      $localize`Renew token`\n    )\n    if (res === false) return\n\n    this.scopedTokensService.renewScopedTokens()\n      .subscribe({\n        next: tokens => {\n          this.regenApplications(tokens)\n          this.notifier.success($localize`Token renewed. Update your client configuration accordingly.`)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  private regenApplications (tokens: ScopedToken) {\n    const user = this.authService.getUser()\n    const feeds = this.videoService.getVideoSubscriptionFeedUrls(user.account.id, tokens.feedToken)\n    this.feedUrl = this.baseURL + feeds.find(f => f.format === FeedFormat.RSS).url\n    this.feedToken = tokens.feedToken\n  }\n}\n","<div class=\"pt-two-cols\"> <!-- built-in token grid -->\n\n  <div class=\"title-col\">\n    <h2 i18n>SUBSCRIPTION FEED</h2>\n\n    <div i18n class=\"applications-description\">\n      Use third-party feed aggregators to retrieve the list of videos from channels you subscribed to.\n    </div>\n  </div>\n\n  <div class=\"content-col\">\n\n    <div class=\"form-group\">\n      <label i18n for=\"feed-url\">Feed URL</label>\n      <my-input-text inputId=\"feed-url\" [value]=\"feedUrl\" [withToggle]=\"false\" [withCopy]=\"true\" [show]=\"true\" [readonly]=\"true\"></my-input-text>\n    </div>\n\n    <div class=\"form-group\">\n      <label i18n for=\"feed-token\">Feed Token</label>\n      <my-input-text inputId=\"feed-token\" [value]=\"feedToken\" [withCopy]=\"true\" [readonly]=\"true\"></my-input-text>\n\n      <div class=\"form-group-description\" i18n>⚠️ Never share your feed token with anyone.</div>\n    </div>\n\n    <input (click)=\"renewToken()\" class=\"peertube-button primary-button mt-4\" type=\"submit\" i18n-value value=\"Renew token\">\n\n  </div>\n</div>\n","<p-table\n  [value]=\"blockedAccounts\" [lazy]=\"true\" [paginator]=\"totalRecords > 0\" [totalRecords]=\"totalRecords\"\n  [rows]=\"rowsPerPage\" [rowsPerPageOptions]=\"rowsPerPageOptions\" [first]=\"pagination.start\"\n  [sortField]=\"sort.field\" [sortOrder]=\"sort.order\" (onLazyLoad)=\"loadLazy($event)\"\n  [showCurrentPageReport]=\"true\" [currentPageReportTemplate]=\"getPaginationTemplate()\"\n>\n  <ng-template pTemplate=\"caption\">\n    <div class=\"caption\">\n      <div class=\"ms-auto\">\n        <my-advanced-input-filter (search)=\"onSearch($event)\"></my-advanced-input-filter>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\">\n    <tr>\n      <th scope=\"col\" style=\"width: 150px;\" i18n>Action</th> <!-- column for action buttons -->\n      <th scope=\"col\" i18n>Account</th>\n      <th scope=\"col\" style=\"width: 150px;\" i18n [ngbTooltip]=\"sortTooltip\" container=\"body\" pSortableColumn=\"createdAt\">Muted at <p-sortIcon field=\"createdAt\"></p-sortIcon></th>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"body\" let-accountBlock>\n    <tr>\n      <td class=\"action-cell\">\n        <button class=\"peertube-button secondary-button\" (click)=\"unblockAccount(accountBlock)\" i18n>Unmute</button>\n      </td>\n      <td>\n        <a [href]=\"accountBlock.blockedAccount.url\" i18n-title title=\"Open account in a new tab\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <div class=\"chip two-lines\">\n            <my-actor-avatar [actor]=\"accountBlock.blockedAccount\" actorType=\"account\" size=\"32\"></my-actor-avatar>\n            <div>\n              {{ accountBlock.blockedAccount.displayName }}\n              <span class=\"muted\">{{ accountBlock.blockedAccount.nameWithHost }}</span>\n            </div>\n          </div>\n        </a>\n      </td>\n\n      <td>{{ accountBlock.createdAt | ptDate: 'short' }}</td>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"emptymessage\">\n    <tr>\n      <td myAutoColspan>\n        <div class=\"no-results\">\n          <ng-container *ngIf=\"search\" i18n>No account found matching current filters.</ng-container>\n          <ng-container *ngIf=\"!search\" i18n>No account found.</ng-container>\n        </div>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n","import { NgIf } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { PTDatePipe } from '@app/shared/shared-main/common/date.pipe'\nimport { GenericAccountBlocklistComponent } from '@app/shared/shared-moderation/account-blocklist.component'\nimport { BlocklistComponentType } from '@app/shared/shared-moderation/blocklist.service'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { SharedModule } from 'primeng/api'\nimport { TableModule } from 'primeng/table'\nimport { ActorAvatarComponent } from '../../shared/shared-actor-image/actor-avatar.component'\nimport { AdvancedInputFilterComponent } from '../../shared/shared-forms/advanced-input-filter.component'\nimport { AutoColspanDirective } from '../../shared/shared-main/common/auto-colspan.directive'\n\n@Component({\n  selector: 'my-account-blocklist',\n  templateUrl: '../../shared/shared-moderation/account-blocklist.component.html',\n  imports: [\n    TableModule,\n    SharedModule,\n    AdvancedInputFilterComponent,\n    NgbTooltip,\n    ActorAvatarComponent,\n    AutoColspanDirective,\n    NgIf,\n    PTDatePipe\n  ]\n})\nexport class MyAccountBlocklistComponent extends GenericAccountBlocklistComponent {\n  mode = BlocklistComponentType.Account\n\n  getIdentifier () {\n    return 'MyAccountBlocklistComponent'\n  }\n}\n","<p-table\n  [value]=\"blockedServers\" [paginator]=\"totalRecords > 0\" [totalRecords]=\"totalRecords\"\n  [rows]=\"rowsPerPage\" [rowsPerPageOptions]=\"rowsPerPageOptions\" [first]=\"pagination.start\"\n  [sortField]=\"sort.field\" [sortOrder]=\"sort.order\"\n  [lazy]=\"true\" (onLazyLoad)=\"loadLazy($event)\" [lazyLoadOnInit]=\"false\"\n  [showCurrentPageReport]=\"true\" [currentPageReportTemplate]=\"getPaginationTemplate()\"\n>\n  <ng-template pTemplate=\"caption\">\n    <div class=\"caption\">\n      <div class=\"left-buttons\">\n        <button class=\"peertube-create-button\" (click)=\"addServersToBlock()\" (key.enter)=\"addServersToBlock()\">\n          <my-global-icon iconName=\"add\" aria-hidden=\"true\"></my-global-icon>\n          <ng-container i18n>Mute domains</ng-container>\n        </button>\n      </div>\n\n      <div class=\"ms-auto\">\n        <my-advanced-input-filter (search)=\"onSearch($event)\"></my-advanced-input-filter>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\">\n    <tr>\n      <th scope=\"col\" style=\"width: 150px;\" i18n>Action</th> <!-- column for action buttons -->\n      <th scope=\"col\" i18n>Instance</th>\n      <th scope=\"col\" style=\"width: 150px;\" i18n [ngbTooltip]=\"sortTooltip\" container=\"body\" pSortableColumn=\"createdAt\">Muted at <p-sortIcon field=\"createdAt\"></p-sortIcon></th>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"body\" let-serverBlock>\n    <tr>\n      <td class=\"action-cell\">\n        <button class=\"peertube-button secondary-button\" (click)=\"unblockServer(serverBlock)\" i18n>Unmute</button>\n      </td>\n      <td>\n        <a [href]=\"'https://' + serverBlock.blockedServer.host\" i18n-title title=\"Open instance in a new tab\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {{ serverBlock.blockedServer.host }}\n          <my-global-icon iconName=\"external-link\"></my-global-icon>\n        </a>\n      </td>\n      <td>{{ serverBlock.createdAt | ptDate: 'short' }}</td>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"emptymessage\">\n    <tr>\n      <td myAutoColspan>\n        <div class=\"no-results\">\n          <ng-container *ngIf=\"search\" i18n>No server found matching current filters.</ng-container>\n          <ng-container *ngIf=\"!search\" i18n>No server found.</ng-container>\n        </div>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n\n<my-batch-domains-modal #batchDomainsModal i18n-action action=\"Mute domains\" (domains)=\"onDomainsToBlock($event)\"></my-batch-domains-modal>\n","import { NgIf } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { PTDatePipe } from '@app/shared/shared-main/common/date.pipe'\nimport { BlocklistComponentType } from '@app/shared/shared-moderation/blocklist.service'\nimport { GenericServerBlocklistComponent } from '@app/shared/shared-moderation/server-blocklist.component'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { SharedModule } from 'primeng/api'\nimport { TableModule } from 'primeng/table'\nimport { AdvancedInputFilterComponent } from '../../shared/shared-forms/advanced-input-filter.component'\nimport { GlobalIconComponent } from '../../shared/shared-icons/global-icon.component'\nimport { AutoColspanDirective } from '../../shared/shared-main/common/auto-colspan.directive'\nimport { BatchDomainsModalComponent } from '../../shared/shared-moderation/batch-domains-modal.component'\n\n@Component({\n  selector: 'my-account-server-blocklist',\n  styleUrls: [ '../../shared/shared-moderation/moderation.scss', '../../shared/shared-moderation/server-blocklist.component.scss' ],\n  templateUrl: '../../shared/shared-moderation/server-blocklist.component.html',\n  imports: [\n    GlobalIconComponent,\n    TableModule,\n    SharedModule,\n    AdvancedInputFilterComponent,\n    NgbTooltip,\n    AutoColspanDirective,\n    NgIf,\n    BatchDomainsModalComponent,\n    PTDatePipe\n  ]\n})\nexport class MyAccountServerBlocklistComponent extends GenericServerBlocklistComponent {\n  mode = BlocklistComponentType.Account\n\n  getIdentifier () {\n    return 'MyAccountServerBlocklistComponent'\n  }\n}\n","import { catchError, map } from 'rxjs/operators'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, ServerService } from '@app/core'\nimport { environment } from 'src/environments/environment'\nimport { HttpStatusCode, ResultList, UserExport, UserImport } from '@peertube/peertube-models'\nimport { forkJoin, of } from 'rxjs'\nimport { peertubeTranslate } from '@peertube/peertube-core-utils'\n\n@Injectable()\nexport class UserImportExportService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n  private server = inject(ServerService)\n\n  static BASE_USER_EXPORTS_URL = environment.apiUrl + '/api/v1/users/'\n  static BASE_USER_IMPORTS_URL = environment.apiUrl + '/api/v1/users/'\n\n  // ---------------------------------------------------------------------------\n\n  listUserExports (options: {\n    userId: number\n  }) {\n    const { userId } = options\n\n    const url = UserImportExportService.BASE_USER_EXPORTS_URL + userId + '/exports'\n\n    return this.authHttp.get<ResultList<UserExport>>(url)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  requestNewUserExport (options: {\n    userId: number\n    withVideoFiles: boolean\n  }) {\n    const { userId, withVideoFiles } = options\n\n    const url = UserImportExportService.BASE_USER_EXPORTS_URL + userId + '/exports/request'\n\n    return this.authHttp.post(url, { withVideoFiles })\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  deleteUserExport (options: {\n    userId: number\n    userExportId: number\n  }) {\n    const { userId, userExportId } = options\n\n    const url = UserImportExportService.BASE_USER_EXPORTS_URL + userId + '/exports/' + userExportId\n\n    return this.authHttp.delete(url)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  // ---------------------------------------------------------------------------\n\n  getLatestImport (options: {\n    userId: number\n  }) {\n    const { userId } = options\n\n    const url = UserImportExportService.BASE_USER_IMPORTS_URL + userId + '/imports/latest'\n\n    return forkJoin([\n      this.authHttp.get<UserImport>(url),\n      this.server.getServerLocale()\n    ]).pipe(\n      map(([ latestImport, translations ]) => {\n        latestImport.state.label = peertubeTranslate(latestImport.state.label, translations)\n\n        return latestImport\n      }),\n      catchError(err => {\n        if (err.status === HttpStatusCode.NOT_FOUND_404) return of(undefined)\n\n        return this.restExtractor.handleError(err)\n      })\n    )\n  }\n}\n","<div class=\"pt-two-cols\">\n\n  <div class=\"title-col\">\n    <h2 i18n>IMPORT</h2>\n  </div>\n\n  <div class=\"content-col\">\n\n    @if (isImportEnabled()) {\n      <p i18n>You can import an archive created by another PeerTube website.</p>\n\n      <p i18n>\n        This is an <strong>import</strong> tool and not a migration tool.\n        It's the reason why data (like channels or videos) is duplicated and not moved from your previous PeerTube website.\n      </p>\n\n      <p i18n>The import process will automatically:</p>\n\n      <ul>\n        <li i18n>Update your account metadata (display name, description, avatar...)</li>\n        <li i18n>Update your user settings (autoplay or P2P policy, notification settings...). It does not update your user email, username or password.</li>\n        <li i18n>Add accounts/servers in your mute list</li>\n        <li i18n>Add likes/dislikes</li>\n        <li i18n>Send a follow request to your subscriptions</li>\n        <li i18n>Create channels if they do not already exist</li>\n        <li i18n>Create playlists if they do not already exist</li>\n        <li i18n>Add watched videos in your video history</li>\n        <li i18n><strong>If the archive contains video files</strong>, create videos if they do not already exist</li>\n      </ul>\n\n      <p i18n>The following data objects are not imported:</p>\n\n      <ul>\n        <li i18n>Comments</li>\n        <li i18n>Followers (accounts will need to re-follow your channels)</li>\n      </ul>\n\n      <p *ngIf=\"isEmailEnabled()\" i18n>An email will be sent when the import process is complete.</p>\n\n      <div class=\"mb-3\" *ngIf=\"latestImport\">\n        <div>\n          <strong>Latest import on:</strong> {{ latestImport.createdAt | ptDate: 'medium' }}\n        </div>\n\n        <div>\n          <strong>Latest import state:</strong> {{ latestImport.state.label }}\n        </div>\n      </div>\n\n      @if (hasPendingImport()) {\n        <my-alert i18n type=\"primary\">\n          You can't re-import an archive because you already have an import that is currently being processed by PeerTube.\n        </my-alert>\n      } @else {\n        <my-upload-progress\n          class=\"d-block mt-3 mb-3\"\n          [isUploading]=\"uploadingArchive\" [uploadPercents]=\"uploadPercents\" [error]=\"error\" [uploaded]=\"archiveUploadFinished\"\n          [enableRetryAfterError]=\"enableRetryAfterError\" (cancelUpload)=\"cancelUpload()\" (retry)=\"retryUpload()\"\n        >\n        </my-upload-progress>\n\n        <my-alert *ngIf=\"archiveUploadFinished && !error\" type=\"primary\" i18n>\n          Upload completed. Your archive import will be processed as soon as possible.\n        </my-alert>\n\n        <div [hidden]=\"uploadingArchive || archiveUploadFinished\" class=\"button-file primary-button form-control\" i18n-ngbTooltip ngbTooltip=\"(extension: .zip)\">\n          <span i18n>Select the archive file to import</span>\n          <input\n            aria-label=\"Select the file to import\"\n            i18n-aria-label\n            accept=\".zip\"\n            (change)=\"onFileChange($event)\"\n            id=\"importfile\"\n            type=\"file\"\n          />\n        </div>\n      }\n    } @else {\n      <p i18n>User import is not enabled by your administrator.</p>\n    }\n\n  </div>\n</div>\n","import { NgIf } from '@angular/common'\nimport { HttpErrorResponse } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit, inject, input } from '@angular/core'\nimport { AuthService, CanComponentDeactivate, Notifier, ServerService } from '@app/core'\nimport { buildHTTPErrorResponse, genericUploadErrorHandler, getUploadXRetryConfig } from '@app/helpers'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { BytesPipe } from '@app/shared/shared-main/common/bytes.pipe'\nimport { PTDatePipe } from '@app/shared/shared-main/common/date.pipe'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { HttpStatusCode, UserImport, UserImportState } from '@peertube/peertube-models'\nimport { UploadState, UploaderX, UploadxService } from 'ngx-uploadx'\nimport { Subscription } from 'rxjs'\nimport { UploadProgressComponent } from '../../shared/standalone-upload/upload-progress.component'\nimport { UserImportExportService } from './user-import-export.service'\n\n@Component({\n  selector: 'my-account-import',\n  templateUrl: './my-account-import.component.html',\n  styleUrls: [ './my-account-import.component.scss' ],\n  imports: [ NgIf, UploadProgressComponent, NgbTooltip, PTDatePipe, AlertComponent ]\n})\nexport class MyAccountImportComponent implements OnInit, OnDestroy, CanComponentDeactivate {\n  private authService = inject(AuthService)\n  private server = inject(ServerService)\n  private userImportExportService = inject(UserImportExportService)\n  private resumableUploadService = inject(UploadxService)\n  private notifier = inject(Notifier)\n\n  readonly videoQuotaUsed = input<number>(undefined)\n\n  uploadingArchive = false\n  archiveUploadFinished = false\n\n  error: string\n  enableRetryAfterError: boolean\n  uploadPercents = 0\n\n  latestImport: UserImport\n\n  private fileToUpload: File\n  private uploadServiceSubscription: Subscription\n  private alreadyRefreshedToken = false\n\n  ngOnInit () {\n    this.userImportExportService.getLatestImport({ userId: this.authService.getUser().id })\n      .subscribe(res => this.latestImport = res)\n\n    this.uploadServiceSubscription = this.resumableUploadService.events\n      .subscribe(state => this.onUploadOngoing(state))\n  }\n\n  ngOnDestroy () {\n    this.resumableUploadService.disconnect()\n\n    if (this.uploadServiceSubscription) this.uploadServiceSubscription.unsubscribe()\n  }\n\n  canDeactivate () {\n    return {\n      canDeactivate: !this.uploadingArchive,\n      text: $localize`Your archive file is not uploaded yet, are you sure you want to leave this page?`\n    }\n  }\n\n  isImportEnabled () {\n    return this.server.getHTMLConfig().import.users.enabled\n  }\n\n  isEmailEnabled () {\n    return this.server.getHTMLConfig().email.enabled\n  }\n\n  onUploadOngoing (state: UploadState) {\n    switch (state.status) {\n      case 'error': {\n        if (!this.alreadyRefreshedToken && state.responseStatus === HttpStatusCode.UNAUTHORIZED_401) {\n          this.alreadyRefreshedToken = true\n\n          return this.refreshTokenAndRetryUpload()\n        }\n\n        this.handleUploadError(buildHTTPErrorResponse(state))\n        break\n      }\n\n      case 'cancelled':\n        this.uploadingArchive = false\n        this.uploadPercents = 0\n\n        this.enableRetryAfterError = false\n        this.error = ''\n        break\n\n      case 'uploading':\n        this.uploadPercents = state.progress\n        break\n\n      case 'complete':\n        this.archiveUploadFinished = true\n        this.uploadPercents = 100\n        this.uploadingArchive = false\n\n        break\n    }\n  }\n\n  onFileChange (event: Event | { target: HTMLInputElement }) {\n    const inputEl = event.target as HTMLInputElement\n    const file = inputEl.files[0]\n    if (!file) return\n\n    const user = this.authService.getUser()\n\n    if (user.videoQuota !== -1 && this.videoQuotaUsed() + file.size > user.videoQuota) {\n      const bytePipes = new BytesPipe()\n      const fileSizeBytes = bytePipes.transform(file.size, 0)\n      const videoQuotaUsedBytes = bytePipes.transform(this.videoQuotaUsed(), 0)\n      const videoQuotaBytes = bytePipes.transform(user.videoQuota, 0)\n\n      this.notifier.error(\n        // eslint-disable-next-line max-len\n        $localize`Cannot import this file as your video quota would be exceeded (import size: ${fileSizeBytes}, used: ${videoQuotaUsedBytes}, quota: ${videoQuotaBytes})`\n      )\n\n      inputEl.value = ''\n\n      return\n    }\n\n    this.fileToUpload = file\n\n    this.uploadFile(file)\n  }\n\n  cancelUpload () {\n    this.resumableUploadService.control({ action: 'cancel' })\n  }\n\n  retryUpload () {\n    this.enableRetryAfterError = false\n    this.error = ''\n    this.uploadFile(this.fileToUpload)\n  }\n\n  hasPendingImport () {\n    if (!this.latestImport) return false\n\n    const state = this.latestImport.state.id\n    return state === UserImportState.PENDING || state === UserImportState.PROCESSING\n  }\n\n  private uploadFile (file: File) {\n    this.resumableUploadService.handleFiles(file, {\n      endpoint: `${UserImportExportService.BASE_USER_IMPORTS_URL}${this.authService.getUser().id}/imports/import-resumable`,\n      multiple: false,\n\n      maxChunkSize: this.server.getHTMLConfig().client.videos.resumableUpload.maxChunkSize,\n\n      token: this.authService.getAccessToken(),\n\n      uploaderClass: UploaderX,\n\n      retryConfig: getUploadXRetryConfig(),\n\n      metadata: {\n        filename: file.name\n      }\n    })\n\n    this.uploadingArchive = true\n  }\n\n  private handleUploadError (err: HttpErrorResponse) {\n    // Reset progress\n    this.uploadPercents = 0\n    this.enableRetryAfterError = true\n\n    this.error = genericUploadErrorHandler({\n      err,\n      name: $localize`archive`,\n      notifier: this.notifier,\n      sticky: false\n    })\n\n    if (err.status === HttpStatusCode.UNSUPPORTED_MEDIA_TYPE_415) {\n      this.cancelUpload()\n    }\n  }\n\n  private refreshTokenAndRetryUpload () {\n    this.authService.refreshAccessToken()\n      .subscribe(() => this.retryUpload())\n  }\n}\n","<div class=\"pt-two-cols\">\n\n  <div class=\"title-col\">\n    <h2 i18n>EXPORT</h2>\n  </div>\n\n  <div class=\"content-col\">\n\n    @if (isExportEnabled()) {\n\n      <p i18n>You can request an archive of your account containing:</p>\n\n      <ul>\n        <li i18n>Your account settings with avatar file</li>\n        <li i18n>Your channels with banner and avatar files</li>\n        <li i18n>Your muted accounts and servers</li>\n        <li i18n>Your comments</li>\n        <li i18n>Your likes and dislikes</li>\n        <li i18n>Your subscriptions and followers</li>\n        <li i18n>Your video playlists with thumbnail files</li>\n        <li i18n>Your videos with thumbnail, caption files. Video files can also be included in the archive</li>\n        <li i18n>Your video history</li>\n      </ul>\n\n      <p i18n>The exported data will contain multiple directories:</p>\n\n      <ul>\n        <li i18n>A directory containing an export in ActivityPub format, readable by any compliant software</li>\n        <li i18n>A directory containing an export in custom PeerTube JSON format that can be used to re-import your account on another PeerTube instance</li>\n        <li i18n>A directory containing static files (thumbnails, avatars, video files etc.)</li>\n      </ul>\n\n      <p i18n>You can only request one archive at a time.</p>\n\n      @if (isEmailEnabled()) {\n        <p i18n>An email will be sent when the export archive is available.</p>\n      }\n\n      <table *ngIf=\"userExports && userExports.length !== 0\">\n        <tr>\n          <th i18n scope=\"column\">Date</th>\n          <th i18n scope=\"column\">State</th>\n          <th i18n scope=\"column\">Size</th>\n          <th i18n scope=\"column\">Expires on</th>\n          <th></th>\n        </tr>\n\n        <tr *ngFor=\"let export of userExports\">\n          <td>{{ export.createdAt | ptDate: 'medium' }}</td>\n          <td>{{ export.state.label }}</td>\n\n          <td>\n            <ng-container *ngIf=\"export.size\">{{ export.size | bytes }}</ng-container>\n          </td>\n\n          <td>\n            <ng-container *ngIf=\"export.expiresOn\">{{ export.expiresOn | ptDate: 'medium' }}</ng-container>\n          </td>\n\n          <td>\n            <a i18n *ngIf=\"export.privateDownloadUrl\" [href]=\"export.privateDownloadUrl\" class=\"peertube-button-link secondary-button\">Download your archive</a>\n          </td>\n        </tr>\n      </table>\n\n      <div class=\"mt-3\">\n        <input\n          class=\"peertube-button primary-button\"\n          [disabled]=\"isRequestArchiveDisabled()\"\n          (click)=\"openNewArchiveModal()\"\n          type=\"submit\" i18n-value value=\"Request a new archive\"\n        >\n      </div>\n    } @else {\n      <p i18n>User export is not enabled by your administrator.</p>\n    }\n\n  </div>\n</div>\n\n<ng-template #exportModal let-hide=\"close\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\" i18n>Archive settings</h4>\n\n    <button class=\"border-0 p-0\" title=\"Close this modal\" i18n-title (click)=\"hide()\">\n      <my-global-icon iconName=\"cross\"></my-global-icon>\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n\n    <my-alert i18n type=\"warning\" *ngIf=\"hasAlreadyACompletedArchive()\">\n      You already have an active archive. Requesting a new export archive will remove the current one.\n    </my-alert>\n\n    <my-alert *ngIf=\"errorInModal\" type=\"danger\">{{ errorInModal }}</my-alert>\n\n    <my-peertube-checkbox\n      inputName=\"exportWithVideos\" [(ngModel)]=\"exportWithVideosFiles\"\n      i18n-labelText labelText=\"Include video files in archive file\"\n    >\n      <ng-container ngProjectAs=\"description\">\n        <div i18n>Including video files is required if you want to re-import your videos on another PeerTube website</div>\n        <div *ngIf=\"archiveWeightEstimation\" i18n>If you include video files, the archive file will weigh <strong>approximately {{ archiveWeightEstimation | bytes }}</strong></div>\n      </ng-container>\n    </my-peertube-checkbox>\n\n  </div>\n\n  <div class=\"modal-footer inputs\">\n    <input\n      type=\"button\" role=\"button\" i18n-value value=\"Cancel\" class=\"peertube-button secondary-button\"\n      (click)=\"hide()\" (key.enter)=\"hide()\"\n    >\n\n    <input\n      type=\"submit\" i18n-value value=\"Request an archive\" class=\"peertube-button primary-button\"\n      (click)=\"requestNewArchive()\"\n    />\n  </div>\n</ng-template>\n","import { NgFor, NgIf } from '@angular/common'\nimport { Component, OnInit, inject, input, viewChild } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { AuthService, ServerService } from '@app/core'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { PTDatePipe } from '@app/shared/shared-main/common/date.pipe'\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { PeerTubeProblemDocument, ServerErrorCode, UserExport, UserExportState } from '@peertube/peertube-models'\nimport { concatMap, from, of, switchMap, toArray } from 'rxjs'\nimport { PeertubeCheckboxComponent } from '../../shared/shared-forms/peertube-checkbox.component'\nimport { GlobalIconComponent } from '../../shared/shared-icons/global-icon.component'\nimport { BytesPipe } from '../../shared/shared-main/common/bytes.pipe'\nimport { UserImportExportService } from './user-import-export.service'\n\n@Component({\n  selector: 'my-account-export',\n  templateUrl: './my-account-export.component.html',\n  styleUrls: [ './my-account-export.component.scss' ],\n  imports: [ NgIf, NgFor, GlobalIconComponent, PeertubeCheckboxComponent, FormsModule, PTDatePipe, BytesPipe, AlertComponent ]\n})\nexport class MyAccountExportComponent implements OnInit {\n  private authService = inject(AuthService)\n  private server = inject(ServerService)\n  private userImportExportService = inject(UserImportExportService)\n  private modalService = inject(NgbModal)\n\n  readonly exportModal = viewChild<NgbModal>('exportModal')\n\n  readonly videoQuotaUsed = input<number>(undefined)\n\n  userExports: UserExport[] = []\n\n  exportWithVideosFiles: boolean\n  errorInModal: string\n\n  archiveWeightEstimation: number\n\n  private exportModalOpened: NgbModalRef\n  private requestingArchive = false\n\n  ngOnInit () {\n    this.archiveWeightEstimation = this.videoQuotaUsed()\n\n    this.reloadUserExports()\n  }\n\n  isExportEnabled () {\n    return this.server.getHTMLConfig().export.users.enabled\n  }\n\n  isEmailEnabled () {\n    return this.server.getHTMLConfig().email.enabled\n  }\n\n  isRequestArchiveDisabled () {\n    return this.userExports.some(e => {\n      const id = e.state.id\n\n      return id === UserExportState.PENDING || id === UserExportState.PROCESSING\n    })\n  }\n\n  hasAlreadyACompletedArchive () {\n    return this.userExports.some(e => e.state.id === UserExportState.COMPLETED)\n  }\n\n  openNewArchiveModal () {\n    this.exportWithVideosFiles = false\n    this.errorInModal = undefined\n\n    this.exportModalOpened = this.modalService.open(this.exportModal(), { centered: true })\n  }\n\n  requestNewArchive () {\n    if (this.requestingArchive) return\n    this.requestingArchive = true\n\n    let baseObs = of<any>(true)\n\n    if (this.userExports.length !== 0) {\n      baseObs = from(this.userExports.map(e => e.id))\n        .pipe(\n          concatMap(id => this.userImportExportService.deleteUserExport({ userId: this.getUserId(), userExportId: id })),\n          toArray()\n        )\n    }\n\n    baseObs.pipe(\n      switchMap(() => {\n        return this.userImportExportService.requestNewUserExport({ withVideoFiles: this.exportWithVideosFiles, userId: this.getUserId() })\n      })\n    ).subscribe({\n      next: () => {\n        this.reloadUserExports()\n\n        this.exportModalOpened.close()\n        this.requestingArchive = false\n      },\n\n      error: err => {\n        this.requestingArchive = false\n\n        const error = err.body as PeerTubeProblemDocument\n\n        if (error.code === ServerErrorCode.MAX_USER_VIDEO_QUOTA_EXCEEDED_FOR_USER_EXPORT) {\n          this.errorInModal =\n            // eslint-disable-next-line max-len\n            $localize`Video files cannot be included in the export because you have exceeded the maximum video quota allowed by your administrator to export this archive.`\n          return\n        }\n\n        this.errorInModal = err.message\n      }\n    })\n  }\n\n  private reloadUserExports () {\n    if (!this.isExportEnabled()) return\n\n    this.userImportExportService.listUserExports({ userId: this.authService.getUser().id })\n      .subscribe(({ data }) => this.userExports = data)\n  }\n\n  private getUserId () {\n    return this.authService.getUser().id\n  }\n}\n","import { Component, OnInit, inject, viewChild } from '@angular/core'\nimport { CanComponentDeactivate, UserService } from '@app/core'\n\nimport { MyAccountExportComponent } from './my-account-export.component'\nimport { MyAccountImportComponent } from './my-account-import.component'\n\n@Component({\n  selector: 'my-account-import-export',\n  templateUrl: './my-account-import-export.component.html',\n  imports: [ MyAccountImportComponent, MyAccountExportComponent ]\n})\nexport class MyAccountImportExportComponent implements OnInit, CanComponentDeactivate {\n  private userService = inject(UserService)\n\n  readonly accountImport = viewChild<MyAccountImportComponent>('accountImport')\n\n  videoQuotaUsed: number\n\n  ngOnInit () {\n    this.userService.getMyVideoQuotaUsed()\n      .subscribe(res => this.videoQuotaUsed = res.videoQuotaUsed)\n  }\n\n  canDeactivate () {\n    return this.accountImport()?.canDeactivate() || { canDeactivate: true }\n  }\n}\n","<my-account-import #accountImport [videoQuotaUsed]=\"videoQuotaUsed\" class=\"d-block mb-5\"></my-account-import>\n\n<my-account-export [videoQuotaUsed]=\"videoQuotaUsed\"></my-account-export>\n","<div class=\"header\">\n  <div class=\"peertube-select-container me-auto\">\n    <select [(ngModel)]=\"notificationSortType\" (ngModelChange)=\"onChangeSortColumn()\" class=\"form-control\" i18n-ariaLabel aria-label=\"Sort by\">\n      <option value=\"createdAt\" i18n>Newest first</option>\n      <option value=\"read\" [disabled]=\"!hasUnreadNotifications()\" i18n>Unread first</option>\n    </select>\n  </div>\n\n  <a class=\"peertube-button-link secondary-button\" routerLink=\"/my-account/settings\" fragment=\"notifications\">\n    <my-global-icon iconName=\"cog\" aria-hidden=\"true\"></my-global-icon>\n    <span i18n>Notification preferences</span>\n  </a>\n\n  <button class=\"peertube-button secondary-button\" [disabled]=\"!hasUnreadNotifications()\" (click)=\"markAllAsRead()\">\n    <ng-container *ngIf=\"hasUnreadNotifications()\">\n      <my-global-icon iconName=\"tick\" aria-hidden=\"true\"></my-global-icon>\n\n      <span i18n>Mark all as read</span>\n    </ng-container>\n\n    <ng-container *ngIf=\"!hasUnreadNotifications()\">\n      <my-global-icon iconName=\"circle-tick\" aria-hidden=\"true\"></my-global-icon>\n\n      <span i18n>All read</span>\n    </ng-container>\n  </button>\n</div>\n\n<my-user-notifications #userNotification></my-user-notifications>\n","import { Component, viewChild } from '@angular/core'\nimport { UserNotificationsComponent } from '@app/shared/standalone-notifications/user-notifications.component'\nimport { NgIf } from '@angular/common'\nimport { FormsModule } from '@angular/forms'\nimport { GlobalIconComponent } from '../../shared/shared-icons/global-icon.component'\nimport { RouterLink } from '@angular/router'\n\ntype NotificationSortType = 'createdAt' | 'read'\n\n@Component({\n  templateUrl: './my-account-notifications.component.html',\n  styleUrls: [ './my-account-notifications.component.scss' ],\n  imports: [ RouterLink, GlobalIconComponent, FormsModule, NgIf, UserNotificationsComponent ]\n})\nexport class MyAccountNotificationsComponent {\n  readonly userNotification = viewChild<UserNotificationsComponent>('userNotification')\n\n  _notificationSortType: NotificationSortType = 'createdAt'\n\n  get notificationSortType () {\n    return !this.hasUnreadNotifications()\n      ? 'createdAt'\n      : this._notificationSortType\n  }\n\n  set notificationSortType (type: NotificationSortType) {\n    this._notificationSortType = type\n  }\n\n  markAllAsRead () {\n    this.userNotification().markAllAsRead()\n  }\n\n  hasUnreadNotifications () {\n    return this.userNotification().notifications.filter(n => n.read === false).length !== 0\n  }\n\n  onChangeSortColumn () {\n    this.userNotification().changeSortColumn(this.notificationSortType)\n  }\n}\n","import { Component, inject, input } from '@angular/core'\nimport { AuthService, ConfirmService, Notifier, RedirectService, User, UserService } from '@app/core'\n\n@Component({\n  selector: 'my-account-danger-zone',\n  templateUrl: './my-account-danger-zone.component.html',\n  standalone: true\n})\nexport class MyAccountDangerZoneComponent {\n  private authService = inject(AuthService)\n  private notifier = inject(Notifier)\n  private userService = inject(UserService)\n  private confirmService = inject(ConfirmService)\n  private redirectService = inject(RedirectService)\n\n  readonly user = input<User>(undefined)\n\n  async deleteMe () {\n    const res = await this.confirmService.confirmWithExpectedInput(\n      $localize`Are you sure you want to delete your account?` +\n        '<br /><br />' +\n        // eslint-disable-next-line max-len\n        $localize`This will delete all your data, including channels, videos, comments and you won't be able to create another user on this instance with \"${this.user().username}\" username.` +\n        '<br /><br />' +\n        $localize`Content cached by other servers and other third-parties might make longer to be deleted.`,\n      $localize`Type your username to confirm`,\n      this.user().username,\n      $localize`Delete your account`,\n      $localize`Delete my account`\n    )\n    if (res === false) return\n\n    this.userService.deleteMe()\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Your account is deleted.`)\n\n          this.authService.logout()\n          this.redirectService.redirectToHomepage()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n}\n","<div class=\"delete-me\">\n  <p i18n>Once you delete your account, there is no going back. You will be asked to confirm this action.</p>\n\n  <button class=\"peertube-button danger-button\" (click)=\"deleteMe()\" i18n>Delete your account</button>\n</div>\n\n","<my-alert *ngIf=\"error\" type=\"danger\">{{ error }}</my-alert>\n<my-alert *ngIf=\"success\" type=\"success\">{{ success }}</my-alert>\n\n<div class=\"pending-email\" *ngIf=\"user.pendingEmail\">\n  <div i18n>\n    <strong>{{ user.pendingEmail }}</strong> is awaiting email verification.\n  </div>\n\n  @if (verificationEmailSent) {\n    <div i18n>Email verification sent!</div>\n  } @else {\n    <button type=\"button\" class=\"peertube-button-like-link\" i18n (click)=\"resendVerificationEmail()\">Resend your verification email</button>\n  }\n</div>\n\n<form class=\"change-email\" (ngSubmit)=\"changeEmail()\" [formGroup]=\"form\">\n\n  <div class=\"form-group\">\n    <label i18n for=\"new-email\">Change your email</label>\n\n    <div i18n class=\"form-group-description\">\n      Your current email is <strong>{{ user.email }}</strong>\n    </div>\n\n    <input\n      type=\"email\" id=\"new-email\" i18n-placeholder placeholder=\"New email\" class=\"form-control\"\n      formControlName=\"new-email\" [ngClass]=\"{ 'input-error': formErrors['new-email'] }\"\n    >\n    <div *ngIf=\"formErrors['new-email']\" class=\"form-error\" role=\"alert\">\n      {{ formErrors['new-email'] }}\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <my-input-text\n      formControlName=\"password\" inputId=\"password\" i18n-placeholder placeholder=\"Current password\"\n      [formError]=\"formErrors['password']\" autocomplete=\"current-password\"\n    ></my-input-text>\n  </div>\n\n  <input class=\"peertube-button primary-button\" type=\"submit\" i18n-value value=\"Change email\" [disabled]=\"!form.valid\">\n</form>\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, OnInit, inject } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { AuthService, ServerService, UserService } from '@app/core'\nimport { LOGIN_PASSWORD_VALIDATOR } from '@app/shared/form-validators/login-validators'\nimport { USER_EMAIL_VALIDATOR } from '@app/shared/form-validators/user-validators'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { HttpStatusCode, User } from '@peertube/peertube-models'\nimport { forkJoin } from 'rxjs'\nimport { tap } from 'rxjs/operators'\nimport { InputTextComponent } from '../../../shared/shared-forms/input-text.component'\n\n@Component({\n  selector: 'my-account-change-email',\n  templateUrl: './my-account-change-email.component.html',\n  styleUrls: [ './my-account-change-email.component.scss' ],\n  imports: [ NgIf, FormsModule, ReactiveFormsModule, NgClass, InputTextComponent, AlertComponent ]\n})\nexport class MyAccountChangeEmailComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private authService = inject(AuthService)\n  private userService = inject(UserService)\n  private serverService = inject(ServerService)\n\n  verificationEmailSent = false\n  error: string\n  success: string\n  user: User\n\n  ngOnInit () {\n    this.buildForm({\n      'new-email': USER_EMAIL_VALIDATOR,\n      'password': LOGIN_PASSWORD_VALIDATOR\n    })\n\n    this.user = this.authService.getUser()\n  }\n\n  changeEmail () {\n    this.error = null\n    this.success = null\n\n    const password = this.form.value['password']\n    const email = this.form.value['new-email']\n\n    forkJoin([\n      this.serverService.getConfig(),\n      this.userService.changeEmail(password, email)\n    ]).pipe(tap(() => this.authService.refreshUserInformation()))\n      .subscribe({\n        next: ([ config ]) => {\n          this.form.reset()\n\n          if (config.signup.requiresEmailVerification) {\n            this.success = $localize`Please check your emails to verify your new email.`\n          } else {\n            this.success = $localize`Email updated.`\n          }\n        },\n\n        error: err => {\n          if (err.status === HttpStatusCode.UNAUTHORIZED_401) {\n            this.error = $localize`You current password is invalid.`\n            return\n          }\n\n          this.error = err.message\n        }\n      })\n  }\n\n  resendVerificationEmail () {\n    this.userService.askSendVerifyEmail(this.user.pendingEmail).subscribe({\n      next: () => {\n        this.verificationEmailSent = true\n      },\n\n      error: err => {\n        this.error = err.message\n      }\n    })\n  }\n}\n","<form (ngSubmit)=\"updateEmailPublic()\" [formGroup]=\"form\">\n\n  <div class=\"form-group\">\n    <my-peertube-checkbox\n      inputName=\"email-public\" formControlName=\"email-public\"\n      i18n-labelText labelText=\"Allow email to be publicly displayed\"\n    >\n      <ng-container ngProjectAs=\"description\">\n        <p class=\"mb-0\">\n          @if (user().emailVerified) {\n            <ng-container i18n>Necessary to claim podcast RSS feeds.</ng-container>\n          } @else {\n            <ng-container i18n>⚠️ Your email cannot be used in podcast RSS feeds because it has not yet been verified.</ng-container>\n          }\n          </p>\n      </ng-container>\n    </my-peertube-checkbox>\n  </div>\n\n  <input class=\"peertube-button primary-button\" type=\"submit\" i18n-value value=\"Save email settings\" [disabled]=\"!form.valid\">\n</form>\n","import { Component, OnInit, inject, model } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { Notifier, UserService } from '@app/core'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { User, UserUpdateMe } from '@peertube/peertube-models'\nimport { PeertubeCheckboxComponent } from '../../../shared/shared-forms/peertube-checkbox.component'\n\n@Component({\n  selector: 'my-account-email-preferences',\n  templateUrl: './my-account-email-preferences.component.html',\n  styleUrls: [ './my-account-email-preferences.component.scss' ],\n  imports: [ FormsModule, ReactiveFormsModule, PeertubeCheckboxComponent ]\n})\nexport class MyAccountEmailPreferencesComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private userService = inject(UserService)\n  private notifier = inject(Notifier)\n\n  readonly user = model<User>(undefined)\n\n  ngOnInit () {\n    this.buildForm({\n      'email-public': null\n    })\n\n    this.form.patchValue({ 'email-public': this.user().emailPublic })\n  }\n\n  updateEmailPublic () {\n    const details: UserUpdateMe = {\n      emailPublic: this.form.value['email-public']\n    }\n\n    this.userService.updateMyProfile(details)\n      .subscribe({\n        next: () => {\n          if (details.emailPublic) this.notifier.success($localize`Email is now public`)\n          else this.notifier.success($localize`Email is now private`)\n\n          this.user.update(u => ({ ...u, emailPublic: details.emailPublic }))\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n}\n","<div class=\"two-factor\">\n  <ng-container *ngIf=\"!twoFactorEnabled\">\n    <p i18n>Two factor authentication adds an additional layer of security to your account by requiring a numeric code from another device (most commonly mobile phones) when you log in.</p>\n\n    <my-button [ptRouterLink]=\"[ '/my-account/two-factor-auth' ]\" theme=\"primary\" i18n>Enable two-factor authentication</my-button>\n  </ng-container>\n\n  <ng-container *ngIf=\"twoFactorEnabled\">\n    <my-button theme=\"primary\" (click)=\"disableTwoFactor()\" i18n>Disable two-factor authentication</my-button>\n  </ng-container>\n\n</div>\n","import { NgIf } from '@angular/common'\nimport { Component, OnInit, inject, input } from '@angular/core'\nimport { AuthService, ConfirmService, Notifier, User } from '@app/core'\nimport { TwoFactorService } from '@app/shared/shared-users/two-factor.service'\nimport { ButtonComponent } from '../../../shared/shared-main/buttons/button.component'\n\n@Component({\n  selector: 'my-account-two-factor-button',\n  templateUrl: './my-account-two-factor-button.component.html',\n  imports: [ NgIf, ButtonComponent ]\n})\nexport class MyAccountTwoFactorButtonComponent implements OnInit {\n  private notifier = inject(Notifier)\n  private twoFactorService = inject(TwoFactorService)\n  private confirmService = inject(ConfirmService)\n  private auth = inject(AuthService)\n\n  readonly user = input<User>(undefined)\n\n  twoFactorEnabled = false\n\n  ngOnInit () {\n    this.twoFactorEnabled = this.user().twoFactorEnabled\n  }\n\n  async disableTwoFactor () {\n    const message = $localize`Are you sure you want to disable two factor authentication of your account?`\n\n    const { confirmed, password } = await this.confirmService.confirmWithPassword({ message, title: $localize`Disable two factor` })\n    if (confirmed === false) return\n\n    this.twoFactorService.disableTwoFactor({ userId: this.user().id, currentPassword: password })\n      .subscribe({\n        next: () => {\n          this.twoFactorEnabled = false\n\n          this.auth.refreshUserInformation()\n\n          this.notifier.success($localize`Two factor authentication disabled`)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n}\n","<my-alert *ngIf=\"error\" type=\"danger\">{{ error }}</my-alert>\n\n<form (ngSubmit)=\"changePassword()\" [formGroup]=\"form\">\n\n  <label i18n for=\"current-password\">Change password</label>\n  <my-input-text\n    formControlName=\"current-password\" inputId=\"current-password\" i18n-placeholder placeholder=\"Current password\"\n    [formError]=\"formErrors['current-password']\" autocomplete=\"current-password\"\n  ></my-input-text>\n\n  <my-input-text\n    formControlName=\"new-password\" inputId=\"new-password\" i18n-placeholder placeholder=\"New password\"\n    [formError]=\"formErrors['new-password']\" autocomplete=\"new-password\"\n  ></my-input-text>\n\n  <my-input-text\n    formControlName=\"new-confirmed-password\" inputId=\"new-confirmed-password\" i18n-placeholder placeholder=\"Confirm new password\"\n    [formError]=\"formErrors['new-confirmed-password']\" autocomplete=\"new-password\"\n  ></my-input-text>\n\n  <input class=\"mt-3 peertube-button primary-button\" type=\"submit\" i18n-value value=\"Change password\" [disabled]=\"!form.valid\">\n</form>\n","import { NgIf } from '@angular/common'\nimport { Component, OnInit, inject } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { AuthService, Notifier, UserService } from '@app/core'\nimport {\n  USER_CONFIRM_PASSWORD_VALIDATOR,\n  USER_EXISTING_PASSWORD_VALIDATOR,\n  USER_PASSWORD_VALIDATOR\n} from '@app/shared/form-validators/user-validators'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\nimport { HttpStatusCode, User } from '@peertube/peertube-models'\nimport { filter } from 'rxjs/operators'\nimport { InputTextComponent } from '../../../shared/shared-forms/input-text.component'\n\n@Component({\n  selector: 'my-account-change-password',\n  templateUrl: './my-account-change-password.component.html',\n  styleUrls: [ './my-account-change-password.component.scss' ],\n  imports: [ NgIf, FormsModule, ReactiveFormsModule, InputTextComponent, AlertComponent ]\n})\nexport class MyAccountChangePasswordComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private notifier = inject(Notifier)\n  private authService = inject(AuthService)\n  private userService = inject(UserService)\n\n  error: string\n  user: User\n\n  ngOnInit () {\n    this.buildForm({\n      'current-password': USER_EXISTING_PASSWORD_VALIDATOR,\n      'new-password': USER_PASSWORD_VALIDATOR,\n      'new-confirmed-password': USER_CONFIRM_PASSWORD_VALIDATOR\n    })\n\n    this.user = this.authService.getUser()\n\n    const confirmPasswordControl = this.form.get('new-confirmed-password')\n\n    confirmPasswordControl.valueChanges\n      .pipe(filter(v => v !== this.form.value['new-password']))\n      .subscribe(() => confirmPasswordControl.setErrors({ matchPassword: true }))\n  }\n\n  changePassword () {\n    const currentPassword = this.form.value['current-password']\n    const newPassword = this.form.value['new-password']\n\n    this.userService.changePassword(currentPassword, newPassword)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Password updated.`)\n\n          this.form.reset()\n          this.error = null\n        },\n\n        error: err => {\n          if (err.status === HttpStatusCode.UNAUTHORIZED_401) {\n            this.error = $localize`You current password is invalid.`\n            return\n          }\n\n          this.error = err.message\n        }\n      })\n  }\n}\n","<div *ngIf=\"webNotifications\">\n  <ng-container *ngFor=\"let group of notificationSettingGroups\">\n    <ng-container *ngIf=\"hasNotificationsInGroup(group)\">\n      <div class=\"header notification-row\">\n        <div i18n>{{ group.label }}</div>\n        <div i18n>Web</div>\n        <div i18n *ngIf=\"emailEnabled\">Email</div>\n      </div>\n\n      <ng-container *ngFor=\"let notificationType of group.keys\">\n        <div class=\"small notification-row\" *ngIf=\"hasUserRight(notificationType)\">\n          <div>{{ labelNotifications[notificationType] }}</div>\n\n          <div>\n            <my-input-switch\n              [label]=\"getWebLabel(notificationType)\"\n              [inputName]=\"'web-notification-' + notificationType\"\n              [(ngModel)]=\"webNotifications[notificationType]\"\n              (ngModelChange)=\"updateWebSetting(notificationType, webNotifications[notificationType])\"\n            ></my-input-switch>\n          </div>\n\n          <div *ngIf=\"emailEnabled\">\n            <my-input-switch\n              [label]=\"getEmailLabel(notificationType)\"\n              [inputName]=\"'email-notification-' + notificationType\"\n              [(ngModel)]=\"emailNotifications[notificationType]\"\n              (ngModelChange)=\"updateEmailSetting(notificationType, emailNotifications[notificationType])\"\n            ></my-input-switch>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n","import { NgFor, NgIf } from '@angular/common'\nimport { Component, OnInit, inject, model } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { Notifier, ServerService, User } from '@app/core'\nimport { UserNotificationService } from '@app/shared/shared-main/users/user-notification.service'\nimport { objectKeysTyped } from '@peertube/peertube-core-utils'\nimport { UserNotificationSetting, UserNotificationSettingValue, UserRight, UserRightType } from '@peertube/peertube-models'\nimport { debounce } from 'lodash-es'\nimport { InputSwitchComponent } from '../../../shared/shared-forms/input-switch.component'\n\n@Component({\n  selector: 'my-account-notification-preferences',\n  templateUrl: './my-account-notification-preferences.component.html',\n  styleUrls: [ './my-account-notification-preferences.component.scss' ],\n  imports: [ NgIf, NgFor, InputSwitchComponent, FormsModule ]\n})\nexport class MyAccountNotificationPreferencesComponent implements OnInit {\n  private userNotificationService = inject(UserNotificationService)\n  private serverService = inject(ServerService)\n  private notifier = inject(Notifier)\n\n  readonly user = model<User>(undefined)\n\n  notificationSettingGroups: { label: string, keys: (keyof UserNotificationSetting)[] }[] = []\n  emailNotifications: { [id in keyof UserNotificationSetting]?: boolean } = {}\n  webNotifications: { [id in keyof UserNotificationSetting]?: boolean } = {}\n  labelNotifications: { [id in keyof UserNotificationSetting]?: string } = {}\n  rightNotifications: { [id in keyof Partial<UserNotificationSetting>]?: UserRightType } = {}\n  emailEnabled = false\n\n  private savePreferences = debounce(this.savePreferencesImpl.bind(this), 500)\n\n  constructor () {\n    this.notificationSettingGroups = [\n      {\n        label: $localize`Social`,\n        keys: [\n          'newVideoFromSubscription',\n          'newFollow',\n          'commentMention'\n        ]\n      },\n\n      {\n        label: $localize`Your videos`,\n        keys: [\n          'newCommentOnMyVideo',\n          'blacklistOnMyVideo',\n          'myVideoPublished',\n          'myVideoImportFinished',\n          'myVideoStudioEditionFinished',\n          'myVideoTranscriptionGenerated'\n        ]\n      },\n\n      {\n        label: $localize`Moderation`,\n        keys: [\n          'abuseStateChange',\n          'abuseNewMessage',\n          'abuseAsModerator',\n          'videoAutoBlacklistAsModerator',\n          'newUserRegistration'\n        ]\n      },\n\n      {\n        label: $localize`Administration`,\n        keys: [\n          'newInstanceFollower',\n          'autoInstanceFollowing',\n          'newPeerTubeVersion',\n          'newPluginVersion'\n        ]\n      }\n    ]\n\n    this.rightNotifications = {\n      abuseAsModerator: UserRight.MANAGE_ABUSES,\n      videoAutoBlacklistAsModerator: UserRight.MANAGE_VIDEO_BLACKLIST,\n      newUserRegistration: UserRight.MANAGE_USERS,\n      newInstanceFollower: UserRight.MANAGE_SERVER_FOLLOW,\n      autoInstanceFollowing: UserRight.MANAGE_CONFIGURATION,\n      newPeerTubeVersion: UserRight.MANAGE_DEBUG,\n      newPluginVersion: UserRight.MANAGE_DEBUG\n    }\n  }\n\n  ngOnInit () {\n    const config = this.serverService.getHTMLConfig()\n    this.emailEnabled = config.email.enabled\n\n    this.labelNotifications = {\n      newVideoFromSubscription: $localize`New video or live from your subscriptions`,\n      newCommentOnMyVideo: $localize`New comment on your video`,\n      abuseAsModerator: $localize`New abuse`,\n      videoAutoBlacklistAsModerator: $localize`An automatically blocked video is awaiting review`,\n      blacklistOnMyVideo: $localize`One of your video is blocked/unblocked`,\n      myVideoPublished: $localize`Video published (after transcoding/scheduled update)`,\n      myVideoImportFinished: $localize`Video import finished`,\n      newUserRegistration: $localize`A new user registered on ${config.instance.name}`,\n      newFollow: $localize`You or one of your channels has a new follower`,\n      commentMention: $localize`Someone mentioned you in video comments`,\n      newInstanceFollower: $localize`${config.instance.name} has a new follower`,\n      autoInstanceFollowing: $localize`${config.instance.name} automatically followed another platform`,\n      abuseNewMessage: $localize`An abuse report received a new message`,\n      abuseStateChange: $localize`One of your abuse reports has been accepted or rejected by moderators`,\n      newPeerTubeVersion: $localize`A new PeerTube version is available`,\n      newPluginVersion: $localize`One of your plugin/theme has a new available version`,\n      myVideoStudioEditionFinished: $localize`Processing of edits has finished`,\n      myVideoTranscriptionGenerated: $localize`The transcription of your video has been generated`\n    }\n\n    this.loadNotificationSettings()\n  }\n\n  hasUserRight (field: keyof UserNotificationSetting) {\n    const rightToHave = this.rightNotifications[field]\n    if (!rightToHave) return true // No rights needed\n\n    return this.user().hasRight(rightToHave)\n  }\n\n  hasNotificationsInGroup (group: { keys: (keyof UserNotificationSetting)[] }) {\n    return group.keys.some(k => this.hasUserRight(k))\n  }\n\n  getWebLabel (notificationType: keyof UserNotificationSetting) {\n    return `Toggle web notification for \"${this.labelNotifications[notificationType]}\"`\n  }\n\n  getEmailLabel (notificationType: keyof UserNotificationSetting) {\n    return `Toggle email notification for \"${this.labelNotifications[notificationType]}\"`\n  }\n\n  updateEmailSetting (field: keyof UserNotificationSetting, value: boolean) {\n    this.user.update(u => {\n      // FIXME: use immutable user object\n      u.notificationSettings[field] = value === true\n        ? u.notificationSettings[field] | UserNotificationSettingValue.EMAIL\n        : u.notificationSettings[field] & ~UserNotificationSettingValue.EMAIL\n\n      return u\n    })\n\n    this.savePreferences()\n  }\n\n  updateWebSetting (field: keyof UserNotificationSetting, value: boolean) {\n    this.user.update(u => {\n      // FIXME: use immutable user object\n      u.notificationSettings[field] = value === true\n        ? u.notificationSettings[field] | UserNotificationSettingValue.WEB\n        : u.notificationSettings[field] & ~UserNotificationSettingValue.WEB\n\n      return u\n    })\n\n    this.savePreferences()\n  }\n\n  private savePreferencesImpl () {\n    this.userNotificationService.updateNotificationSettings(this.user().notificationSettings)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Preferences saved`, undefined, 2000)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  private loadNotificationSettings () {\n    for (const key of objectKeysTyped(this.user().notificationSettings)) {\n      const value = this.user().notificationSettings[key]\n      this.emailNotifications[key] = !!(value & UserNotificationSettingValue.EMAIL)\n\n      this.webNotifications[key] = !!(value & UserNotificationSettingValue.WEB)\n    }\n  }\n}\n","<my-alert *ngIf=\"error\" type=\"danger\">{{ error }}</my-alert>\n\n<form (ngSubmit)=\"updateMyProfile()\" [formGroup]=\"form\">\n\n  <div class=\"form-group\">\n    <label i18n for=\"username\">Username</label>\n    <input\n      type=\"text\" id=\"username\" class=\"form-control\"\n      formControlName=\"username\" readonly\n    >\n    <div class=\"form-group-description\" i18n>\n      People can find you using &#64;{{ user().username }}&#64;{{ instanceHost }}\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label i18n for=\"display-name\">Display name</label>\n    <input\n      type=\"text\" id=\"display-name\" class=\"form-control\"\n      formControlName=\"display-name\" [ngClass]=\"{ 'input-error': formErrors['display-name'] }\"\n    >\n    <div *ngIf=\"formErrors['display-name']\" class=\"form-error\" role=\"alert\">\n      {{ formErrors['display-name'] }}\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label i18n for=\"description\">Description</label>\n\n    <my-help helpType=\"markdownText\" supportRelMe=\"true\"></my-help>\n\n    <my-markdown-textarea\n      inputId=\"description\" formControlName=\"description\"\n      markdownType=\"enhanced\" [formError]=\"formErrors['description']\" withEmoji=\"true\" withHtml=\"true\"\n    ></my-markdown-textarea>\n\n    <div *ngIf=\"formErrors.description\" class=\"form-error\" role=\"alert\">\n      {{ formErrors.description }}\n    </div>\n  </div>\n\n  <input class=\"mt-3 peertube-button primary-button\" type=\"submit\" i18n-value value=\"Save profile\" [disabled]=\"!form.valid\">\n</form>\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, OnInit, inject, model } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { Notifier, User, UserService } from '@app/core'\nimport { USER_DESCRIPTION_VALIDATOR, USER_DISPLAY_NAME_REQUIRED_VALIDATOR } from '@app/shared/form-validators/user-validators'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { MarkdownTextareaComponent } from '@app/shared/shared-forms/markdown-textarea.component'\nimport { HelpComponent } from '@app/shared/shared-main/buttons/help.component'\nimport { AlertComponent } from '@app/shared/shared-main/common/alert.component'\n\n@Component({\n  selector: 'my-account-profile',\n  templateUrl: './my-account-profile.component.html',\n  styleUrls: [ './my-account-profile.component.scss' ],\n  imports: [ NgIf, FormsModule, ReactiveFormsModule, NgClass, AlertComponent, HelpComponent, MarkdownTextareaComponent ]\n})\nexport class MyAccountProfileComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private notifier = inject(Notifier)\n  private userService = inject(UserService)\n\n  readonly user = model<User>()\n\n  error: string = null\n\n  ngOnInit () {\n    this.buildForm({\n      'username': null,\n      'display-name': USER_DISPLAY_NAME_REQUIRED_VALIDATOR,\n      'description': USER_DESCRIPTION_VALIDATOR\n    })\n    this.form.controls['username'].disable()\n\n    this.form.patchValue({\n      'username': this.user().username,\n      'display-name': this.user().account.displayName,\n      'description': this.user().account.description\n    })\n  }\n\n  get instanceHost () {\n    return window.location.host\n  }\n\n  updateMyProfile () {\n    const displayName = this.form.value['display-name']\n    const description = this.form.value['description'] || null\n\n    this.error = null\n\n    this.userService.updateMyProfile({ displayName, description })\n      .subscribe({\n        next: () => {\n          this.user.update(u => {\n            // FIXME: Use immutability\n            u.account.displayName = displayName\n            u.account.description = description\n\n            return u\n          })\n\n          this.notifier.success($localize`Profile updated.`)\n        },\n\n        error: err => this.error = err.message\n      })\n  }\n}\n","<h1 class=\"visually-hidden\" i18n>Settings</h1>\n\n<div class=\"pt-two-cols mt-3\"> <!-- profile settings grid -->\n  <div class=\"title-col\">\n    <h2 i18n>PROFILE SETTINGS</h2>\n  </div>\n\n  <div class=\"content-col\">\n    <my-actor-avatar-edit\n      *ngIf=\"user?.account\" class=\"d-block mb-3\"\n      actorType=\"account\" [avatars]=\"user.account.avatars\"\n      [displayName]=\"user.account.displayName\" [username]=\"user.username\" [subscribers]=\"user.account.followersCount\"\n      (avatarChange)=\"onAvatarChange($event)\" (avatarDelete)=\"onAvatarDelete()\"\n    ></my-actor-avatar-edit>\n\n    <my-user-quota></my-user-quota>\n\n    <my-account-profile [user]=\"user\"></my-account-profile>\n  </div>\n</div>\n\n<div class=\"pt-two-cols mt-5\"> <!-- interface grid -->\n  <div class=\"title-col\">\n    <h2 i18n>INTERFACE</h2>\n  </div>\n\n  <div class=\"content-col\">\n    <my-user-interface-settings [user]=\"user\" [userInformationLoaded]=\"userInformationLoaded\"></my-user-interface-settings>\n  </div>\n</div>\n\n<div class=\"pt-two-cols mt-5\"> <!-- video settings grid -->\n  <div class=\"title-col\">\n    <div class=\"anchor\" id=\"video-settings\"></div> <!-- video settings anchor -->\n    <h2 i18n>VIDEO SETTINGS</h2>\n  </div>\n\n  <div class=\"content-col\">\n    <my-user-video-settings [user]=\"user\" [userInformationLoaded]=\"userInformationLoaded\"></my-user-video-settings>\n  </div>\n</div>\n\n<div class=\"pt-two-cols mt-5\"> <!-- notifications grid -->\n  <div class=\"title-col\">\n    <div class=\"anchor\" id=\"notifications\"></div> <!-- notifications anchor -->\n    <h2 i18n>NOTIFICATIONS</h2>\n  </div>\n\n  <div class=\"content-col\">\n    <my-account-notification-preferences [user]=\"user\"></my-account-notification-preferences>\n  </div>\n</div>\n\n<div class=\"pt-two-cols mt-5\" *ngIf=\"user.pluginAuth === null\"> <!-- password grid -->\n  <div class=\"title-col\">\n    <h2 i18n>PASSWORD</h2>\n  </div>\n\n  <div class=\"content-col\">\n    <my-account-change-password></my-account-change-password>\n  </div>\n</div>\n\n<div class=\"pt-two-cols mt-5\" *ngIf=\"user.pluginAuth === null\"> <!-- two factor auth grid -->\n  <div class=\"title-col\">\n    <h2 i18n>TWO-FACTOR AUTHENTICATION</h2>\n  </div>\n\n  <div class=\"content-col\">\n    <my-account-two-factor-button [user]=\"user\"></my-account-two-factor-button>\n  </div>\n</div>\n\n<div class=\"pt-two-cols mt-5\" *ngIf=\"user.pluginAuth === null\"> <!-- email grid -->\n  <div class=\"title-col\">\n    <h2 i18n>EMAIL</h2>\n  </div>\n\n  <div class=\"content-col\">\n    <my-account-email-preferences class=\"d-block mb-5\" [user]=\"user\"></my-account-email-preferences>\n\n    <my-account-change-email></my-account-change-email>\n  </div>\n</div>\n\n<div class=\"pt-two-cols mt-5\"> <!-- danger zone grid -->\n  <div class=\"title-col\">\n    <h2 i18n class=\"pt-title-danger\">DANGER ZONE</h2>\n  </div>\n\n  <div class=\"content-col\">\n    <my-account-danger-zone [user]=\"user\"></my-account-danger-zone>\n  </div>\n</div>\n","import { ViewportScroller, NgIf } from '@angular/common'\nimport { HttpErrorResponse } from '@angular/common/http'\nimport { AfterViewChecked, Component, OnInit, inject } from '@angular/core'\nimport { AuthService, Notifier, User, UserService } from '@app/core'\nimport { genericUploadErrorHandler } from '@app/helpers'\nimport { shallowCopy } from '@peertube/peertube-core-utils'\nimport { MyAccountDangerZoneComponent } from './my-account-danger-zone/my-account-danger-zone.component'\nimport { MyAccountChangeEmailComponent } from './my-account-change-email/my-account-change-email.component'\nimport { MyAccountEmailPreferencesComponent } from './my-account-email-preferences/my-account-email-preferences.component'\nimport { MyAccountTwoFactorButtonComponent } from './my-account-two-factor/my-account-two-factor-button.component'\nimport { MyAccountChangePasswordComponent } from './my-account-change-password/my-account-change-password.component'\nimport {\n  MyAccountNotificationPreferencesComponent\n} from './my-account-notification-preferences/my-account-notification-preferences.component'\nimport { UserVideoSettingsComponent } from '../../shared/shared-user-settings/user-video-settings.component'\nimport { UserInterfaceSettingsComponent } from '../../shared/shared-user-settings/user-interface-settings.component'\nimport { MyAccountProfileComponent } from './my-account-profile/my-account-profile.component'\nimport { UserQuotaComponent } from '../../shared/shared-main/users/user-quota.component'\nimport { ActorAvatarEditComponent } from '../../shared/shared-actor-image-edit/actor-avatar-edit.component'\n\n@Component({\n  selector: 'my-account-settings',\n  templateUrl: './my-account-settings.component.html',\n  styleUrls: [ './my-account-settings.component.scss' ],\n  imports: [\n    ActorAvatarEditComponent,\n    UserQuotaComponent,\n    MyAccountProfileComponent,\n    UserInterfaceSettingsComponent,\n    UserVideoSettingsComponent,\n    MyAccountNotificationPreferencesComponent,\n    NgIf,\n    MyAccountChangePasswordComponent,\n    MyAccountTwoFactorButtonComponent,\n    MyAccountEmailPreferencesComponent,\n    MyAccountChangeEmailComponent,\n    MyAccountDangerZoneComponent\n  ]\n})\nexport class MyAccountSettingsComponent implements OnInit, AfterViewChecked {\n  private viewportScroller = inject(ViewportScroller)\n  private userService = inject(UserService)\n  private authService = inject(AuthService)\n  private notifier = inject(Notifier)\n\n  user: User\n\n  private lastScrollHash: string\n\n  get userInformationLoaded () {\n    return this.authService.userInformationLoaded\n  }\n\n  ngOnInit () {\n    this.user = this.authService.getUser()\n  }\n\n  ngAfterViewChecked () {\n    if (window.location.hash && window.location.hash !== this.lastScrollHash) {\n      this.viewportScroller.scrollToAnchor(window.location.hash.replace('#', ''))\n\n      this.lastScrollHash = window.location.hash\n    }\n  }\n\n  onAvatarChange (formData: FormData) {\n    this.userService.changeAvatar(formData)\n      .subscribe({\n        next: data => {\n          this.notifier.success($localize`Avatar changed.`)\n\n          this.user.updateAccountAvatar(data.avatars)\n\n          // So my-actor-avatar component detects changes\n          this.user.account = shallowCopy(this.user.account)\n        },\n\n        error: (err: HttpErrorResponse) =>\n          genericUploadErrorHandler({\n            err,\n            name: $localize`avatar`,\n            notifier: this.notifier\n          })\n      })\n  }\n\n  onAvatarDelete () {\n    this.userService.deleteAvatar()\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Avatar deleted.`)\n\n          this.user.updateAccountAvatar()\n\n          // So my-actor-avatar component detects changes\n          this.user.account = shallowCopy(this.user.account)\n        },\n\n        error: (err: HttpErrorResponse) => this.notifier.error(err.message)\n      })\n  }\n}\n","<div i18n *ngIf=\"twoFactorAlreadyEnabled === true\" class=\"root already-enabled\">\n  Two factor authentication is already enabled.\n</div>\n\n<div class=\"root\" *ngIf=\"twoFactorAlreadyEnabled === false\">\n  <ng-container *ngIf=\"step === 'request'\">\n    <form (ngSubmit)=\"requestTwoFactor()\" [formGroup]=\"formPassword\">\n\n      <label i18n for=\"current-password\">Your password</label>\n      <div class=\"form-group-description\" i18n>Confirm your password to enable two factor authentication</div>\n\n      <my-input-text\n        formControlName=\"current-password\" inputId=\"current-password\" i18n-placeholder placeholder=\"Current password\"\n        [formError]=\"formErrorsPassword['current-password']\" autocomplete=\"current-password\"\n      ></my-input-text>\n\n      <input class=\"peertube-button primary-button mt-3\" type=\"submit\" i18n-value value=\"Confirm\" [disabled]=\"!formPassword.valid\">\n    </form>\n  </ng-container>\n\n  <ng-container *ngIf=\"step === 'confirm'\">\n\n    <p i18n>\n      Scan this QR code into a TOTP app on your phone. This app will generate tokens that you will have to enter when logging in.\n    </p>\n\n    <qrcode [qrdata]=\"twoFactorURI\" [width]=\"256\" level=\"Q\"></qrcode>\n\n    <div i18n>\n      If you can't scan the QR code and need to enter it manually, here is the plain-text secret:\n    </div>\n\n    <div class=\"secret-plain-text\">{{ twoFactorSecret }}</div>\n\n    <form class=\"mt-3\" (ngSubmit)=\"confirmTwoFactor()\" [formGroup]=\"formOTP\">\n\n      <label i18n for=\"otp-token\">Two-factor code</label>\n      <div class=\"form-group-description\" i18n>Enter the code generated by your authenticator app to confirm</div>\n\n      <my-input-text\n        [show]=\"true\" formControlName=\"otp-token\" inputId=\"otp-token\"\n        [formError]=\"formErrorsOTP['otp-token']\" autocomplete=\"otp-token\"\n      ></my-input-text>\n\n      <input class=\"peertube-button primary-button mt-3\" type=\"submit\" i18n-value value=\"Confirm\" [disabled]=\"!formOTP.valid\">\n    </form>\n  </ng-container>\n\n</div>\n","import { NgIf } from '@angular/common'\nimport { Component, OnInit, inject } from '@angular/core'\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { AuthService, Notifier, User } from '@app/core'\nimport { USER_EXISTING_PASSWORD_VALIDATOR, USER_OTP_TOKEN_VALIDATOR } from '@app/shared/form-validators/user-validators'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { TwoFactorService } from '@app/shared/shared-users/two-factor.service'\nimport { QRCodeComponent } from 'angularx-qrcode'\nimport { InputTextComponent } from '../../../shared/shared-forms/input-text.component'\n\n@Component({\n  selector: 'my-account-two-factor',\n  templateUrl: './my-account-two-factor.component.html',\n  styleUrls: [ './my-account-two-factor.component.scss' ],\n  imports: [ NgIf, FormsModule, ReactiveFormsModule, InputTextComponent, QRCodeComponent ]\n})\nexport class MyAccountTwoFactorComponent implements OnInit {\n  private notifier = inject(Notifier)\n  private twoFactorService = inject(TwoFactorService)\n  private formReactiveService = inject(FormReactiveService)\n  private auth = inject(AuthService)\n  private router = inject(Router)\n\n  twoFactorAlreadyEnabled: boolean\n\n  step: 'request' | 'confirm' | 'confirmed' = 'request'\n\n  twoFactorSecret: string\n  twoFactorURI: string\n\n  inPasswordStep = true\n\n  formPassword: FormGroup\n  formErrorsPassword: any\n\n  formOTP: FormGroup\n  formErrorsOTP: any\n\n  private user: User\n  private requestToken: string\n\n  ngOnInit () {\n    this.buildPasswordForm()\n    this.buildOTPForm()\n\n    this.user = this.auth.getUser()\n\n    this.twoFactorAlreadyEnabled = this.user.twoFactorEnabled\n  }\n\n  requestTwoFactor () {\n    this.twoFactorService.requestTwoFactor({\n      userId: this.user.id,\n      currentPassword: this.formPassword.value['current-password']\n    }).subscribe({\n      next: ({ otpRequest }) => {\n        this.requestToken = otpRequest.requestToken\n        this.twoFactorURI = otpRequest.uri\n        this.twoFactorSecret = otpRequest.secret.replace(/(.{4})/g, '$1 ').trim()\n\n        this.step = 'confirm'\n      },\n\n      error: err => this.notifier.error(err.message)\n    })\n  }\n\n  confirmTwoFactor () {\n    this.twoFactorService.confirmTwoFactorRequest({\n      userId: this.user.id,\n      requestToken: this.requestToken,\n      otpToken: this.formOTP.value['otp-token']\n    }).subscribe({\n      next: () => {\n        this.notifier.success($localize`Two factor authentication has been enabled.`)\n\n        this.auth.refreshUserInformation()\n\n        this.router.navigateByUrl('/my-account/settings')\n      },\n\n      error: err => this.notifier.error(err.message)\n    })\n  }\n\n  private buildPasswordForm () {\n    const { form, formErrors } = this.formReactiveService.buildForm({\n      'current-password': USER_EXISTING_PASSWORD_VALIDATOR\n    })\n\n    this.formPassword = form\n    this.formErrorsPassword = formErrors\n  }\n\n  private buildOTPForm () {\n    const { form, formErrors } = this.formReactiveService.buildForm({\n      'otp-token': USER_OTP_TOKEN_VALIDATOR\n    })\n\n    this.formOTP = form\n    this.formErrorsOTP = formErrors\n  }\n}\n","import { Component, OnInit, inject } from '@angular/core'\nimport { RouterOutlet } from '@angular/router'\nimport { AuthUser, PluginService } from '@app/core'\nimport { HorizontalMenuComponent, HorizontalMenuEntry } from '@app/shared/shared-main/menu/horizontal-menu.component'\n\n@Component({\n  selector: 'my-account',\n  templateUrl: './my-account.component.html',\n  imports: [ HorizontalMenuComponent, RouterOutlet ]\n})\nexport class MyAccountComponent implements OnInit {\n  private pluginService = inject(PluginService)\n\n  menuEntries: HorizontalMenuEntry[] = []\n  user: AuthUser\n\n  ngOnInit (): void {\n    this.pluginService.ensurePluginsAreLoaded('my-account')\n      .then(() => this.buildMenu())\n  }\n\n  private buildMenu () {\n    const clientRoutes = this.pluginService.getAllRegisteredClientRoutesForParent('/my-account') || {}\n\n    this.menuEntries = [\n      {\n        label: $localize`Settings`,\n        routerLink: '/my-account/settings'\n      },\n\n      {\n        label: $localize`Notifications`,\n        routerLink: '/my-account/notifications'\n      },\n\n      {\n        label: $localize`Import/Export`,\n        routerLink: '/my-account/import-export'\n      },\n\n      {\n        label: $localize`Applications`,\n        routerLink: '/my-account/applications'\n      },\n\n      {\n        label: $localize`Moderation`,\n        routerLink: '/my-account/blocklist/accounts',\n        children: [\n          {\n            label: $localize`Muted accounts`,\n            routerLink: '/my-account/blocklist/accounts'\n          },\n          {\n            label: $localize`Muted servers`,\n            routerLink: '/my-account/blocklist/servers'\n          },\n          {\n            label: $localize`Abuse reports`,\n            routerLink: '/my-account/abuses'\n          }\n        ]\n      },\n\n      ...Object.values(clientRoutes)\n        .map(clientRoute => ({\n          label: clientRoute.menuItem?.label,\n          routerLink: '/my-account/p/' + clientRoute.route\n        }))\n    ]\n  }\n}\n","<div class=\"root\">\n  <div class=\"margin-content\">\n    <a i18n class=\"visually-hidden-focusable skip-to-content-sub-menu\" href=\"#my-account-content\" (click)=\"$event.preventDefault(); myAccountContent.focus()\">Skip the sub menu</a>\n\n    <my-horizontal-menu i18n-h1 h1=\"My account\" h1Icon=\"cog\" [menuEntries]=\"menuEntries\"></my-horizontal-menu>\n  </div>\n\n  <div #myAccountContent tabindex=\"-1\" id=\"my-account-content\" class=\"margin-content pb-5 outline-0\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { Routes } from '@angular/router'\nimport { userResolver } from '@app/core/routing/user.resolver'\nimport { AbuseService } from '@app/shared/shared-moderation/abuse.service'\nimport { BlocklistService } from '@app/shared/shared-moderation/blocklist.service'\nimport { BulkService } from '@app/shared/shared-moderation/bulk.service'\nimport { VideoBlockService } from '@app/shared/shared-moderation/video-block.service'\nimport { PluginPagesComponent } from '@app/shared/shared-plugin-pages/plugin-pages.component'\nimport { TwoFactorService } from '@app/shared/shared-users/two-factor.service'\nimport { VideoCommentService } from '@app/shared/shared-video-comment/video-comment.service'\nimport { CanDeactivateGuard, LoginGuard } from '../core'\nimport { MyAccountAbusesListComponent } from './my-account-abuses/my-account-abuses-list.component'\nimport { MyAccountApplicationsComponent } from './my-account-applications/my-account-applications.component'\nimport { MyAccountBlocklistComponent } from './my-account-blocklist/my-account-blocklist.component'\nimport { MyAccountServerBlocklistComponent } from './my-account-blocklist/my-account-server-blocklist.component'\nimport { MyAccountImportExportComponent, UserImportExportService } from './my-account-import-export'\nimport { MyAccountNotificationsComponent } from './my-account-notifications/my-account-notifications.component'\nimport { MyAccountSettingsComponent } from './my-account-settings/my-account-settings.component'\nimport { MyAccountTwoFactorComponent } from './my-account-settings/my-account-two-factor/my-account-two-factor.component'\nimport { MyAccountComponent } from './my-account.component'\n\nexport default [\n  {\n    path: '',\n    component: MyAccountComponent,\n    providers: [\n      UserImportExportService,\n      TwoFactorService,\n      BlocklistService,\n      AbuseService,\n      VideoBlockService,\n      BulkService,\n      VideoCommentService\n    ],\n    resolve: {\n      user: userResolver\n    },\n    canActivateChild: [ LoginGuard ],\n    children: [\n      {\n        path: '',\n        redirectTo: 'settings',\n        pathMatch: 'full'\n      },\n      {\n        path: 'settings',\n        component: MyAccountSettingsComponent,\n        data: {\n          meta: {\n            title: $localize`Account settings`\n          }\n        }\n      },\n\n      {\n        path: 'two-factor-auth',\n        component: MyAccountTwoFactorComponent,\n        data: {\n          meta: {\n            title: $localize`Two factor authentication`\n          }\n        }\n      },\n\n      {\n        path: 'video-channels',\n        redirectTo: '/my-library/video-channels',\n        pathMatch: 'full'\n      },\n\n      {\n        path: 'video-playlists',\n        redirectTo: '/my-library/video-playlists',\n        pathMatch: 'full'\n      },\n      {\n        path: 'video-playlists/create',\n        redirectTo: '/my-library/video-playlists/create',\n        pathMatch: 'full'\n      },\n      {\n        path: 'video-playlists/:videoPlaylistId',\n        redirectTo: '/my-library/video-playlists/:videoPlaylistId',\n        pathMatch: 'full'\n      },\n      {\n        path: 'video-playlists/update/:videoPlaylistId',\n        redirectTo: '/my-library/video-playlists/update/:videoPlaylistId',\n        pathMatch: 'full'\n      },\n\n      {\n        path: 'videos',\n        redirectTo: '/my-library/videos',\n        pathMatch: 'full'\n      },\n      {\n        path: 'video-imports',\n        redirectTo: '/my-library/video-imports',\n        pathMatch: 'full'\n      },\n      {\n        path: 'subscriptions',\n        redirectTo: '/my-library/subscriptions',\n        pathMatch: 'full'\n      },\n      {\n        path: 'ownership',\n        redirectTo: '/my-library/ownership',\n        pathMatch: 'full'\n      },\n      {\n        path: 'blocklist/accounts',\n        component: MyAccountBlocklistComponent,\n        data: {\n          meta: {\n            title: $localize`Muted accounts`\n          }\n        }\n      },\n      {\n        path: 'blocklist/servers',\n        component: MyAccountServerBlocklistComponent,\n        data: {\n          meta: {\n            title: $localize`Muted servers`\n          }\n        }\n      },\n      {\n        path: 'history/videos',\n        redirectTo: '/my-library/history/videos',\n        pathMatch: 'full'\n      },\n      {\n        path: 'notifications',\n        component: MyAccountNotificationsComponent,\n        data: {\n          meta: {\n            title: $localize`Notifications`\n          }\n        }\n      },\n      {\n        path: 'abuses',\n        component: MyAccountAbusesListComponent,\n        data: {\n          meta: {\n            title: $localize`My abuse reports`\n          }\n        }\n      },\n      {\n        path: 'applications',\n        component: MyAccountApplicationsComponent,\n        data: {\n          meta: {\n            title: $localize`Applications`\n          }\n        }\n      },\n      {\n        path: 'videos/comments',\n        redirectTo: '/my-library/videos/comments'\n      },\n      {\n        path: 'import-export',\n        component: MyAccountImportExportComponent,\n        canDeactivate: [ CanDeactivateGuard ],\n        data: {\n          meta: {\n            title: $localize`Import/Export`\n          }\n        }\n      },\n      {\n        path: 'watched-words/list',\n        redirectTo: '/my-library/watched-words/list',\n        pathMatch: 'full'\n      },\n      {\n        path: 'auto-tag-policies',\n        redirectTo: '/my-library/auto-tag-policies',\n        pathMatch: 'full'\n      },\n      {\n        path: 'p',\n        children: [\n          {\n            path: '**',\n            component: PluginPagesComponent,\n            data: {\n              parentRoute: '/my-account',\n              pluginScope: 'my-account'\n            }\n          }\n        ]\n      }\n    ]\n  }\n] satisfies Routes\n"]}