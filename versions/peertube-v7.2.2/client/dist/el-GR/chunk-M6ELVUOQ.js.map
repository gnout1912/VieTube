{"version":3,"mappings":"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","names":["import_debug","ue","ye","Pe","l","he","invisible","Ce","fe","_","n","v","ɵɵelementContainerStart","ɵɵelementStart","ɵɵlistener","$event","element_r5","ɵɵrestoreView","_r4","$implicit","startAt_r6","ɵɵreference","stopAt_r7","playlist_r2","ɵɵnextContext","ctx_r2","ɵɵresetView","toggleOptionalPlaylist","timestamp","ɵɵelementEnd","ɵɵtwoWayListener","i0","ɵɵtwoWayBindingSet","startTimestamp","onElementTimestampUpdate","stopTimestamp","z","t","p","e","ɵɵadvance","ɵɵproperty","getOptionalInputName","enabled","video","duration","ɵɵtwoWayProperty","Te","ɵɵi18n","ɵɵtemplate","VideoAddToPlaylistComponent_div_8_div_7_ng_container_5_Template","buildOptionalRowElements","Se","_r1","toggleMainPlaylist","ɵɵelement","ɵɵtext","stopPropagation","toggleOptionalRow","VideoAddToPlaylistComponent_div_8_div_7_Template","ɵɵpureFunction1","_c0","optionalRowDisplayed","isPresentMultipleTimes","getPrimaryInputName","isPrimaryCheckboxChecked","ɵɵtextInterpolate1","displayName","_c1","ve","formErrors","Oe","_r8","createPlaylist","VideoAddToPlaylistComponent_form_13_div_5_Template","form","_c2","valid","debugLogger","debug","VideoAddToPlaylistComponent","FormReactive","formReactiveService","inject","FormReactiveService","authService","AuthService","notifier","Notifier","videoPlaylistService","VideoPlaylistService","cd","ChangeDetectorRef","input","undefined","currentVideoTimestamp","videoExistsInPlaylistChange","output","isNewPlaylistBlockOpened","videoPlaylistSearch","videoPlaylistSearchChanged","Subject","videoPlaylists","disabled","listenToPlaylistChangeSub","playlistsData","pendingAddId","user","getUser","ngOnInit","buildForm","VIDEO_PLAYLIST_DISPLAY_NAME_VALIDATOR","listenToMyAccountPlaylistsChange","subscribe","result","data","runVideoExistsInPlaylistCheck","id","pipe","debounceTime","load","ngOnChanges","simpleChanges","reload","ngOnDestroy","unsubscribePlaylistChanges","disableForReuse","enabledForReuse","markForCheck","listenToVideoPlaylistChange","listMyPlaylistWithCache","playlistsResult","openCreateBlock","event","preventDefault","playlist","elements","length","element","playlistElementId","addVideoInPlaylist","removeVideoFromPlaylist","videoPlaylistCreate","value","privacy","VideoPlaylistPrivacy","PRIVATE","createVideoPlaylist","next","error","err","message","onVideoPlaylistSearchChanged","filter","suffix","lastElement","push","body","updateVideoOfPlaylist","success","emit","complete","isOptionalRowDisplayed","elementId","existResult","rebuildPlaylists","unsubscribe","oldPlaylists","existingPlaylists","playlistId","playlistSummary","map","oldPlaylist","find","videoId","res","formatTimestamp","videoPlaylistElement","start","secondsToTime","stop","x","__ngFactoryType__","selectors","inputs","outputs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","decls","vars","consts","i18n_0","$localize","ctx","VideoAddToPlaylistComponent_div_8_Template","VideoAddToPlaylistComponent_form_13_Template","dependencies","FormsModule","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","NgModel","NgFor","NgClass","PeertubeCheckboxComponent","GlobalIconComponent","NgIf","TimestampInputComponent","ReactiveFormsModule","FormGroupDirective","FormControlName","styles","changeDetection","_VideoAddToPlaylistComponent","ze","a"],"ignoreList":[],"sources":["src/app/shared/shared-video-playlist/video-add-to-playlist.component.ts","src/app/shared/shared-video-playlist/video-add-to-playlist.component.html"],"sourcesContent":["import debug from 'debug'\nimport { Subject, Subscription } from 'rxjs'\nimport { debounceTime, filter } from 'rxjs/operators'\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  inject,\n  input,\n  output\n} from '@angular/core'\nimport { AuthService, DisableForReuseHook, Notifier } from '@app/core'\nimport { secondsToTime } from '@peertube/peertube-core-utils'\nimport {\n  CachedVideoExistInPlaylist,\n  Video,\n  VideoPlaylistCreate,\n  VideoPlaylistElementCreate,\n  VideoPlaylistElementUpdate,\n  VideoPlaylistPrivacy\n} from '@peertube/peertube-models'\nimport { VIDEO_PLAYLIST_DISPLAY_NAME_VALIDATOR } from '../form-validators/video-playlist-validators'\nimport { CachedPlaylist, VideoPlaylistService } from './video-playlist.service'\nimport { TimestampInputComponent } from '../shared-forms/timestamp-input.component'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { PeertubeCheckboxComponent } from '../shared-forms/peertube-checkbox.component'\nimport { NgFor, NgClass, NgIf } from '@angular/common'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\n\nconst debugLogger = debug('peertube:playlists:VideoAddToPlaylistComponent')\n\ntype PlaylistElement = {\n  enabled: boolean\n  playlistElementId?: number\n  startTimestamp?: number\n  stopTimestamp?: number\n}\n\ntype PlaylistSummary = {\n  id: number\n  displayName: string\n  optionalRowDisplayed: boolean\n\n  elements: PlaylistElement[]\n}\n\n@Component({\n  selector: 'my-video-add-to-playlist',\n  styleUrls: [ './video-add-to-playlist.component.scss' ],\n  templateUrl: './video-add-to-playlist.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    FormsModule,\n    NgFor,\n    NgClass,\n    PeertubeCheckboxComponent,\n    GlobalIconComponent,\n    NgIf,\n    TimestampInputComponent,\n    ReactiveFormsModule\n  ]\n})\nexport class VideoAddToPlaylistComponent extends FormReactive implements OnInit, OnChanges, OnDestroy, DisableForReuseHook {\n  protected formReactiveService = inject(FormReactiveService)\n  private authService = inject(AuthService)\n  private notifier = inject(Notifier)\n  private videoPlaylistService = inject(VideoPlaylistService)\n  private cd = inject(ChangeDetectorRef)\n\n  readonly video = input<Video>(undefined)\n  readonly currentVideoTimestamp = input<number>(undefined)\n\n  readonly videoExistsInPlaylistChange = output()\n\n  isNewPlaylistBlockOpened = false\n\n  videoPlaylistSearch: string\n  videoPlaylistSearchChanged = new Subject<void>()\n\n  videoPlaylists: PlaylistSummary[] = []\n\n  private disabled = false\n\n  private listenToPlaylistChangeSub: Subscription\n  private playlistsData: CachedPlaylist[] = []\n\n  private pendingAddId: number\n\n  get user () {\n    return this.authService.getUser()\n  }\n\n  ngOnInit () {\n    this.buildForm({\n      displayName: VIDEO_PLAYLIST_DISPLAY_NAME_VALIDATOR\n    })\n\n    this.videoPlaylistService.listenToMyAccountPlaylistsChange()\n      .subscribe(result => {\n        this.playlistsData = result.data\n\n        this.videoPlaylistService.runVideoExistsInPlaylistCheck(this.video().id)\n      })\n\n    this.videoPlaylistSearchChanged\n      .pipe(debounceTime(500))\n      .subscribe(() => this.load())\n  }\n\n  ngOnChanges (simpleChanges: SimpleChanges) {\n    if (simpleChanges['video']) {\n      this.reload()\n    }\n  }\n\n  ngOnDestroy () {\n    this.unsubscribePlaylistChanges()\n  }\n\n  disableForReuse () {\n    this.disabled = true\n  }\n\n  enabledForReuse () {\n    this.disabled = false\n  }\n\n  reload () {\n    debugLogger('Reloading component')\n\n    this.videoPlaylists = []\n    this.videoPlaylistSearch = undefined\n\n    this.load()\n\n    this.cd.markForCheck()\n  }\n\n  load () {\n    debugLogger('Loading component')\n\n    this.listenToVideoPlaylistChange()\n\n    this.videoPlaylistService.listMyPlaylistWithCache(this.user, this.videoPlaylistSearch)\n      .subscribe(playlistsResult => {\n        this.playlistsData = playlistsResult.data\n\n        this.videoPlaylistService.runVideoExistsInPlaylistCheck(this.video().id)\n      })\n  }\n\n  openCreateBlock (event: Event) {\n    event.preventDefault()\n\n    this.isNewPlaylistBlockOpened = true\n  }\n\n  toggleMainPlaylist (e: Event, playlist: PlaylistSummary) {\n    e.preventDefault()\n\n    if (this.isPresentMultipleTimes(playlist) || playlist.optionalRowDisplayed) return\n\n    if (playlist.elements.length === 0) {\n      const element: PlaylistElement = {\n        enabled: true,\n        playlistElementId: undefined,\n        startTimestamp: 0,\n        stopTimestamp: this.video().duration\n      }\n\n      this.addVideoInPlaylist(playlist, element)\n    } else {\n      this.removeVideoFromPlaylist(playlist, playlist.elements[0].playlistElementId)\n      playlist.elements = []\n    }\n\n    this.cd.markForCheck()\n  }\n\n  toggleOptionalPlaylist (e: Event, playlist: PlaylistSummary, element: PlaylistElement, startTimestamp: number, stopTimestamp: number) {\n    e.preventDefault()\n\n    if (element.enabled) {\n      this.removeVideoFromPlaylist(playlist, element.playlistElementId)\n      element.enabled = false\n\n      // Hide optional rows pane when the user unchecked all the playlists\n      if (this.isPrimaryCheckboxChecked(playlist) === false) {\n        playlist.optionalRowDisplayed = false\n      }\n    } else {\n      const element: PlaylistElement = {\n        enabled: true,\n        playlistElementId: undefined,\n        startTimestamp,\n        stopTimestamp\n      }\n\n      this.addVideoInPlaylist(playlist, element)\n    }\n\n    this.cd.markForCheck()\n  }\n\n  createPlaylist () {\n    const displayName = this.form.value['displayName']\n\n    const videoPlaylistCreate: VideoPlaylistCreate = {\n      displayName,\n      privacy: VideoPlaylistPrivacy.PRIVATE\n    }\n\n    this.videoPlaylistService.createVideoPlaylist(videoPlaylistCreate)\n      .subscribe({\n        next: () => {\n          this.isNewPlaylistBlockOpened = false\n\n          this.cd.markForCheck()\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  onVideoPlaylistSearchChanged () {\n    this.videoPlaylistSearchChanged.next()\n  }\n\n  isPrimaryCheckboxChecked (playlist: PlaylistSummary) {\n    // Reduce latency when adding a video to a playlist using pendingAddId\n    return this.pendingAddId === playlist.id ||\n      playlist.elements.filter(e => e.enabled).length !== 0\n  }\n\n  toggleOptionalRow (playlist: PlaylistSummary) {\n    playlist.optionalRowDisplayed = !playlist.optionalRowDisplayed\n\n    this.cd.markForCheck()\n  }\n\n  getPrimaryInputName (playlist: PlaylistSummary) {\n    return 'in-playlist-primary-' + playlist.id\n  }\n\n  getOptionalInputName (playlist: PlaylistSummary, element?: PlaylistElement) {\n    const suffix = element\n      ? '-' + element.playlistElementId\n      : ''\n\n    return 'in-playlist-optional-' + playlist.id + suffix\n  }\n\n  buildOptionalRowElements (playlist: PlaylistSummary) {\n    const elements = playlist.elements\n\n    const lastElement = elements.length === 0\n      ? undefined\n      : elements[elements.length - 1]\n\n    // Build an empty last element\n    if (!lastElement || lastElement.enabled === true) {\n      elements.push({\n        enabled: false,\n        startTimestamp: 0,\n        stopTimestamp: this.video().duration\n      })\n    }\n\n    return elements\n  }\n\n  isPresentMultipleTimes (playlist: PlaylistSummary) {\n    return playlist.elements.filter(e => e.enabled === true).length > 1\n  }\n\n  onElementTimestampUpdate (playlist: PlaylistSummary, element: PlaylistElement) {\n    if (!element.playlistElementId || element.enabled === false) return\n\n    const body: VideoPlaylistElementUpdate = {\n      startTimestamp: element.startTimestamp,\n      stopTimestamp: element.stopTimestamp\n    }\n\n    this.videoPlaylistService.updateVideoOfPlaylist(playlist.id, element.playlistElementId, body, this.video().id)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Timestamps updated`)\n\n          this.videoExistsInPlaylistChange.emit()\n        },\n\n        error: err => this.notifier.error(err.message),\n\n        complete: () => this.cd.markForCheck()\n      })\n  }\n\n  private isOptionalRowDisplayed (playlist: PlaylistSummary) {\n    const elements = playlist.elements.filter(e => e.enabled)\n\n    if (elements.length > 1) return true\n\n    if (elements.length === 1) {\n      const element = elements[0]\n\n      if (\n        (element.startTimestamp && element.startTimestamp !== 0) ||\n        (element.stopTimestamp && element.stopTimestamp !== this.video().duration)\n      ) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  private removeVideoFromPlaylist (playlist: PlaylistSummary, elementId: number) {\n    this.videoPlaylistService.removeVideoFromPlaylist(playlist.id, elementId, this.video().id)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Video removed from ${playlist.displayName}`)\n\n          this.videoExistsInPlaylistChange.emit()\n        },\n\n        error: err => this.notifier.error(err.message),\n\n        complete: () => this.cd.markForCheck()\n      })\n  }\n\n  private listenToVideoPlaylistChange () {\n    this.unsubscribePlaylistChanges()\n\n    this.listenToPlaylistChangeSub = this.videoPlaylistService.listenToVideoPlaylistChange(this.video().id)\n      .pipe(filter(() => this.disabled === false))\n      .subscribe(existResult => this.rebuildPlaylists(existResult))\n  }\n\n  private unsubscribePlaylistChanges () {\n    if (this.listenToPlaylistChangeSub) {\n      this.listenToPlaylistChangeSub.unsubscribe()\n      this.listenToPlaylistChangeSub = undefined\n    }\n  }\n\n  private rebuildPlaylists (existResult: CachedVideoExistInPlaylist[]) {\n    const video = this.video()\n    debugLogger('Got existing results for %d.', video.id, existResult)\n\n    const oldPlaylists = this.videoPlaylists\n\n    this.videoPlaylists = []\n    for (const playlist of this.playlistsData) {\n      const existingPlaylists = existResult.filter(p => p.playlistId === playlist.id)\n\n      const playlistSummary = {\n        id: playlist.id,\n        optionalRowDisplayed: false,\n        displayName: playlist.displayName,\n        elements: existingPlaylists.map(e => ({\n          enabled: true,\n          playlistElementId: e.playlistElementId,\n          startTimestamp: e.startTimestamp || 0,\n          stopTimestamp: e.stopTimestamp || this.video().duration\n        }))\n      }\n\n      const oldPlaylist = oldPlaylists.find(p => p.id === playlist.id)\n      playlistSummary.optionalRowDisplayed = oldPlaylist\n        ? oldPlaylist.optionalRowDisplayed\n        : this.isOptionalRowDisplayed(playlistSummary)\n\n      this.videoPlaylists.push(playlistSummary)\n    }\n\n    debugLogger('Rebuilt playlist state for video %d.', video.id, this.videoPlaylists)\n\n    this.cd.markForCheck()\n  }\n\n  private addVideoInPlaylist (playlist: PlaylistSummary, element: PlaylistElement) {\n    const body: VideoPlaylistElementCreate = { videoId: this.video().id }\n\n    if (element.startTimestamp) body.startTimestamp = element.startTimestamp\n    if (element.stopTimestamp && element.stopTimestamp !== this.video().duration) body.stopTimestamp = element.stopTimestamp\n\n    this.pendingAddId = playlist.id\n\n    this.videoPlaylistService.addVideoInPlaylist(playlist.id, body)\n      .subscribe({\n        next: res => {\n          const message = body.startTimestamp || body.stopTimestamp\n            ? $localize`Video added in ${playlist.displayName} at timestamps ${this.formatTimestamp(element)}`\n            : $localize`Video added in ${playlist.displayName}`\n\n          this.notifier.success(message)\n\n          if (element) element.playlistElementId = res.videoPlaylistElement.id\n\n          this.videoExistsInPlaylistChange.emit()\n        },\n\n        error: err => {\n          this.pendingAddId = undefined\n          this.cd.markForCheck()\n\n          this.notifier.error(err.message)\n        },\n\n        complete: () => {\n          this.pendingAddId = undefined\n          this.cd.markForCheck()\n        }\n      })\n  }\n\n  private formatTimestamp (element: PlaylistElement) {\n    const start = element.startTimestamp ? secondsToTime(element.startTimestamp) : ''\n    const stop = element.stopTimestamp ? secondsToTime(element.stopTimestamp) : ''\n\n    return `(${start}-${stop})`\n  }\n}\n","<div class=\"root\">\n  <div class=\"header\">\n    <div class=\"first-row\">\n      <div i18n class=\"title\">Save to</div>\n    </div>\n  </div>\n\n  <div class=\"input-container\">\n    <input type=\"text\" placeholder=\"Search playlists\" i18n-placeholder [(ngModel)]=\"videoPlaylistSearch\" (ngModelChange)=\"onVideoPlaylistSearchChanged()\" />\n  </div>\n\n  <div class=\"playlists\">\n    <div\n      *ngFor=\"let playlist of videoPlaylists\"\n      class=\"playlist dropdown-item\" [ngClass]=\"{ 'has-optional-row': playlist.optionalRowDisplayed }\"\n    >\n      <button class=\"primary-row button-unstyle\" (click)=\"toggleMainPlaylist($event, playlist)\">\n        <my-peertube-checkbox\n          [disabled]=\"isPresentMultipleTimes(playlist) || playlist.optionalRowDisplayed\" [inputName]=\"getPrimaryInputName(playlist)\"\n          [ngModel]=\"isPrimaryCheckboxChecked(playlist)\"\n        ></my-peertube-checkbox>\n\n        <label [for]=\"getPrimaryInputName(playlist)\" class=\"display-name\">\n          {{ playlist.displayName }}\n        </label>\n\n        <button\n          class=\"optional-row-icon button-unstyle\" [ngClass]=\"{ 'invisible': !isPrimaryCheckboxChecked(playlist) }\"\n          (click)=\"$event.stopPropagation(); toggleOptionalRow(playlist)\"\n        >\n          <my-global-icon iconName=\"add\" aria-hidden=\"true\"></my-global-icon>\n        </button>\n      </button>\n\n      <div class=\"optional-rows\" *ngIf=\"playlist.optionalRowDisplayed\">\n        <div class=\"header-label\" i18n>Start at</div>\n        <div class=\"header-label\" i18n>Stop at</div>\n\n        <ng-container *ngFor=\"let element of buildOptionalRowElements(playlist)\">\n          <my-peertube-checkbox\n            [inputName]=\"getOptionalInputName(playlist, element)\"\n            [ngModel]=\"element.enabled\"\n            (click)=\"toggleOptionalPlaylist($event, playlist, element, startAt.timestamp(), stopAt.timestamp())\"\n          ></my-peertube-checkbox>\n\n          <my-timestamp-input\n            class=\"me-2\"\n            [maxTimestamp]=\"video().duration\"\n            [(ngModel)]=\"element.startTimestamp\"\n            (inputBlur)=\"onElementTimestampUpdate(playlist, element)\"\n            #startAt\n          ></my-timestamp-input>\n\n          <my-timestamp-input\n            [maxTimestamp]=\"video().duration\"\n            [(ngModel)]=\"element.stopTimestamp\"\n            (inputBlur)=\"onElementTimestampUpdate(playlist, element)\"\n            #stopAt\n          ></my-timestamp-input>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n\n  <button class=\"new-playlist-button dropdown-item\" (click)=\"openCreateBlock($event)\" [hidden]=\"isNewPlaylistBlockOpened\">\n    <my-global-icon iconName=\"add\" aria-hidden=\"true\"></my-global-icon>\n\n    <span i18n>Create a private playlist</span>\n  </button>\n\n  <form class=\"new-playlist-block\" *ngIf=\"isNewPlaylistBlockOpened\" (ngSubmit)=\"createPlaylist()\" [formGroup]=\"form\">\n    <div class=\"form-group\">\n      <label i18n for=\"displayName\">Display name</label>\n      <input\n        type=\"text\" id=\"displayName\" class=\"form-control\"\n        formControlName=\"displayName\" [ngClass]=\"{ 'input-error': formErrors['displayName'] }\"\n      >\n      <div *ngIf=\"formErrors['displayName']\" class=\"form-error\" role=\"alert\">\n        {{ formErrors['displayName'] }}\n      </div>\n    </div>\n\n    <input type=\"submit\" class=\"peertube-button primary-button\" i18n-value value=\"Create\" [disabled]=\"!form.valid\">\n  </form>\n</div>\n"]}