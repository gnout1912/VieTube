{
  "version": 3,
  "sources": ["src/app/shared/shared-main/video/embed.component.ts", "src/app/shared/shared-main/video/embed.component.html"],
  "sourcesContent": ["import { Component, ElementRef, OnChanges, booleanAttribute, inject, input, numberAttribute } from '@angular/core'\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser'\nimport { buildVideoEmbedLink, decorateVideoLink } from '@peertube/peertube-core-utils'\nimport { Video } from '@peertube/peertube-models'\nimport { buildVideoOrPlaylistEmbed } from '@root-helpers/video'\nimport { environment } from 'src/environments/environment'\n\nexport type EmbedVideoInput = Pick<Video, 'name' | 'uuid'> & Partial<Pick<Video, 'aspectRatio'>>\n\n@Component({\n  selector: 'my-embed',\n  styleUrls: [ './embed.component.scss' ],\n  templateUrl: './embed.component.html',\n  standalone: true\n})\nexport class EmbedComponent implements OnChanges {\n  private sanitizer = inject(DomSanitizer)\n  private el = inject(ElementRef)\n\n  readonly video = input.required<EmbedVideoInput>()\n  readonly enableAPI = input<boolean, unknown>(undefined, { transform: booleanAttribute })\n  readonly mute = input<boolean, unknown>(undefined, { transform: booleanAttribute })\n  readonly autoplay = input<boolean, unknown>(undefined, { transform: booleanAttribute })\n  readonly version = input<number, unknown>(undefined, { transform: numberAttribute })\n\n  embedHTML: SafeHtml\n\n  ngOnChanges () {\n    const html = buildVideoOrPlaylistEmbed({\n      embedUrl: decorateVideoLink({\n        url: buildVideoEmbedLink(this.video(), environment.originServerUrl),\n\n        title: false,\n        warningTitle: false,\n        api: this.enableAPI(),\n        muted: this.mute(),\n        autoplay: this.autoplay(),\n        version: this.version()\n      }),\n      embedTitle: this.video().name,\n      aspectRatio: this.video().aspectRatio\n    })\n\n    this.embedHTML = this.sanitizer.bypassSecurityTrustHtml(html)\n  }\n\n  getIframe () {\n    return (this.el.nativeElement as HTMLElement).querySelector('iframe')\n  }\n}\n", "<div class=\"screenratio\">\n  <div [innerHTML]=\"embedHTML\"></div>\n</div>\n"],
  "mappings": "yNAeA,IAAaA,GAAc,IAAA,CAArB,IAAOA,EAAP,MAAOA,CAAc,CACjBC,UAAYC,EAAOC,CAAY,EAC/BC,GAAKF,EAAOG,CAAU,EAErBC,MAAQC,EAAMC,SAAQ,EACtBC,UAAYF,EAAwBG,OAAW,CAAEC,UAAWC,CAAgB,CAAE,EAC9EC,KAAON,EAAwBG,OAAW,CAAEC,UAAWC,CAAgB,CAAE,EACzEE,SAAWP,EAAwBG,OAAW,CAAEC,UAAWC,CAAgB,CAAE,EAC7EG,QAAUR,EAAuBG,OAAW,CAAEC,UAAWK,CAAe,CAAE,EAEnFC,UAEAC,aAAW,CACT,IAAMC,EAAOC,EAA0B,CACrCC,SAAUC,EAAkB,CAC1BC,IAAKC,EAAoB,KAAKlB,MAAK,EAAImB,EAAYC,eAAe,EAElEC,MAAO,GACPC,aAAc,GACdC,IAAK,KAAKpB,UAAS,EACnBqB,MAAO,KAAKjB,KAAI,EAChBC,SAAU,KAAKA,SAAQ,EACvBC,QAAS,KAAKA,QAAO,EACtB,EACDgB,WAAY,KAAKzB,MAAK,EAAG0B,KACzBC,YAAa,KAAK3B,MAAK,EAAG2B,YAC3B,EAED,KAAKhB,UAAY,KAAKhB,UAAUiC,wBAAwBf,CAAI,CAC9D,CAEAgB,WAAS,CACP,OAAQ,KAAK/B,GAAGgC,cAA8BC,cAAc,QAAQ,CACtE,KAjCWrC,wCAAAA,EAAc,KAAdA,sBAAAA,EAAcsC,UAAA,CAAA,CAAA,UAAA,CAAA,EAAAC,OAAA,CAAAjC,MAAA,CAAA,EAAA,OAAA,EAAAG,UAAA,CAAA,EAAA,WAAA,EAAAI,KAAA,CAAA,EAAA,MAAA,EAAAC,SAAA,CAAA,EAAA,UAAA,EAAAC,QAAA,CAAA,EAAA,SAAA,CAAA,EAAAyB,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICf3BE,EAAA,EAAA,MAAA,CAAA,EACEC,EAAA,EAAA,MAAA,CAAA,EACFC,EAAA,SADOC,EAAA,EAAAC,EAAA,YAAAL,EAAA9B,UAAAoC,CAAA;8DDcD,IAAOrD,EAAPsD,SAAOtD,CAAc,GAAA",
  "names": ["EmbedComponent", "sanitizer", "inject", "DomSanitizer", "el", "ElementRef", "video", "input", "required", "enableAPI", "undefined", "transform", "booleanAttribute", "mute", "autoplay", "version", "numberAttribute", "embedHTML", "ngOnChanges", "html", "buildVideoOrPlaylistEmbed", "embedUrl", "decorateVideoLink", "url", "buildVideoEmbedLink", "environment", "originServerUrl", "title", "warningTitle", "api", "muted", "embedTitle", "name", "aspectRatio", "bypassSecurityTrustHtml", "getIframe", "nativeElement", "querySelector", "selectors", "inputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275sanitizeHtml", "_EmbedComponent"]
}
