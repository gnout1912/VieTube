{
  "version": 3,
  "sources": ["src/sass/include/_mixins.scss", "src/app/+about/about-instance/about-instance.component.scss", "node_modules/bootstrap/scss/vendor/_rfs.scss"],
  "sourcesContent": ["@use 'sass:math';\n@use 'sass:color';\n@use '_variables' as *;\n@import '_bootstrap-mixins';\n\n@mixin underline-primary {\n  text-decoration: underline !important;\n  text-decoration-color: pvar(--border-primary) !important;\n  text-underline-offset: 0.25em !important;\n  text-decoration-thickness: 0.15em !important;\n}\n\n@mixin section-label {\n  color: pvar(--fg-300);\n  font-size: 14px;\n  margin-bottom: 15px;\n  font-weight: $font-bold;\n  letter-spacing: 1px;\n\n  @media screen and (max-width: $mobile-view) {\n    font-size: 12px;\n    margin-bottom: 5px;\n  }\n}\n\n@mixin disable-default-a-behaviour {\n  &,\n  &:hover,\n  &:focus,\n  &:active {\n    text-decoration: none;\n  }\n\n  &:focus:not(:focus-visible) {\n    outline: none;\n  }\n}\n\n@mixin disable-outline {\n  &:focus:not(:focus-visible) {\n    outline: none !important;\n  }\n}\n\n@mixin ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n@mixin muted-1 {\n  color: pvar(--fg-300) !important;\n}\n\n@mixin muted-2 {\n  color: pvar(--fg-200) !important;\n\n  a,\n  .fake-link {\n    color: pvar(--fg);\n    text-decoration: underline;\n  }\n}\n\n@mixin fade-text ($fade-after, $background-color) {\n  position: relative;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    pointer-events: none;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    background: linear-gradient(transparent $fade-after, $background-color);\n  }\n}\n\n@mixin peertube-word-wrap ($with-hyphen: true) {\n  word-break: break-word;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n\n  @if $with-hyphen {\n    hyphens: auto;\n  }\n}\n\n@mixin apply-svg-color ($color) {\n  ::ng-deep .feather,\n  ::ng-deep .material,\n  ::ng-deep .misc {\n    color: $color;\n  }\n}\n\n@mixin fill-path-svg-color ($color) {\n  ::ng-deep svg {\n    path {\n      fill: $color;\n    }\n  }\n}\n\n@mixin fill-svg-color ($color) {\n  ::ng-deep svg {\n    fill: $color;\n  }\n}\n\n@mixin rounded-line-height-1-5 ($font-size) {\n  line-height: calc(#{$font-size} + #{math.round(math.div($font-size, 2))});\n}\n\n@mixin icon ($size) {\n  display: inline-block;\n  background-repeat: no-repeat;\n  background-size: contain;\n  width: $size;\n  height: $size;\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n@mixin global-icon-size ($size) {\n  display: inline-block;\n  width: $size;\n  height: $size;\n  line-height: $size;\n}\n\n@mixin responsive-width ($width) {\n  width: $width;\n\n  @media screen and (max-width: #{$width - 30px}) {\n    width: 100%;\n  }\n}\n\n@mixin actor-counters ($separator-margin: 10px) {\n  color: pvar(--fg-300);\n  display: flex;\n  align-items: center;\n\n  > *:not(:last-child)::after {\n    content: 'â€¢';\n    margin: 0 $separator-margin;\n    color: pvar(--primary);\n  }\n}\n\n@mixin row-blocks ($column-responsive: true, $min-height: 130px, $separator: true) {\n  display: flex;\n  min-height: $min-height;\n  padding-bottom: 20px;\n  margin-bottom: 20px;\n\n  @if $separator {\n    border-bottom: 1px solid pvar(--input-border-color);\n  }\n\n  @media screen and (max-width: $small-view) {\n    @if $column-responsive {\n      flex-direction: column;\n      height: auto;\n      align-items: center;\n    } @else {\n      min-height: initial;\n      padding-bottom: 10px;\n      margin-bottom: 10px;\n    }\n  }\n}\n\n@mixin dropdown-with-icon-item {\n  padding: pvar(--input-y-padding) 15px;\n\n  my-global-icon {\n    width: 22px;\n    opacity: .7;\n    position: relative;\n    top: -2px;\n\n    @include margin-right(10px);\n  }\n}\n\n@mixin divider($color: pvar(--bg-secondary-400), $background: pvar(--bg)) {\n  width: 95%;\n  border-top: .05rem solid $color;\n  height: .05rem;\n  text-align: center;\n  display: block;\n  position: relative;\n\n  &[data-content] {\n    margin: .8rem 0;\n\n    &::after {\n      background: $background;\n      color: $color;\n      content: attr(data-content);\n      display: inline-block;\n      font-size: .7rem;\n      padding: 0 .4rem;\n      transform: translateY(-.65rem);\n    }\n  }\n}\n\n// applies ratio (default to 16:9) to a child element (using $selector) only using\n// an immediate's parent size. This allows to set a ratio without explicit\n// dimensions, as width/height cannot be computed from each other.\n@mixin block-ratio ($selector: 'div', $inverted-ratio: math.div(9, 16)) {\n  $padding-percent: math.percentage($inverted-ratio);\n\n  position: relative;\n  height: 0;\n  width: 100%;\n  padding-top: $padding-percent;\n\n  #{$selector} {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n\n    @content;\n  }\n}\n\n@mixin play-icon ($width, $height) {\n  width: 0;\n  height: 0;\n\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%) scale(0.5);\n\n  border-top: #{math.div($height, 2)} solid transparent;\n  border-bottom: #{math.div($height, 2)} solid transparent;\n\n  border-left: $width solid #F4F4F5;\n}\n\n@mixin on-small-main-col () {\n  @media screen and (max-width: $small-view) {\n    @content;\n  }\n}\n\n@mixin on-mobile-main-col () {\n  @media screen and (max-width: $mobile-view) {\n    @content;\n  }\n}\n\n// ---------------------------------------------------------------------------\n\n@mixin margin ($arg1: null, $arg2: null, $arg3: null, $arg4: null) {\n  @if $arg2 == null and $arg3 == null and $arg4 == null {\n    @include margin-original($arg1, $arg1, $arg1, $arg1);\n  } @else if $arg3 == null and $arg4 == null {\n    @include margin-original($arg1, $arg2, $arg1, $arg2);\n  } @else if $arg4 == null {\n    @include margin-original($arg1, $arg2, $arg3, $arg2);\n  } @else {\n    @include margin-original($arg1, $arg2, $arg3, $arg4);\n  }\n}\n\n@mixin margin-original ($block-start, $inline-end, $block-end, $inline-start) {\n  @include margin-left($inline-start);\n  @include margin-right($inline-end);\n  @include margin-top($block-start);\n  @include margin-bottom($block-end);\n}\n\n@mixin margin-left ($value) {\n  @include rfs($value, margin-inline-start);\n}\n\n@mixin margin-right ($value) {\n  @include rfs($value, margin-inline-end);\n}\n\n// ---------------------------------------------------------------------------\n\n@mixin padding-original ($block-start, $inline-end, $block-end, $inline-start) {\n  @include padding-left($inline-start);\n  @include padding-right($inline-end);\n  @include padding-top($block-start);\n  @include padding-bottom($block-end);\n}\n\n@mixin padding ($arg1: null, $arg2: null, $arg3: null, $arg4: null) {\n  @if $arg2 == null and $arg3 == null and $arg4 == null {\n    @include padding-original($arg1, $arg1, $arg1, $arg1);\n  } @else if $arg3 == null and $arg4 == null {\n    @include padding-original($arg1, $arg2, $arg1, $arg2);\n  } @else if $arg4 == null {\n    @include padding-original($arg1, $arg2, $arg3, $arg2);\n  } @else {\n    @include padding-original($arg1, $arg2, $arg3, $arg4);\n  }\n}\n\n@mixin padding-left ($value) {\n  @include rfs($value, padding-inline-start);\n}\n\n@mixin padding-right ($value) {\n  @include rfs($value, padding-inline-end);\n}\n\n// ---------------------------------------------------------------------------\n\n\n/**\n *\n * inset-inline properties are not supported by iOS < 14.5\n *\n */\n\n@mixin right ($value) {\n  @supports (inset-inline-end: $value) {\n    inset-inline-end: $value;\n  }\n\n  @supports not (inset-inline-end: $value) {\n    right: $value;\n  }\n}\n\n\n@mixin left ($value) {\n  @supports (inset-inline-start: $value) {\n    inset-inline-start: $value;\n  }\n\n  @supports not (inset-inline-start: $value) {\n    left: $value;\n  }\n}\n\n", "@use '_variables' as *;\n@use '_bootstrap-variables' as *;\n@use '_mixins' as *;\n\n.content {\n  display: flex;\n  justify-content: space-between;\n\n  @include rfs(4rem, gap);\n}\n\nmy-instance-stat-rules {\n  min-width: 600px;\n  max-width: 50%;;\n}\n\n@media screen and (max-width: #{breakpoint(xl)}) {\n  .content {\n    flex-wrap: wrap;\n  }\n\n  my-instance-stat-rules {\n    min-width: 100%;\n    max-width: unset;\n  }\n}\n", "// stylelint-disable scss/dimension-no-non-numeric-values\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/main/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error \"`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Mode. Possibilities: \"min-media-query\", \"max-media-query\"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n@function divide($dividend, $divisor, $precision: 10) {\n  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);\n  $dividend: abs($dividend);\n  $divisor: abs($divisor);\n  @if $dividend == 0 {\n    @return 0;\n  }\n  @if $divisor == 0 {\n    @error \"Cannot divide by 0\";\n  }\n  $remainder: $dividend;\n  $result: 0;\n  $factor: 10;\n  @while ($remainder > 0 and $precision >= 0) {\n    $quotient: 0;\n    @while ($remainder >= $divisor) {\n      $remainder: $remainder - $divisor;\n      $quotient: $quotient + 1;\n    }\n    $result: $result * 10 + $quotient;\n    $factor: $factor * .1;\n    $remainder: $remainder * 10;\n    $precision: $precision - 1;\n    @if ($precision < 0 and $remainder >= $divisor * 5) {\n      $result: $result + 1;\n    }\n  }\n  $result: $result * $factor * $sign;\n  $dividend-unit: unit($dividend);\n  $divisor-unit: unit($divisor);\n  $unit-map: (\n    \"px\": 1px,\n    \"rem\": 1rem,\n    \"em\": 1em,\n    \"%\": 1%\n  );\n  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {\n    $result: $result * map-get($unit-map, $dividend-unit);\n  }\n  @return $result;\n}\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: divide($rfs-base-value, $rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: divide($rfs-base-value, divide($rfs-base-value * 0 + 1, $rfs-rem-value));\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: divide($rfs-breakpoint, $rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: divide($rfs-breakpoint, divide($rfs-breakpoint * 0 + 1, $rfs-rem-value));\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{divide($rfs-breakpoint, $rfs-rem-value)}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @if $rfs-mode == max-media-query {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n    @else {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) and (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query () {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query () {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: \"\";\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + \" 0\";\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + \" \" + if($rfs-unit == rem, #{divide($value, $value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + \" \" + if($rfs-unit == px, #{divide($value, $value * 0 + 1) * $rfs-rem-value}px, $value);\n      } @else {\n        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + \" \" + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: \"\";\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + \" 0\";\n    } @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + \" \" + $value;\n      } @else {\n        // Remove unit from $value for calculations\n        $value: divide($value, $value * 0 + if($unit == px, 1, divide(1, $rfs-rem-value)));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + \" \" + if($rfs-unit == rem, #{divide($value, $rfs-rem-value)}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + divide(abs($value) - $rfs-base-value, $rfs-factor);\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{divide($value-min, $rfs-rem-value)}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{divide($value-diff * 100, $rfs-breakpoint)}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + \" calc(\" + $min-width + if($value < 0, \" - \", \" + \") + $variable-width + \")\";\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluid-val: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluid-val {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule () {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluid-val);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule () {\n        #{$property}: if($rfs-mode == max-media-query, $fluid-val, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n"],
  "mappings": "ACIA,CAAA,QACE,QAAA,KACA,gBAAA,cC6RM,IAAA,KAAA,SAAA,EAAA,OA5JJ,OAAA,CAAA,SAAA,EAAA,QDnIJ,CAAA,QCsSQ,IAAA,MD/RR,uBACE,UAAA,MACA,UAAA,IAGF,OAAA,OAAA,IAAA,CAAA,SAAA,EAAA,QACE,CAbF,QAcI,UAAA,KAGF,uBACE,UAAA,KACA,UAAA",
  "names": []
}
