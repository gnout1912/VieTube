{"version":3,"mappings":"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","names":["WatchedWordsListService","authHttp","inject","HttpClient","restExtractor","RestExtractor","restService","RestService","list","options","pagination","sort","url","buildServerOrAccountListPath","params","HttpParams","addRestGetParams","get","pipe","catchError","res","handleError","addList","listName","words","body","post","err","updateList","put","deleteList","delete","suffixPath","accountName","listId","BASE_WATCHED_WORDS_URL","__publicField","environment","apiUrl","E","factory","ɵfac","_WatchedWordsListService","REQUIRED_VALIDATOR","VALIDATORS","Validators","required","MESSAGES","$localize","URL_VALIDATOR","pattern","ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","o","n","p","ɵɵproperty","ctx_r0","badgeClass","tooltip","Ue","VideoNSFWBadgeComponent","videoService","VideoService","video","input","theme","ngOnInit","buildNSFWTooltip","selectors","inputs","decls","vars","consts","i18n_0","ɵɵtemplate","VideoNSFWBadgeComponent_span_0_Template","t","ctx","nsfw","dependencies","CommonModule","NgClass","NgIf","NgbTooltipModule","NgbTooltip","encapsulation","_VideoNSFWBadgeComponent","validWords","control","value","errors","splitAndGetNotEmpty","word","length","push","reason","join","WATCHED_WORDS_LIST_NAME_VALIDATOR","minLength","maxLength","minlength","maxlength","UNIQUE_WATCHED_WORDS_VALIDATOR","unique","ɵɵtext","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","formErrors","Vt","i","Ft","$","ɵɵelementContainerStart","ɵɵlistener","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","hide","ɵɵelement","WatchedWordsListSaveModalComponent_ng_template_0_div_11_Template","WatchedWordsListSaveModalComponent_ng_template_0_div_18_Template","addOrUpdate","y","form","ɵɵpureFunction1","_c1","valid","WatchedWordsListSaveModalComponent","FormReactive","formReactiveService","FormReactiveService","modalService","NgbModal","notifier","Notifier","watchedWordsService","listAddedOrUpdated","output","modal","viewChild","openedModal","listToUpdate","buildForm","show","open","centered","keyboard","patchValue","close","reset","undefined","commonParams","__spreadProps","__spreadValues","id","subscribe","next","success","emit","error","message","__ngFactoryType__","viewQuery","rf","ie","r","Ht","re","outputs","features","F","e","WatchedWordsListSaveModalComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","FormsModule","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","GlobalIconComponent","styles","_WatchedWordsListSaveModalComponent","Xt","kt","Ut","_r3","ctx_r3","openCreateOrUpdateList","Bt","WatchedWordsListAdminOwnerComponent_ng_template_1_button_2_Template","_r2","reloadData","isInSelectionMode","qt","ɵɵi18nStart","ɵɵi18nEnd","sortTooltip","jt","ae","$implicit","expanded","list_r5","expanded_r6","actions","ɵɵtextInterpolate1","ɵɵi18nExp","qe","ɵɵpipeBind2","updatedAt","Qt","word_r7","Kt","ɵɵrepeaterCreate","WatchedWordsListAdminOwnerComponent_ng_template_4_For_4_Template","ɵɵrepeaterTrackByIdentity","ɵɵrepeater","list_r8","Yt","WatchedWordsListAdminOwnerComponent","RestTable","router","Router","route","ActivatedRoute","auth","AuthService","confirmService","ConfirmService","watchedWordsListService","mode","saveModal","lists","totalRecords","field","order","count","rowsPerPage","start","authUser","getUser","accountNameParam","account","name","constructor","isDisplayed","hasRight","UserRight","MANAGE_INSTANCE_WATCHED_WORDS","iconName","label","handler","removeList","initialize","userInformationLoaded","first","getIdentifier","reloadDataInternal","resultList","total","data","__async","confirm","D","j","$event","i0","loadLazy","WatchedWordsListAdminOwnerComponent_ng_template_1_Template","WatchedWordsListAdminOwnerComponent_ng_template_2_Template","WatchedWordsListAdminOwnerComponent_ng_template_3_Template","WatchedWordsListAdminOwnerComponent_ng_template_4_Template","WatchedWordsListAdminOwnerComponent_ng_template_5_Template","rowsPerPageOptions","getPaginationTemplate","expandedRows","TableModule","Table","PrimeTemplate","SortableColumn","RowToggler","SortIcon","SharedModule","ActionDropdownComponent","ButtonComponent","TableExpanderIconComponent","AutoColspanDirective","PTDatePipe","_WatchedWordsListAdminOwnerComponent","Jt","Zt","en","search","tn","bulkActions","selectedRows","nn","VideoCommentListAdminOwnerComponent_ng_template_1_my_action_dropdown_2_Template","onSearch","inputFilters","on","rn","an","ɵɵpureFunction0","_c2","buildSearchAutoTag","tag_r3","_n","VideoCommentListAdminOwnerComponent_ng_template_3_span_21_Template","VideoCommentListAdminOwnerComponent_ng_template_3_For_26_Template","videoComment_r4","expanded_r5","_c0","videoCommentActions","localUrl","ɵɵsanitizeUrl","displayName","by","heldForReview","textHtml","ɵɵsanitizeHtml","automaticTags","createdAt","ln","videoComment_r6","sn","dn","mn","VideoCommentListAdminOwnerComponent_ng_template_5_ng_container_3_Template","VideoCommentListAdminOwnerComponent_ng_template_5_ng_container_4_Template","VideoCommentListAdminOwnerComponent","videoCommentService","VideoCommentService","markdownRenderer","MarkdownService","bulkService","BulkService","hooks","HooksService","pluginService","PluginService","comments","addAction","buildInputFilters","buildCommentActions","buildBulkActions","ngOnDestroy","removeAction","comment","removeComment","MANAGE_ANY_VIDEO_COMMENT","description","removeCommentsOfAccount","approveComments","wrapObject","removeComments","every","c","title","children","toHtml","text","textMarkdownToHTML","markdown","withHtml","withEmoji","tag","str","obs","listAdminVideoComments","bind","listVideoCommentsOfMyVideos","lastValueFrom","VideoCommentForAdminOrUser","commentArgs","map","videoId","commentId","formatICU","complete","deleteVideoComments","deleteVideoComment","scope","removeCommentsOf","ɵɵInheritDefinitionFeature","ɵɵtwoWayListener","ɵɵtwoWayBindingSet","VideoCommentListAdminOwnerComponent_ng_template_1_Template","VideoCommentListAdminOwnerComponent_ng_template_2_Template","VideoCommentListAdminOwnerComponent_ng_template_3_Template","VideoCommentListAdminOwnerComponent_ng_template_4_Template","VideoCommentListAdminOwnerComponent_ng_template_5_Template","ɵɵtwoWayProperty","SelectableRow","TableCheckbox","TableHeaderCheckbox","AdvancedInputFilterComponent","ActorAvatarComponent","RouterLink","_VideoCommentListAdminOwnerComponent","VideoPrivacyBadgeComponent","localeId","LOCALE_ID","badges","VideoPrivacy","PUBLIC","INTERNAL","PRIVATE","PASSWORD_PROTECTED","UNLISTED","ngOnChanges","buildLabel","buildBadgeClass","buildTooltip","privacy","scheduledUpdate","updateAt","Date","toString","toLocaleString","ɵɵNgOnChangesFeature","template","_VideoPrivacyBadgeComponent","gn","a","Nn","b","Pn","U","d","Ao","Fo","f","jo","g"],"ignoreList":[],"sources":["src/app/shared/standalone-watched-words/watched-words-list.service.ts","src/app/shared/form-validators/common-validators.ts","src/app/shared/shared-video/video-nsfw-badge.component.html","src/app/shared/shared-video/video-nsfw-badge.component.ts","src/app/shared/form-validators/watched-words-list-validators.ts","src/app/shared/standalone-watched-words/watched-words-list-save-modal.component.html","src/app/shared/standalone-watched-words/watched-words-list-save-modal.component.ts","src/app/shared/standalone-watched-words/watched-words-list-admin-owner.component.html","src/app/shared/standalone-watched-words/watched-words-list-admin-owner.component.ts","src/app/shared/shared-video-comment/video-comment-list-admin-owner.component.html","src/app/shared/shared-video-comment/video-comment-list-admin-owner.component.ts","src/app/shared/shared-video/video-privacy-badge.component.ts","src/app/shared/shared-video/video-privacy-badge.component.html"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable, inject } from '@angular/core'\nimport { RestExtractor, RestPagination, RestService } from '@app/core'\nimport { ResultList, WatchedWordsList } from '@peertube/peertube-models'\nimport { SortMeta } from 'primeng/api'\nimport { Observable } from 'rxjs'\nimport { catchError } from 'rxjs/operators'\nimport { environment } from '../../../environments/environment'\n\n@Injectable()\nexport class WatchedWordsListService {\n  private authHttp = inject(HttpClient)\n  private restExtractor = inject(RestExtractor)\n  private restService = inject(RestService)\n\n  private static BASE_WATCHED_WORDS_URL = environment.apiUrl + '/api/v1/watched-words/'\n\n  list (options: {\n    accountName?: string\n    pagination: RestPagination\n    sort: SortMeta\n  }): Observable<ResultList<WatchedWordsList>> {\n    const { pagination, sort } = options\n    const url = this.buildServerOrAccountListPath(options)\n\n    let params = new HttpParams()\n    params = this.restService.addRestGetParams(params, pagination, sort)\n\n    return this.authHttp.get<ResultList<WatchedWordsList>>(url, { params })\n      .pipe(catchError(res => this.restExtractor.handleError(res)))\n  }\n\n  addList (options: {\n    accountName?: string\n    listName: string\n    words: string[]\n  }) {\n    const { listName, words } = options\n\n    const url = this.buildServerOrAccountListPath(options)\n    const body = { listName, words }\n\n    return this.authHttp.post(url, body)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  updateList (options: {\n    accountName?: string\n\n    listId: number\n    listName: string\n    words: string[]\n  }) {\n    const { listName, words } = options\n\n    const url = this.buildServerOrAccountListPath(options)\n    const body = { listName, words }\n\n    return this.authHttp.put(url, body)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  deleteList (options: {\n    accountName?: string\n    listId: number\n  }) {\n    const url = this.buildServerOrAccountListPath(options)\n\n    return this.authHttp.delete(url)\n      .pipe(catchError(err => this.restExtractor.handleError(err)))\n  }\n\n  private buildServerOrAccountListPath (options: { accountName?: string, listId?: number }) {\n    let suffixPath = options.accountName\n      ? '/accounts/' + options.accountName + '/lists'\n      : '/server/lists'\n\n    if (options.listId) {\n      suffixPath += '/' + options.listId\n    }\n\n    return WatchedWordsListService.BASE_WATCHED_WORDS_URL + suffixPath\n  }\n}\n","import { Validators } from '@angular/forms'\nimport { BuildFormValidator } from './form-validator.model'\n\nexport const REQUIRED_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required ],\n  MESSAGES: {\n    required: $localize`This field is required.`\n  }\n}\n\nexport const URL_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.pattern(/^https:\\/\\//) ],\n  MESSAGES: {\n    pattern: $localize`This field must be a URL`\n  }\n}\n","<span\n  *ngIf=\"video().nsfw\"\n  class=\"button-unstyle pt-badge\" [ngClass]=\"badgeClass\"\n  [attr.aria-label]=\"tooltip\" [ngbTooltip]=\"tooltip\" i18n\n>Sensitive</span>\n","import { CommonModule } from '@angular/common'\nimport { Component, inject, input, OnInit } from '@angular/core'\nimport { Video } from '@peertube/peertube-models'\nimport { VideoService } from '../shared-main/video/video.service'\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap'\n\n@Component({\n  selector: 'my-video-nsfw-badge',\n  templateUrl: './video-nsfw-badge.component.html',\n  standalone: true,\n  imports: [\n    CommonModule,\n    NgbTooltipModule\n  ]\n})\nexport class VideoNSFWBadgeComponent implements OnInit {\n  private videoService = inject(VideoService)\n\n  readonly video = input.required<Pick<Video, 'nsfw' | 'nsfwFlags'>>()\n  readonly theme = input<'yellow' | 'red'>('yellow')\n\n  tooltip: string\n  badgeClass: string\n\n  ngOnInit () {\n    this.tooltip = this.videoService.buildNSFWTooltip(this.video())\n\n    this.badgeClass = this.theme() === 'yellow'\n      ? 'badge-warning'\n      : 'badge-danger'\n  }\n}\n","import { AbstractControl, ValidatorFn, Validators } from '@angular/forms'\nimport { splitAndGetNotEmpty } from '@root-helpers/string'\nimport { BuildFormValidator } from './form-validator.model'\nimport { unique } from './shared/validator-utils'\n\nconst validWords: ValidatorFn = (control: AbstractControl) => {\n  if (!control.value) return null\n\n  const errors = []\n  const words = splitAndGetNotEmpty(control.value)\n\n  for (const word of words) {\n    if (word.length < 1 || word.length > 100) {\n      errors.push($localize`${word} is not valid (min 1 character/max 100 characters)`)\n    }\n  }\n\n  if (words.length > 500) {\n    errors.push($localize`There are too much words in the list (max 500 words)`)\n  }\n\n  // valid\n  if (errors.length === 0) return null\n\n  return {\n    validWords: {\n      reason: 'invalid',\n      value: errors.join('. ') + '.'\n    }\n  }\n}\n\n// ---------------------------------------------------------------------------\n\nexport const WATCHED_WORDS_LIST_NAME_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, Validators.minLength(1), Validators.maxLength(100) ],\n  MESSAGES: {\n    required: $localize`List name is required.`,\n    minlength: $localize`List name must be at least 1 character long.`,\n    maxlength: $localize`List name cannot be more than 100 characters long.`\n  }\n}\n\nexport const UNIQUE_WATCHED_WORDS_VALIDATOR: BuildFormValidator = {\n  VALIDATORS: [ Validators.required, unique, validWords ],\n  MESSAGES: {\n    required: $localize`Words are required.`,\n    unique: $localize`Words entered contain duplicates.`,\n    validWords: $localize`A word must be between 1 and 100 characters and the total number of words must not exceed 500 items`\n  }\n}\n","<ng-template #modal>\n  <ng-container [formGroup]=\"form\">\n\n    <div class=\"modal-header\">\n      <h4 i18n class=\"modal-title\">Save watched words list</h4>\n\n      <button class=\"border-0 p-0\" title=\"Close this modal\" i18n-title (click)=\"hide()\">\n        <my-global-icon iconName=\"cross\"></my-global-icon>\n      </button>\n    </div>\n\n    <div class=\"modal-body\">\n\n      <div class=\"form-group\">\n        <label i18n for=\"listName\">List name</label>\n\n        <input\n          type=\"text\" id=\"listName\" class=\"form-control\"\n          formControlName=\"listName\" [ngClass]=\"{ 'input-error': formErrors['listName'] }\"\n        >\n\n        <div *ngIf=\"formErrors.listName\" class=\"form-error\" role=\"alert\">{{ formErrors.listName }}</div>\n      </div>\n\n      <div class=\"form-group\">\n        <label i18n for=\"words\">Words</label>\n\n        <div i18n class=\"form-group-description\">One word or group of words per line.</div>\n\n        <textarea id=\"words\" formControlName=\"words\" class=\"form-control\"[ngClass]=\"{ 'input-error': formErrors['words'] }\"></textarea>\n\n        <div *ngIf=\"formErrors.words\" class=\"form-error\" role=\"alert\">{{ formErrors.words }}</div>\n      </div>\n\n    </div>\n\n    <div class=\"modal-footer inputs\">\n      <input\n        type=\"button\" role=\"button\" i18n-value value=\"Cancel\" class=\"peertube-button secondary-button\"\n        (click)=\"hide()\" (key.enter)=\"hide()\"\n      >\n\n      <input\n        type=\"submit\" i18n-value value=\"Save\" class=\"peertube-button primary-button\"\n        [disabled]=\"!form.valid\" (click)=\"addOrUpdate()\"\n      >\n    </div>\n  </ng-container>\n</ng-template>\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, ElementRef, OnInit, inject, input, output, viewChild } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { Notifier } from '@app/core'\nimport { FormReactive } from '@app/shared/shared-forms/form-reactive'\nimport { FormReactiveService } from '@app/shared/shared-forms/form-reactive.service'\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { WatchedWordsList } from '@peertube/peertube-models'\nimport { splitAndGetNotEmpty } from '@root-helpers/string'\nimport { UNIQUE_WATCHED_WORDS_VALIDATOR, WATCHED_WORDS_LIST_NAME_VALIDATOR } from '../form-validators/watched-words-list-validators'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { WatchedWordsListService } from './watched-words-list.service'\n\n@Component({\n  selector: 'my-watched-words-list-save-modal',\n  styleUrls: [ './watched-words-list-save-modal.component.scss' ],\n  templateUrl: './watched-words-list-save-modal.component.html',\n  imports: [ FormsModule, ReactiveFormsModule, GlobalIconComponent, NgIf, NgClass ]\n})\nexport class WatchedWordsListSaveModalComponent extends FormReactive implements OnInit {\n  protected formReactiveService = inject(FormReactiveService)\n  private modalService = inject(NgbModal)\n  private notifier = inject(Notifier)\n  private watchedWordsService = inject(WatchedWordsListService)\n\n  readonly accountName = input.required<string>()\n\n  readonly listAddedOrUpdated = output()\n\n  readonly modal = viewChild<ElementRef>('modal')\n\n  private openedModal: NgbModalRef\n  private listToUpdate: WatchedWordsList\n\n  ngOnInit () {\n    this.buildForm({\n      listName: WATCHED_WORDS_LIST_NAME_VALIDATOR,\n      words: UNIQUE_WATCHED_WORDS_VALIDATOR\n    })\n  }\n\n  show (list?: WatchedWordsList) {\n    this.listToUpdate = list\n\n    this.openedModal = this.modalService.open(this.modal(), { centered: true, keyboard: false })\n\n    if (list) {\n      this.form.patchValue({\n        listName: list.listName,\n        words: list.words.join('\\n')\n      })\n    }\n  }\n\n  hide () {\n    this.openedModal.close()\n    this.form.reset()\n\n    this.listToUpdate = undefined\n  }\n\n  addOrUpdate () {\n    const commonParams = {\n      accountName: this.accountName(),\n      listName: this.form.value['listName'],\n      words: splitAndGetNotEmpty(this.form.value['words'])\n    }\n\n    const obs = this.listToUpdate\n      ? this.watchedWordsService.updateList({ ...commonParams, listId: this.listToUpdate.id })\n      : this.watchedWordsService.addList(commonParams)\n\n    obs.subscribe({\n      next: () => {\n        if (this.listToUpdate) {\n          this.notifier.success($localize`${commonParams.listName} updated`)\n        } else {\n          this.notifier.success($localize`${commonParams.listName} created`)\n        }\n\n        this.listAddedOrUpdated.emit()\n      },\n\n      error: err => this.notifier.error(err.message)\n    })\n\n    this.hide()\n  }\n}\n","<p-table\n  [value]=\"lists\" [paginator]=\"totalRecords > 0\" [totalRecords]=\"totalRecords\" [rows]=\"rowsPerPage\" [first]=\"pagination.start\"\n  [rowsPerPageOptions]=\"rowsPerPageOptions\" [sortField]=\"sort.field\" [sortOrder]=\"sort.order\" dataKey=\"id\"\n  [lazy]=\"true\" (onLazyLoad)=\"loadLazy($event)\" [lazyLoadOnInit]=\"false\" [selectionPageOnly]=\"false\"\n  [showCurrentPageReport]=\"true\" [currentPageReportTemplate]=\"getPaginationTemplate()\"\n  [expandedRowKeys]=\"expandedRows\"\n>\n  <ng-template pTemplate=\"caption\">\n    <div class=\"caption\">\n      <div class=\"left-buttons\">\n        <button type=\"button\" *ngIf=\"!isInSelectionMode()\" class=\"peertube-create-button\" (click)=\"openCreateOrUpdateList()\">\n          <my-global-icon iconName=\"add\" aria-hidden=\"true\"></my-global-icon>\n          <ng-container i18n>Create a new list</ng-container>\n        </button>\n      </div>\n\n      <div class=\"ms-auto right-form\">\n        <my-button i18n-label label=\"Refresh\" icon=\"refresh\" (click)=\"reloadData()\"></my-button>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\">\n    <tr>\n      <th scope=\"col\" style=\"width: 40px;\">\n        <span i18n class=\"visually-hidden\">More information</span>\n      </th>\n      <th scope=\"col\" style=\"width: 150px;\">\n        <span i18n class=\"visually-hidden\">Actions</span>\n      </th>\n      <th scope=\"col\" style=\"width: 300px;\" i18n>List name</th>\n      <th scope=\"col\" style=\"width: 300px;\" i18n>Words</th>\n      <th scope=\"col\" style=\"width: 150px;\" i18n [ngbTooltip]=\"sortTooltip\" container=\"body\" pSortableColumn=\"updatedAt\">Date <p-sortIcon field=\"updatedAt\"></p-sortIcon></th>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"body\" let-list let-expanded=\"expanded\">\n    <tr>\n\n      <td class=\"expand-cell\">\n        <my-table-expander-icon [pRowToggler]=\"list\" i18n-tooltip tooltip=\"See all words\" [expanded]=\"expanded\"></my-table-expander-icon>\n      </td>\n\n      <td class=\"action-cell\">\n        <my-action-dropdown\n          [ngClass]=\"{ 'show': expanded }\" placement=\"bottom-right\" container=\"body\"\n          i18n-label label=\"Actions\" [actions]=\"actions\" [entry]=\"list\" buttonSize=\"small\"\n        ></my-action-dropdown>\n      </td>\n\n      <td>\n        {{ list.listName }}\n      </td>\n\n      <td i18n>\n        {{ list.words.length }} words\n      </td>\n\n      <td>{{ list.updatedAt | ptDate: 'short' }}</td>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"rowexpansion\" let-list>\n    <tr>\n      <td class=\"expand-cell\" myAutoColspan>\n        <ul>\n          @for (word of list.words; track word) {\n            <li>{{ word }}</li>\n          }\n        </ul>\n      </td>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"emptymessage\">\n    <tr>\n      <td myAutoColspan>\n        <div class=\"no-results\">\n          <ng-container i18n>No watched word lists found.</ng-container>\n        </div>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n\n<my-watched-words-list-save-modal #saveModal [accountName]=\"accountNameParam\" (listAddedOrUpdated)=\"reloadData()\"></my-watched-words-list-save-modal>\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, OnInit, inject, input, viewChild } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { AuthService, ConfirmService, Notifier, RestPagination, RestTable } from '@app/core'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { UserRight, WatchedWordsList } from '@peertube/peertube-models'\nimport { SharedModule, SortMeta } from 'primeng/api'\nimport { TableModule } from 'primeng/table'\nimport { first } from 'rxjs'\nimport { GlobalIconComponent } from '../shared-icons/global-icon.component'\nimport { ActionDropdownComponent, DropdownAction } from '../shared-main/buttons/action-dropdown.component'\nimport { ButtonComponent } from '../shared-main/buttons/button.component'\nimport { AutoColspanDirective } from '../shared-main/common/auto-colspan.directive'\nimport { PTDatePipe } from '../shared-main/common/date.pipe'\nimport { TableExpanderIconComponent } from '../shared-tables/table-expander-icon.component'\nimport { WatchedWordsListSaveModalComponent } from './watched-words-list-save-modal.component'\nimport { WatchedWordsListService } from './watched-words-list.service'\n\n@Component({\n  selector: 'my-watched-words-list-admin-owner',\n  templateUrl: './watched-words-list-admin-owner.component.html',\n  imports: [\n    GlobalIconComponent,\n    TableModule,\n    SharedModule,\n    NgIf,\n    ActionDropdownComponent,\n    ButtonComponent,\n    TableExpanderIconComponent,\n    NgClass,\n    AutoColspanDirective,\n    PTDatePipe,\n    NgbTooltip,\n    WatchedWordsListSaveModalComponent\n  ]\n})\nexport class WatchedWordsListAdminOwnerComponent extends RestTable<WatchedWordsList> implements OnInit {\n  protected router = inject(Router)\n  protected route = inject(ActivatedRoute)\n  private auth = inject(AuthService)\n  private notifier = inject(Notifier)\n  private confirmService = inject(ConfirmService)\n  private watchedWordsListService = inject(WatchedWordsListService)\n\n  readonly mode = input.required<'user' | 'admin'>()\n\n  readonly saveModal = viewChild<WatchedWordsListSaveModalComponent>('saveModal')\n\n  lists: WatchedWordsList[]\n  totalRecords = 0\n  sort: SortMeta = { field: 'createdAt', order: -1 }\n  pagination: RestPagination = { count: this.rowsPerPage, start: 0 }\n\n  actions: DropdownAction<WatchedWordsList>[][] = []\n\n  get authUser () {\n    return this.auth.getUser()\n  }\n\n  get accountNameParam () {\n    if (this.mode() === 'admin') return undefined\n\n    return this.authUser.account.name\n  }\n\n  constructor () {\n    super()\n\n    const isDisplayed = () => this.mode() === 'user' || this.authUser.hasRight(UserRight.MANAGE_INSTANCE_WATCHED_WORDS)\n\n    this.actions = [\n      [\n        {\n          iconName: 'edit',\n          label: $localize`Update`,\n          handler: list => this.openCreateOrUpdateList(list),\n          isDisplayed\n        }\n      ],\n      [\n        {\n          iconName: 'delete',\n          label: $localize`Delete`,\n          handler: list => this.removeList(list),\n          isDisplayed\n        }\n      ]\n    ]\n  }\n\n  ngOnInit () {\n    this.initialize()\n\n    this.auth.userInformationLoaded\n      .pipe(first())\n      .subscribe(() => this.reloadData())\n  }\n\n  getIdentifier () {\n    return 'WatchedWordsListAdminOwnerComponent'\n  }\n\n  openCreateOrUpdateList (list?: WatchedWordsList) {\n    this.saveModal().show(list)\n  }\n\n  protected reloadDataInternal () {\n    this.watchedWordsListService.list({ pagination: this.pagination, sort: this.sort, accountName: this.accountNameParam })\n      .subscribe({\n        next: resultList => {\n          this.totalRecords = resultList.total\n          this.lists = resultList.data\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  private async removeList (list: WatchedWordsList) {\n    const message = $localize`Are you sure you want to delete this ${list.listName} list?`\n    const res = await this.confirmService.confirm(message, $localize`Delete list`)\n    if (res === false) return\n\n    this.watchedWordsListService.deleteList({\n      listId: list.id,\n      accountName: this.accountNameParam\n    }).subscribe({\n      next: () => {\n        this.notifier.success($localize`${list.listName} removed`)\n\n        this.reloadData()\n      },\n\n      error: err => this.notifier.error(err.message)\n    })\n  }\n}\n","<p-table\n  [value]=\"comments\" [paginator]=\"totalRecords > 0\" [totalRecords]=\"totalRecords\" [rows]=\"rowsPerPage\" [first]=\"pagination.start\"\n  [rowsPerPageOptions]=\"rowsPerPageOptions\" [sortField]=\"sort.field\" [sortOrder]=\"sort.order\" dataKey=\"id\"\n  [lazy]=\"true\" (onLazyLoad)=\"loadLazy($event)\" [lazyLoadOnInit]=\"false\" [selectionPageOnly]=\"true\"\n  [showCurrentPageReport]=\"true\" [currentPageReportTemplate]=\"getPaginationTemplate()\"\n  [expandedRowKeys]=\"expandedRows\" [(selection)]=\"selectedRows\"\n>\n  <ng-template pTemplate=\"caption\">\n    <div class=\"caption\">\n      <div>\n        <my-action-dropdown\n          *ngIf=\"isInSelectionMode()\" i18n-label label=\"Batch actions\" theme=\"primary\"\n          [actions]=\"bulkActions\" [entry]=\"selectedRows\"\n        >\n        </my-action-dropdown>\n      </div>\n\n      <div class=\"ms-auto right-form\">\n        <my-advanced-input-filter [filters]=\"inputFilters\" (search)=\"onSearch($event)\"></my-advanced-input-filter>\n\n        <my-button i18n-label label=\"Refresh\" icon=\"refresh\" (click)=\"reloadData()\"></my-button>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\">\n    <tr>\n      <th scope=\"col\" style=\"width: 40px;\">\n        <p-tableHeaderCheckbox ariaLabel=\"Select all rows\" i18n-ariaLabel></p-tableHeaderCheckbox>\n      </th>\n      <th scope=\"col\" style=\"width: 40px;\">\n        <span i18n class=\"visually-hidden\">More information</span>\n      </th>\n      <th scope=\"col\" style=\"width: 70px;\">\n        <span i18n class=\"visually-hidden\">Actions</span>\n      </th>\n      <th scope=\"col\" i18n>Account</th>\n      <th scope=\"col\" i18n>Video</th>\n      <th scope=\"col\" i18n>Comment</th>\n      <th scope=\"col\" i18n>Auto tags</th>\n      <th scope=\"col\" style=\"width: 150px;\" i18n [ngbTooltip]=\"sortTooltip\" container=\"body\" pSortableColumn=\"createdAt\">Date <p-sortIcon field=\"createdAt\"></p-sortIcon></th>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"body\" let-videoComment let-expanded=\"expanded\">\n    <tr [pSelectableRow]=\"videoComment\">\n\n      <td class=\"checkbox-cell\">\n        <p-tableCheckbox [value]=\"videoComment\" ariaLabel=\"Select this row\" i18n-ariaLabel></p-tableCheckbox>\n      </td>\n\n      <td class=\"expand-cell\">\n        <my-table-expander-icon [pRowToggler]=\"videoComment\" i18n-tooltip tooltip=\"See full comment\" [expanded]=\"expanded\"></my-table-expander-icon>\n      </td>\n\n      <td class=\"action-cell\">\n        <my-action-dropdown\n          [ngClass]=\"{ 'show': expanded }\" placement=\"bottom-right\" container=\"body\"\n          [actions]=\"videoCommentActions\" [entry]=\"videoComment\" buttonSize=\"small\"\n        ></my-action-dropdown>\n      </td>\n\n      <td>\n        <a [href]=\"videoComment.account.localUrl\" i18n-title title=\"Open account in a new tab\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <div class=\"chip two-lines\">\n            <my-actor-avatar [actor]=\"videoComment.account\" actorType=\"account\" size=\"32\"></my-actor-avatar>\n            <div>\n              {{ videoComment.account.displayName }}\n              <span>{{ videoComment.by }}</span>\n            </div>\n          </div>\n        </a>\n      </td>\n\n      <td class=\"video\">\n        <em i18n>Commented video</em>\n\n        <a [href]=\"videoComment.localUrl\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-decoration-none\">{{ videoComment.video.name }}</a>\n      </td>\n\n      <td class=\"c-hand comment-content-cell\" [pRowToggler]=\"videoComment\">\n        <span *ngIf=\"videoComment.heldForReview\" class=\"pt-badge badge-red float-start me-2\" i18n>Pending review</span>\n\n        <div class=\"comment-html\">\n          <div [innerHTML]=\"videoComment.textHtml\"></div>\n        </div>\n      </td>\n\n      <td>\n        @for (tag of videoComment.automaticTags; track tag) {\n          <a\n            i18n-title title=\"Only display comments with this tag\"\n            class=\"pt-badge badge-secondary me-1\"\n            [routerLink]=\"[ '.' ]\" [queryParams]=\"{ 'search': buildSearchAutoTag(tag) }\"\n          >{{ tag }}</a>\n        }\n      </td>\n\n      <td class=\"c-hand\" [pRowToggler]=\"videoComment\">{{ videoComment.createdAt | ptDate: 'short' }}</td>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"rowexpansion\" let-videoComment>\n    <tr>\n      <td class=\"expand-cell\" myAutoColspan>\n        <div [innerHTML]=\"videoComment.textHtml\"></div>\n      </td>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"emptymessage\">\n    <tr>\n      <td myAutoColspan>\n        <div class=\"no-results\">\n          <ng-container *ngIf=\"search\" i18n>No comments found matching current filters.</ng-container>\n          <ng-container *ngIf=\"!search\" i18n>No comments found.</ng-container>\n        </div>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n\n","import { NgClass, NgIf } from '@angular/common'\nimport { Component, OnDestroy, OnInit, inject, input } from '@angular/core'\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router'\nimport { AuthService, ConfirmService, HooksService, MarkdownService, Notifier, PluginService, RestPagination, RestTable } from '@app/core'\nimport { formatICU } from '@app/helpers'\nimport { BulkService } from '@app/shared/shared-moderation/bulk.service'\nimport { VideoCommentForAdminOrUser } from '@app/shared/shared-video-comment/video-comment.model'\nimport { VideoCommentService } from '@app/shared/shared-video-comment/video-comment.service'\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap'\nimport { UserRight } from '@peertube/peertube-models'\nimport { SharedModule, SortMeta } from 'primeng/api'\nimport { TableModule } from 'primeng/table'\nimport { lastValueFrom } from 'rxjs'\nimport { ActorAvatarComponent } from '../shared-actor-image/actor-avatar.component'\nimport { AdvancedInputFilter, AdvancedInputFilterComponent } from '../shared-forms/advanced-input-filter.component'\nimport { ActionDropdownComponent, DropdownAction } from '../shared-main/buttons/action-dropdown.component'\nimport { ButtonComponent } from '../shared-main/buttons/button.component'\nimport { AutoColspanDirective } from '../shared-main/common/auto-colspan.directive'\nimport { PTDatePipe } from '../shared-main/common/date.pipe'\nimport { TableExpanderIconComponent } from '../shared-tables/table-expander-icon.component'\n\n@Component({\n  selector: 'my-video-comment-list-admin-owner',\n  templateUrl: './video-comment-list-admin-owner.component.html',\n  styleUrls: [ '../shared-moderation/moderation.scss', './video-comment-list-admin-owner.component.scss' ],\n  imports: [\n    TableModule,\n    SharedModule,\n    NgIf,\n    ActionDropdownComponent,\n    AdvancedInputFilterComponent,\n    ButtonComponent,\n    NgbTooltip,\n    TableExpanderIconComponent,\n    NgClass,\n    ActorAvatarComponent,\n    AutoColspanDirective,\n    PTDatePipe,\n    RouterLink\n  ]\n})\nexport class VideoCommentListAdminOwnerComponent extends RestTable<VideoCommentForAdminOrUser> implements OnInit, OnDestroy {\n  protected router = inject(Router)\n  protected route = inject(ActivatedRoute)\n  private auth = inject(AuthService)\n  private notifier = inject(Notifier)\n  private confirmService = inject(ConfirmService)\n  private videoCommentService = inject(VideoCommentService)\n  private markdownRenderer = inject(MarkdownService)\n  private bulkService = inject(BulkService)\n  private hooks = inject(HooksService)\n  private pluginService = inject(PluginService)\n\n  readonly mode = input.required<'user' | 'admin'>()\n\n  comments: VideoCommentForAdminOrUser[]\n  totalRecords = 0\n  sort: SortMeta = { field: 'createdAt', order: -1 }\n  pagination: RestPagination = { count: this.rowsPerPage, start: 0 }\n\n  videoCommentActions: DropdownAction<VideoCommentForAdminOrUser>[][] = []\n\n  bulkActions: DropdownAction<VideoCommentForAdminOrUser[]>[] = []\n\n  inputFilters: AdvancedInputFilter[] = []\n\n  get authUser () {\n    return this.auth.getUser()\n  }\n\n  async ngOnInit () {\n    this.initialize()\n\n    if (this.mode() === 'admin') {\n      this.pluginService.addAction('admin-video-comment-list:load-data', () => this.reloadDataInternal())\n    }\n\n    this.buildInputFilters()\n\n    await this.buildCommentActions()\n    await this.buildBulkActions()\n  }\n\n  ngOnDestroy () {\n    if (this.mode() === 'admin') {\n      this.pluginService.removeAction('admin-video-comment-list:load-data')\n    }\n  }\n\n  private async buildCommentActions () {\n    const videoCommentActions: DropdownAction<VideoCommentForAdminOrUser>[][] = [\n      [\n        {\n          label: $localize`Delete this comment`,\n          handler: comment => this.removeComment(comment),\n          isDisplayed: () => this.mode() === 'user' || this.authUser.hasRight(UserRight.MANAGE_ANY_VIDEO_COMMENT)\n        },\n        {\n          label: $localize`Delete all comments of this account`,\n          description: $localize`Comments are deleted after a few minutes`,\n          handler: comment => this.removeCommentsOfAccount(comment),\n          isDisplayed: () => this.mode() === 'admin' && this.authUser.hasRight(UserRight.MANAGE_ANY_VIDEO_COMMENT)\n        }\n      ],\n      [\n        {\n          label: $localize`Approve this comment`,\n          handler: comment => this.approveComments([ comment ]),\n          isDisplayed: comment => this.mode() === 'user' && comment.heldForReview\n        }\n      ]\n    ]\n\n    this.videoCommentActions = this.mode() === 'admin'\n      ? await this.hooks.wrapObject(videoCommentActions, 'admin-comments', 'filter:admin-video-comments-list.actions.create.result')\n      : videoCommentActions\n  }\n\n  private async buildBulkActions () {\n    const bulkActions: DropdownAction<VideoCommentForAdminOrUser[]>[] = [\n      {\n        label: $localize`Delete`,\n        handler: comments => this.removeComments(comments),\n        isDisplayed: () => this.mode() === 'user' || this.authUser.hasRight(UserRight.MANAGE_ANY_VIDEO_COMMENT),\n        iconName: 'delete'\n      },\n      {\n        label: $localize`Approve`,\n        handler: comments => this.approveComments(comments),\n        isDisplayed: comments => this.mode() === 'user' && comments.every(c => c.heldForReview),\n        iconName: 'tick'\n      }\n    ]\n\n    this.bulkActions = this.mode() === 'admin'\n      ? await this.hooks.wrapObject(bulkActions, 'admin-comments', 'filter:admin-video-comments-list.bulk-actions.create.result')\n      : bulkActions\n  }\n\n  private buildInputFilters () {\n    if (this.mode() === 'admin') {\n      this.inputFilters = [\n        {\n          title: $localize`Advanced filters`,\n          children: [\n            {\n              value: 'local:true',\n              label: $localize`Local comments`\n            },\n            {\n              value: 'local:false',\n              label: $localize`Remote comments`\n            },\n            {\n              value: 'localVideo:true',\n              label: $localize`Comments on local videos`\n            }\n          ]\n        }\n      ]\n\n      return\n    }\n\n    this.inputFilters = [\n      {\n        title: $localize`Advanced filters`,\n        children: [\n          {\n            value: 'heldForReview:true',\n            label: $localize`Display comments awaiting your approval`\n          }\n        ]\n      }\n    ]\n  }\n\n  getIdentifier () {\n    return 'VideoCommentListAdminOwnerComponent'\n  }\n\n  toHtml (text: string) {\n    return this.markdownRenderer.textMarkdownToHTML({ markdown: text, withHtml: true, withEmoji: true })\n  }\n\n  buildSearchAutoTag (tag: string) {\n    const str = `autoTag:\"${tag}\"`\n\n    if (this.search) return this.search + ' ' + str\n\n    return str\n  }\n\n  protected async reloadDataInternal () {\n    const method = this.mode() === 'admin'\n      ? this.videoCommentService.listAdminVideoComments.bind(this.videoCommentService)\n      : this.videoCommentService.listVideoCommentsOfMyVideos.bind(this.videoCommentService)\n\n    const obs = method({ pagination: this.pagination, sort: this.sort, search: this.search })\n\n    try {\n      const resultList = await lastValueFrom(obs)\n\n      this.totalRecords = resultList.total\n\n      this.comments = []\n\n      for (const c of resultList.data) {\n        this.comments.push(new VideoCommentForAdminOrUser(c, await this.toHtml(c.text)))\n      }\n    } catch (err) {\n      this.notifier.error(err.message)\n    }\n  }\n\n  private approveComments (comments: VideoCommentForAdminOrUser[]) {\n    const commentArgs = comments.map(c => ({ videoId: c.video.id, commentId: c.id }))\n\n    this.videoCommentService.approveComments(commentArgs)\n      .subscribe({\n        next: () => {\n          this.notifier.success(\n            formatICU(\n              $localize`{count, plural, =1 {Comment approved.} other {{count} comments approved.}}`,\n              { count: commentArgs.length }\n            )\n          )\n\n          this.reloadData()\n        },\n\n        error: err => this.notifier.error(err.message),\n\n        complete: () => this.selectedRows = []\n      })\n  }\n\n  private removeComments (comments: VideoCommentForAdminOrUser[]) {\n    const commentArgs = comments.map(c => ({ videoId: c.video.id, commentId: c.id }))\n\n    this.videoCommentService.deleteVideoComments(commentArgs)\n      .subscribe({\n        next: () => {\n          this.notifier.success(\n            formatICU(\n              $localize`{count, plural, =1 {1 comment deleted.} other {{count} comments deleted.}}`,\n              { count: commentArgs.length }\n            )\n          )\n\n          this.reloadData()\n        },\n\n        error: err => this.notifier.error(err.message),\n\n        complete: () => this.selectedRows = []\n      })\n  }\n\n  private removeComment (comment: VideoCommentForAdminOrUser) {\n    this.videoCommentService.deleteVideoComment(comment.video.id, comment.id)\n      .subscribe({\n        next: () => this.reloadData(),\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n\n  private async removeCommentsOfAccount (comment: VideoCommentForAdminOrUser) {\n    const message = $localize`Do you really want to delete all comments of ${comment.by}?`\n    const res = await this.confirmService.confirm(message, $localize`Delete`)\n    if (res === false) return\n\n    const options = {\n      accountName: comment.by,\n      scope: 'instance' as 'instance'\n    }\n\n    this.bulkService.removeCommentsOf(options)\n      .subscribe({\n        next: () => {\n          this.notifier.success($localize`Comments of ${options.accountName} will be deleted in a few minutes`)\n        },\n\n        error: err => this.notifier.error(err.message)\n      })\n  }\n}\n","import { CommonModule } from '@angular/common'\nimport { Component, inject, input, LOCALE_ID, OnChanges } from '@angular/core'\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap'\nimport { Video, VideoPrivacy, VideoPrivacyType } from '@peertube/peertube-models'\n\n@Component({\n  selector: 'my-video-privacy-badge',\n  templateUrl: './video-privacy-badge.component.html',\n  imports: [ CommonModule, NgbTooltipModule ]\n})\nexport class VideoPrivacyBadgeComponent implements OnChanges {\n  private readonly localeId = inject(LOCALE_ID)\n  readonly video = input.required<Pick<Video, 'privacy' | 'scheduledUpdate'>>()\n\n  private badges: { [id in VideoPrivacyType]: string } = {\n    [VideoPrivacy.PUBLIC]: 'badge-green',\n    [VideoPrivacy.INTERNAL]: 'badge-yellow',\n    [VideoPrivacy.PRIVATE]: 'badge-grey',\n    [VideoPrivacy.PASSWORD_PROTECTED]: 'badge-purple',\n    [VideoPrivacy.UNLISTED]: 'badge-blue'\n  }\n\n  label: string\n  badgeClass: string\n  tooltip: string\n\n  ngOnChanges (): void {\n    this.label = this.buildLabel()\n    this.badgeClass = this.buildBadgeClass()\n    this.tooltip = this.buildTooltip()\n  }\n\n  buildBadgeClass () {\n    return this.badges[this.video().privacy.id]\n  }\n\n  private buildLabel () {\n    const video = this.video()\n\n    if (video.scheduledUpdate) return $localize`Scheduled`\n\n    return video.privacy.label\n  }\n\n  private buildTooltip () {\n    const video = this.video()\n\n    if (video.scheduledUpdate) {\n      const updateAt = new Date(video.scheduledUpdate.updateAt.toString()).toLocaleString(this.localeId)\n      return $localize`Scheduled on ${updateAt}`\n    }\n\n    return this.buildLabel()\n  }\n}\n","<span [ngClass]=\"badgeClass\" class=\"pt-badge\" [ngbTooltip]=\"tooltip\">\n  {{ label }}\n</span>\n"]}