"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCustomTagsToObject = exports.addCustomXMLNS = exports.sanitize = void 0;
function sanitize(url) {
    if (typeof url === 'string') {
        return url.replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
    }
    return url;
}
exports.sanitize = sanitize;
function addCustomXMLNS(rss, customXMLNS) {
    Object.assign(rss._attributes, customXMLNS.reduce(function (acc, c) {
        var xmlnsName = "xmlns:".concat(c.name);
        if (xmlnsName in acc)
            return acc;
        acc[xmlnsName] = c.value;
        return acc;
    }, {}));
}
exports.addCustomXMLNS = addCustomXMLNS;
function addCustomTagsToObject(o, customTags) {
    var tagsByName = customTags.reduce(function (tags, d) {
        if (d.name in tags)
            return tags;
        tags[d.name] = customTags.filter(function (g) { return g.name === d.name; });
        return tags;
    }, {});
    Object.keys(tagsByName).forEach(function (tagName) {
        if (tagName in o)
            return;
        o[tagName] = tagsByName[tagName].map(function (tag) {
            var sanitizedAttributes = {};
            if (tag.attributes) {
                sanitizedAttributes = Object.keys(tag.attributes).reduce(function (cur, key) {
                    var _a;
                    if (tag.attributes) {
                        cur[key] = (_a = sanitize(tag.attributes[key])) !== null && _a !== void 0 ? _a : "";
                    }
                    return cur;
                }, sanitizedAttributes);
            }
            var tagObject = __assign({}, (sanitizedAttributes && { _attributes: sanitizedAttributes }));
            if (typeof tag.value === "string") {
                return __assign(__assign(__assign({}, tagObject), (tag.cdata && tag.value && { _cdata: tag.value })), (!tag.cdata && tag.value && { _text: tag.value }));
            }
            else if (tag.value) {
                addCustomTagsToObject(tagObject, tag.value);
                return tagObject;
            }
            else {
                return tagObject;
            }
        }).filter(function (tagObject) { return !!tagObject; });
    });
}
exports.addCustomTagsToObject = addCustomTagsToObject;
//# sourceMappingURL=utils.js.map